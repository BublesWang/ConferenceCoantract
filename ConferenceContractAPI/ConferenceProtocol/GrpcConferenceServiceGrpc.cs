// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GrpcConferenceService.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcConferenceService {
  public static partial class ConferenceServiceToGrpc
  {
    static readonly string __ServiceName = "GrpcConferenceService.ConferenceServiceToGrpc";

    static readonly grpc::Marshaller<global::GrpcConferenceService.PaginationRequestSearch> __Marshaller_PaginationRequestSearch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PaginationRequestSearch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFRoomList> __Marshaller_CFRoomList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFRoomList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.roomPK> __Marshaller_roomPK = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.roomPK.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFRoomStruct> __Marshaller_CFRoomStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFRoomStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CreateInfoVM> __Marshaller_CreateInfoVM = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CreateInfoVM.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ModifiedInfoVM> __Marshaller_ModifiedInfoVM = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ModifiedInfoVM.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.DeleteInfoVM> __Marshaller_DeleteInfoVM = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.DeleteInfoVM.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFSeatList> __Marshaller_CFSeatList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFSeatList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFSeatPK> __Marshaller_CFSeatPK = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFSeatPK.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFSeatStruct> __Marshaller_CFSeatStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFSeatStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFAddressList> __Marshaller_CFAddressList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFAddressList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFAddressPK> __Marshaller_CFAddressPK = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFAddressPK.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFAddressStruct> __Marshaller_CFAddressStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFAddressStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFRoomTypeList> __Marshaller_CFRoomTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFRoomTypeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFRoomTypePK> __Marshaller_CFRoomTypePK = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFRoomTypePK.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CFRoomTypeStruct> __Marshaller_CFRoomTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CFRoomTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.Year> __Marshaller_Year = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.Year.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ConferenceList> __Marshaller_ConferenceList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ConferenceList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ConferencePK> __Marshaller_ConferencePK = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ConferencePK.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ConferenceStruct> __Marshaller_ConferenceStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ConferenceStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParentID> __Marshaller_ParentID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParentID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.UpdateInfo> __Marshaller_UpdateInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.UpdateInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.AllConferenceInfoList> __Marshaller_AllConferenceInfoList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.AllConferenceInfoList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantID> __Marshaller_ParticipantID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.LunchNames> __Marshaller_LunchNames = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.LunchNames.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.YearInfo> __Marshaller_YearInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.YearInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ResBool> __Marshaller_ResBool = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ResBool.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.YearList> __Marshaller_YearList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.YearList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityList> __Marshaller_ActivityList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityID> __Marshaller_ActivityID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityStruct> __Marshaller_ActivityStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityIDs> __Marshaller_ActivityIDs = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityIDs.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityDraftInfo> __Marshaller_ActivityDraftInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityDraftInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityTypeList> __Marshaller_ActivityTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityTypeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityTypeID> __Marshaller_ActivityTypeID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityTypeID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityTypeStruct> __Marshaller_ActivityTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityCode> __Marshaller_ActivityCode = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityCode.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkList> __Marshaller_TalkList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkID> __Marshaller_TalkID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkStruct> __Marshaller_TalkStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkIDs> __Marshaller_TalkIDs = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkIDs.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.UpdateTalkInfo> __Marshaller_UpdateTalkInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.UpdateTalkInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.Info> __Marshaller_Info = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.Info.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.IsUse> __Marshaller_IsUse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.IsUse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkDraftInfo> __Marshaller_TalkDraftInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkDraftInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkTypeList> __Marshaller_TalkTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkTypeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkTypeID> __Marshaller_TalkTypeID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkTypeID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkTypeStruct> __Marshaller_TalkTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.OrganizerLevelList> __Marshaller_OrganizerLevelList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.OrganizerLevelList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.OrganizerLevelID> __Marshaller_OrganizerLevelID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.OrganizerLevelID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.OrganizerLevelStruct> __Marshaller_OrganizerLevelStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.OrganizerLevelStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.OrganizerList> __Marshaller_OrganizerList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.OrganizerList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.OrganizerID> __Marshaller_OrganizerID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.OrganizerID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.OrganizerStruct> __Marshaller_OrganizerStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.OrganizerStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PresenterList> __Marshaller_PresenterList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PresenterList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PresenterID> __Marshaller_PresenterID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PresenterID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PresenterStruct> __Marshaller_PresenterStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PresenterStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantInfoList> __Marshaller_ParticipantInfoList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantInfoList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantStruct> __Marshaller_ParticipantStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantGroupID> __Marshaller_ParticipantGroupID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantGroupID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantList> __Marshaller_ParticipantList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PerContractNumberID> __Marshaller_PerContractNumberID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PerContractNumberID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PersonContractID> __Marshaller_PersonContractID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PersonContractID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantIDList> __Marshaller_ParticipantIDList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantIDList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CompanyId> __Marshaller_CompanyId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CompanyId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.MemberPK> __Marshaller_MemberPK = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.MemberPK.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PInfo> __Marshaller_PInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PagingInfo> __Marshaller_PagingInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PagingInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkParticipantMapInfo> __Marshaller_TalkParticipantMapInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkParticipantMapInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityParticipantMapInfo> __Marshaller_ActivityParticipantMapInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityParticipantMapInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantGroupList> __Marshaller_ParticipantGroupList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantGroupList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantGroupStruct> __Marshaller_ParticipantGroupStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantGroupStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantGroupInfo> __Marshaller_ParticipantGroupInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantGroupInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantIDs> __Marshaller_ParticipantIDs = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantIDs.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantTypeList> __Marshaller_ParticipantTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantTypeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantTypeID> __Marshaller_ParticipantTypeID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantTypeID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantTypeStruct> __Marshaller_ParticipantTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantTypeMapInfo> __Marshaller_ParticipantTypeMapInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantTypeMapInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityDraftList> __Marshaller_ActivityDraftList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityDraftList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityDraftID> __Marshaller_ActivityDraftID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityDraftID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ActivityDraftStruct> __Marshaller_ActivityDraftStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ActivityDraftStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkDraftList> __Marshaller_TalkDraftList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkDraftList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkDraftID> __Marshaller_TalkDraftID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkDraftID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.TalkDraftStruct> __Marshaller_TalkDraftStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.TalkDraftStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.MoveInfo> __Marshaller_MoveInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.MoveInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ReceptionList> __Marshaller_ReceptionList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ReceptionList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ReceptionStruct> __Marshaller_ReceptionStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ReceptionStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ReceptionID> __Marshaller_ReceptionID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ReceptionID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PolicyList> __Marshaller_PolicyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PolicyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PolicyID> __Marshaller_PolicyID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PolicyID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PolicyStruct> __Marshaller_PolicyStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PolicyStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.CreatePolicyInfo> __Marshaller_CreatePolicyInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.CreatePolicyInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.DeleteInfo> __Marshaller_DeleteInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.DeleteInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.UserName> __Marshaller_UserName = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.UserName.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.PolicyInfoStruct> __Marshaller_PolicyInfoStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.PolicyInfoStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantConferenceMapList> __Marshaller_ParticipantConferenceMapList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantConferenceMapList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantConferenceMapID> __Marshaller_ParticipantConferenceMapID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantConferenceMapID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.ParticipantConferenceMapStruct> __Marshaller_ParticipantConferenceMapStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.ParticipantConferenceMapStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceService.HistoryPolicyList> __Marshaller_HistoryPolicyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceService.HistoryPolicyList.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.CFRoomList> __Method_GetCFRoomList = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.CFRoomList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCFRoomList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_CFRoomList);

    static readonly grpc::Method<global::GrpcConferenceService.roomPK, global::GrpcConferenceService.CFRoomStruct> __Method_GetCFRoomByID = new grpc::Method<global::GrpcConferenceService.roomPK, global::GrpcConferenceService.CFRoomStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCFRoomByID",
        __Marshaller_roomPK,
        __Marshaller_CFRoomStruct);

    static readonly grpc::Method<global::GrpcConferenceService.CFRoomStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateFRoom = new grpc::Method<global::GrpcConferenceService.CFRoomStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateFRoom",
        __Marshaller_CFRoomStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.CFRoomStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateCFRoom = new grpc::Method<global::GrpcConferenceService.CFRoomStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCFRoom",
        __Marshaller_CFRoomStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.roomPK, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteCFRoom = new grpc::Method<global::GrpcConferenceService.roomPK, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCFRoom",
        __Marshaller_roomPK,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.CFSeatList> __Method_GetCFSeatList = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.CFSeatList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCFSeatList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_CFSeatList);

    static readonly grpc::Method<global::GrpcConferenceService.CFSeatPK, global::GrpcConferenceService.CFSeatStruct> __Method_GetCFSeatByID = new grpc::Method<global::GrpcConferenceService.CFSeatPK, global::GrpcConferenceService.CFSeatStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCFSeatByID",
        __Marshaller_CFSeatPK,
        __Marshaller_CFSeatStruct);

    static readonly grpc::Method<global::GrpcConferenceService.CFSeatStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateCFSeat = new grpc::Method<global::GrpcConferenceService.CFSeatStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCFSeat",
        __Marshaller_CFSeatStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.CFSeatStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateCFSeat = new grpc::Method<global::GrpcConferenceService.CFSeatStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCFSeat",
        __Marshaller_CFSeatStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.CFSeatPK, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteCFSeat = new grpc::Method<global::GrpcConferenceService.CFSeatPK, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCFSeat",
        __Marshaller_CFSeatPK,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.CFAddressList> __Method_GetCFAddressList = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.CFAddressList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCFAddressList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_CFAddressList);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.CFAddressList> __Method_GetAllCFAddressList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.CFAddressList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllCFAddressList",
        __Marshaller_Empty,
        __Marshaller_CFAddressList);

    static readonly grpc::Method<global::GrpcConferenceService.CFAddressPK, global::GrpcConferenceService.CFAddressStruct> __Method_GetCFAddressByID = new grpc::Method<global::GrpcConferenceService.CFAddressPK, global::GrpcConferenceService.CFAddressStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCFAddressByID",
        __Marshaller_CFAddressPK,
        __Marshaller_CFAddressStruct);

    static readonly grpc::Method<global::GrpcConferenceService.CFAddressStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateCFAddress = new grpc::Method<global::GrpcConferenceService.CFAddressStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCFAddress",
        __Marshaller_CFAddressStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.CFAddressStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateCFAddress = new grpc::Method<global::GrpcConferenceService.CFAddressStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCFAddress",
        __Marshaller_CFAddressStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.CFAddressPK, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteCFAddress = new grpc::Method<global::GrpcConferenceService.CFAddressPK, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCFAddress",
        __Marshaller_CFAddressPK,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.CFRoomTypeList> __Method_GetCFRoomTypeList = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.CFRoomTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCFRoomTypeList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_CFRoomTypeList);

    static readonly grpc::Method<global::GrpcConferenceService.CFRoomTypePK, global::GrpcConferenceService.CFRoomTypeStruct> __Method_GetCFRoomTypeByID = new grpc::Method<global::GrpcConferenceService.CFRoomTypePK, global::GrpcConferenceService.CFRoomTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCFRoomTypeByID",
        __Marshaller_CFRoomTypePK,
        __Marshaller_CFRoomTypeStruct);

    static readonly grpc::Method<global::GrpcConferenceService.CFRoomTypeStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateCFRoomType = new grpc::Method<global::GrpcConferenceService.CFRoomTypeStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCFRoomType",
        __Marshaller_CFRoomTypeStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.CFRoomTypeStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateCFRoomType = new grpc::Method<global::GrpcConferenceService.CFRoomTypeStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCFRoomType",
        __Marshaller_CFRoomTypeStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.CFRoomTypePK, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteCFRoomType = new grpc::Method<global::GrpcConferenceService.CFRoomTypePK, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCFRoomType",
        __Marshaller_CFRoomTypePK,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Year, global::GrpcConferenceService.ConferenceList> __Method_GetConferenceList = new grpc::Method<global::GrpcConferenceService.Year, global::GrpcConferenceService.ConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceList",
        __Marshaller_Year,
        __Marshaller_ConferenceList);

    static readonly grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.ConferenceStruct> __Method_GetConferenceByPK = new grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.ConferenceStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceByPK",
        __Marshaller_ConferencePK,
        __Marshaller_ConferenceStruct);

    static readonly grpc::Method<global::GrpcConferenceService.ParentID, global::GrpcConferenceService.ConferenceList> __Method_GetConferenceListByParentID = new grpc::Method<global::GrpcConferenceService.ParentID, global::GrpcConferenceService.ConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceListByParentID",
        __Marshaller_ParentID,
        __Marshaller_ConferenceList);

    static readonly grpc::Method<global::GrpcConferenceService.ConferenceStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateConference = new grpc::Method<global::GrpcConferenceService.ConferenceStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateConference",
        __Marshaller_ConferenceStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.UpdateInfo, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateConferenceStartDateTime = new grpc::Method<global::GrpcConferenceService.UpdateInfo, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateConferenceStartDateTime",
        __Marshaller_UpdateInfo,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ConferenceStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateConference = new grpc::Method<global::GrpcConferenceService.ConferenceStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateConference",
        __Marshaller_ConferenceStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteConference = new grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConference",
        __Marshaller_ConferencePK,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Year, global::GrpcConferenceService.ConferenceList> __Method_GetFirstConferenceList = new grpc::Method<global::GrpcConferenceService.Year, global::GrpcConferenceService.ConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFirstConferenceList",
        __Marshaller_Year,
        __Marshaller_ConferenceList);

    static readonly grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.AllConferenceInfoList> __Method_GetAllConferenceInfoByConferenceID = new grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.AllConferenceInfoList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllConferenceInfoByConferenceID",
        __Marshaller_ConferencePK,
        __Marshaller_AllConferenceInfoList);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.ConferenceList> __Method_GetConferenceListByParticipantID = new grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.ConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceListByParticipantID",
        __Marshaller_ParticipantID,
        __Marshaller_ConferenceList);

    static readonly grpc::Method<global::GrpcConferenceService.LunchNames, global::GrpcConferenceService.ConferenceList> __Method_GetLunchList = new grpc::Method<global::GrpcConferenceService.LunchNames, global::GrpcConferenceService.ConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLunchList",
        __Marshaller_LunchNames,
        __Marshaller_ConferenceList);

    static readonly grpc::Method<global::GrpcConferenceService.YearInfo, global::GrpcConferenceService.ResBool> __Method_copyConferenceInfo = new grpc::Method<global::GrpcConferenceService.YearInfo, global::GrpcConferenceService.ResBool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "copyConferenceInfo",
        __Marshaller_YearInfo,
        __Marshaller_ResBool);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.YearList> __Method_getConferenceYear = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.YearList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getConferenceYear",
        __Marshaller_Empty,
        __Marshaller_YearList);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ActivityList> __Method_GetActivityList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ActivityList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivityList",
        __Marshaller_Empty,
        __Marshaller_ActivityList);

    static readonly grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.ActivityList> __Method_GetActivityListByConferenceID = new grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.ActivityList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivityListByConferenceID",
        __Marshaller_ConferencePK,
        __Marshaller_ActivityList);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.ActivityStruct> __Method_GetActivityByID = new grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.ActivityStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivityByID",
        __Marshaller_ActivityID,
        __Marshaller_ActivityStruct);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateActivity = new grpc::Method<global::GrpcConferenceService.ActivityStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateActivity",
        __Marshaller_ActivityStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateActivity = new grpc::Method<global::GrpcConferenceService.ActivityStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateActivity",
        __Marshaller_ActivityStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteActivity = new grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteActivity",
        __Marshaller_ActivityID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityIDs, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateAllActivitySortByActivityIDs = new grpc::Method<global::GrpcConferenceService.ActivityIDs, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAllActivitySortByActivityIDs",
        __Marshaller_ActivityIDs,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.ActivityList> __Method_GetAllActivityListByFirstConfereceID = new grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.ActivityList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllActivityListByFirstConfereceID",
        __Marshaller_ConferencePK,
        __Marshaller_ActivityList);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityDraftInfo, global::GrpcConferenceService.CreateInfoVM> __Method_MoveActivityDraftToActivity = new grpc::Method<global::GrpcConferenceService.ActivityDraftInfo, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveActivityDraftToActivity",
        __Marshaller_ActivityDraftInfo,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ActivityTypeList> __Method_GetActivityTypeList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ActivityTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivityTypeList",
        __Marshaller_Empty,
        __Marshaller_ActivityTypeList);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityTypeID, global::GrpcConferenceService.ActivityTypeStruct> __Method_GetActivityTypeByID = new grpc::Method<global::GrpcConferenceService.ActivityTypeID, global::GrpcConferenceService.ActivityTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivityTypeByID",
        __Marshaller_ActivityTypeID,
        __Marshaller_ActivityTypeStruct);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityTypeStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateActivityType = new grpc::Method<global::GrpcConferenceService.ActivityTypeStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateActivityType",
        __Marshaller_ActivityTypeStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityTypeStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateActivityType = new grpc::Method<global::GrpcConferenceService.ActivityTypeStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateActivityType",
        __Marshaller_ActivityTypeStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityTypeID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteActivityType = new grpc::Method<global::GrpcConferenceService.ActivityTypeID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteActivityType",
        __Marshaller_ActivityTypeID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityCode, global::GrpcConferenceService.ActivityTypeStruct> __Method_GetActivityTypeByActivityCode = new grpc::Method<global::GrpcConferenceService.ActivityCode, global::GrpcConferenceService.ActivityTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivityTypeByActivityCode",
        __Marshaller_ActivityCode,
        __Marshaller_ActivityTypeStruct);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.TalkList> __Method_GetTalkList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.TalkList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTalkList",
        __Marshaller_Empty,
        __Marshaller_TalkList);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.TalkList> __Method_GetTalkListByActivityID = new grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.TalkList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTalkListByActivityID",
        __Marshaller_ActivityID,
        __Marshaller_TalkList);

    static readonly grpc::Method<global::GrpcConferenceService.TalkID, global::GrpcConferenceService.TalkStruct> __Method_GetTalkByID = new grpc::Method<global::GrpcConferenceService.TalkID, global::GrpcConferenceService.TalkStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTalkByID",
        __Marshaller_TalkID,
        __Marshaller_TalkStruct);

    static readonly grpc::Method<global::GrpcConferenceService.TalkStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateTalk = new grpc::Method<global::GrpcConferenceService.TalkStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTalk",
        __Marshaller_TalkStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateTalk = new grpc::Method<global::GrpcConferenceService.TalkStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTalk",
        __Marshaller_TalkStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteTalk = new grpc::Method<global::GrpcConferenceService.TalkID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTalk",
        __Marshaller_TalkID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkIDs, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateAllTalkSortByTalkIDs = new grpc::Method<global::GrpcConferenceService.TalkIDs, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAllTalkSortByTalkIDs",
        __Marshaller_TalkIDs,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.UpdateTalkInfo, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateTopicNameByTalkID = new grpc::Method<global::GrpcConferenceService.UpdateTalkInfo, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTopicNameByTalkID",
        __Marshaller_UpdateTalkInfo,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Info, global::GrpcConferenceService.IsUse> __Method_IsTalkUse = new grpc::Method<global::GrpcConferenceService.Info, global::GrpcConferenceService.IsUse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsTalkUse",
        __Marshaller_Info,
        __Marshaller_IsUse);

    static readonly grpc::Method<global::GrpcConferenceService.TalkDraftInfo, global::GrpcConferenceService.CreateInfoVM> __Method_MoveTalkDraftToTalk = new grpc::Method<global::GrpcConferenceService.TalkDraftInfo, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveTalkDraftToTalk",
        __Marshaller_TalkDraftInfo,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.TalkTypeList> __Method_GetTalkTypeList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.TalkTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTalkTypeList",
        __Marshaller_Empty,
        __Marshaller_TalkTypeList);

    static readonly grpc::Method<global::GrpcConferenceService.TalkTypeID, global::GrpcConferenceService.TalkTypeStruct> __Method_GetTalkTypeByID = new grpc::Method<global::GrpcConferenceService.TalkTypeID, global::GrpcConferenceService.TalkTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTalkTypeByID",
        __Marshaller_TalkTypeID,
        __Marshaller_TalkTypeStruct);

    static readonly grpc::Method<global::GrpcConferenceService.TalkTypeStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateTalkType = new grpc::Method<global::GrpcConferenceService.TalkTypeStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTalkType",
        __Marshaller_TalkTypeStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkTypeStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateTalkType = new grpc::Method<global::GrpcConferenceService.TalkTypeStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTalkType",
        __Marshaller_TalkTypeStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkTypeID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteTalkType = new grpc::Method<global::GrpcConferenceService.TalkTypeID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTalkType",
        __Marshaller_TalkTypeID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.OrganizerLevelList> __Method_GetOrganizerLevelListByConferenceID = new grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.OrganizerLevelList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganizerLevelListByConferenceID",
        __Marshaller_ConferencePK,
        __Marshaller_OrganizerLevelList);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.OrganizerLevelList> __Method_GetOrganizerLevelList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.OrganizerLevelList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganizerLevelList",
        __Marshaller_Empty,
        __Marshaller_OrganizerLevelList);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerLevelID, global::GrpcConferenceService.OrganizerLevelStruct> __Method_GetOrganizerLevelByID = new grpc::Method<global::GrpcConferenceService.OrganizerLevelID, global::GrpcConferenceService.OrganizerLevelStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganizerLevelByID",
        __Marshaller_OrganizerLevelID,
        __Marshaller_OrganizerLevelStruct);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerLevelStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateOrganizerLevel = new grpc::Method<global::GrpcConferenceService.OrganizerLevelStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOrganizerLevel",
        __Marshaller_OrganizerLevelStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerLevelStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateOrganizerLevel = new grpc::Method<global::GrpcConferenceService.OrganizerLevelStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOrganizerLevel",
        __Marshaller_OrganizerLevelStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerLevelID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteOrganizerLevel = new grpc::Method<global::GrpcConferenceService.OrganizerLevelID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganizerLevel",
        __Marshaller_OrganizerLevelID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerLevelID, global::GrpcConferenceService.OrganizerList> __Method_GetOrganizerListByOrganizerLevelID = new grpc::Method<global::GrpcConferenceService.OrganizerLevelID, global::GrpcConferenceService.OrganizerList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganizerListByOrganizerLevelID",
        __Marshaller_OrganizerLevelID,
        __Marshaller_OrganizerList);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.OrganizerList> __Method_GetOrganizerList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.OrganizerList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganizerList",
        __Marshaller_Empty,
        __Marshaller_OrganizerList);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerID, global::GrpcConferenceService.OrganizerStruct> __Method_GetOrganizerByID = new grpc::Method<global::GrpcConferenceService.OrganizerID, global::GrpcConferenceService.OrganizerStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganizerByID",
        __Marshaller_OrganizerID,
        __Marshaller_OrganizerStruct);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateOrganizer = new grpc::Method<global::GrpcConferenceService.OrganizerStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOrganizer",
        __Marshaller_OrganizerStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateOrganizer = new grpc::Method<global::GrpcConferenceService.OrganizerStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOrganizer",
        __Marshaller_OrganizerStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.OrganizerID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteOrganizer = new grpc::Method<global::GrpcConferenceService.OrganizerID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganizer",
        __Marshaller_OrganizerID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.PresenterList> __Method_GetPresenterListByConferenceID = new grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.PresenterList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPresenterListByConferenceID",
        __Marshaller_ConferencePK,
        __Marshaller_PresenterList);

    static readonly grpc::Method<global::GrpcConferenceService.PresenterID, global::GrpcConferenceService.PresenterStruct> __Method_GetPresenterByID = new grpc::Method<global::GrpcConferenceService.PresenterID, global::GrpcConferenceService.PresenterStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPresenterByID",
        __Marshaller_PresenterID,
        __Marshaller_PresenterStruct);

    static readonly grpc::Method<global::GrpcConferenceService.PresenterStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreatePresenter = new grpc::Method<global::GrpcConferenceService.PresenterStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePresenter",
        __Marshaller_PresenterStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PresenterStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdatePresenter = new grpc::Method<global::GrpcConferenceService.PresenterStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePresenter",
        __Marshaller_PresenterStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PresenterID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeletePresenter = new grpc::Method<global::GrpcConferenceService.PresenterID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePresenter",
        __Marshaller_PresenterID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.PresenterList> __Method_GetAllPresenterList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.PresenterList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllPresenterList",
        __Marshaller_Empty,
        __Marshaller_PresenterList);

    static readonly grpc::Method<global::GrpcConferenceService.TalkID, global::GrpcConferenceService.ParticipantInfoList> __Method_GetParticipantListByTalkID = new grpc::Method<global::GrpcConferenceService.TalkID, global::GrpcConferenceService.ParticipantInfoList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantListByTalkID",
        __Marshaller_TalkID,
        __Marshaller_ParticipantInfoList);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.ParticipantStruct> __Method_GetParticipantByID = new grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.ParticipantStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantByID",
        __Marshaller_ParticipantID,
        __Marshaller_ParticipantStruct);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.ParticipantInfoList> __Method_GetParticipantListByActivityID = new grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.ParticipantInfoList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantListByActivityID",
        __Marshaller_ActivityID,
        __Marshaller_ParticipantInfoList);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateParticipant = new grpc::Method<global::GrpcConferenceService.ParticipantStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateParticipant",
        __Marshaller_ParticipantStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateParticipant = new grpc::Method<global::GrpcConferenceService.ParticipantStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParticipant",
        __Marshaller_ParticipantStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteParticipant = new grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteParticipant",
        __Marshaller_ParticipantID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantGroupID, global::GrpcConferenceService.ParticipantList> __Method_GetParticipantByGroupID = new grpc::Method<global::GrpcConferenceService.ParticipantGroupID, global::GrpcConferenceService.ParticipantList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantByGroupID",
        __Marshaller_ParticipantGroupID,
        __Marshaller_ParticipantList);

    static readonly grpc::Method<global::GrpcConferenceService.PerContractNumberID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteParticioantByPerContractNumber = new grpc::Method<global::GrpcConferenceService.PerContractNumberID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteParticioantByPerContractNumber",
        __Marshaller_PerContractNumberID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.ParticipantList> __Method_GetALLParticipantBySearch = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.ParticipantList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetALLParticipantBySearch",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ParticipantList);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.ParticipantList> __Method_GetParticipantListByName = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.ParticipantList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantListByName",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ParticipantList);

    static readonly grpc::Method<global::GrpcConferenceService.PersonContractID, global::GrpcConferenceService.ParticipantIDList> __Method_GetParticipantIDByPersonContractID = new grpc::Method<global::GrpcConferenceService.PersonContractID, global::GrpcConferenceService.ParticipantIDList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantIDByPersonContractID",
        __Marshaller_PersonContractID,
        __Marshaller_ParticipantIDList);

    static readonly grpc::Method<global::GrpcConferenceService.CompanyId, global::GrpcConferenceService.ParticipantList> __Method_GetParticipantListByCompanyID = new grpc::Method<global::GrpcConferenceService.CompanyId, global::GrpcConferenceService.ParticipantList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantListByCompanyID",
        __Marshaller_CompanyId,
        __Marshaller_ParticipantList);

    static readonly grpc::Method<global::GrpcConferenceService.MemberPK, global::GrpcConferenceService.ParticipantList> __Method_GetParticipantListByMemberPK = new grpc::Method<global::GrpcConferenceService.MemberPK, global::GrpcConferenceService.ParticipantList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantListByMemberPK",
        __Marshaller_MemberPK,
        __Marshaller_ParticipantList);

    static readonly grpc::Method<global::GrpcConferenceService.PInfo, global::GrpcConferenceService.ParticipantList> __Method_GetParticipantListByMemberPKandIsShowOnFont = new grpc::Method<global::GrpcConferenceService.PInfo, global::GrpcConferenceService.ParticipantList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantListByMemberPKandIsShowOnFont",
        __Marshaller_PInfo,
        __Marshaller_ParticipantList);

    static readonly grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.ParticipantList> __Method_GetParticipantListByConferenceID = new grpc::Method<global::GrpcConferenceService.ConferencePK, global::GrpcConferenceService.ParticipantList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantListByConferenceID",
        __Marshaller_ConferencePK,
        __Marshaller_ParticipantList);

    static readonly grpc::Method<global::GrpcConferenceService.PagingInfo, global::GrpcConferenceService.ParticipantList> __Method_GetParticipantNotNullListByConferenceID = new grpc::Method<global::GrpcConferenceService.PagingInfo, global::GrpcConferenceService.ParticipantList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantNotNullListByConferenceID",
        __Marshaller_PagingInfo,
        __Marshaller_ParticipantList);

    static readonly grpc::Method<global::GrpcConferenceService.TalkParticipantMapInfo, global::GrpcConferenceService.CreateInfoVM> __Method_CreateTPMap = new grpc::Method<global::GrpcConferenceService.TalkParticipantMapInfo, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTPMap",
        __Marshaller_TalkParticipantMapInfo,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteTPMapByTalkID = new grpc::Method<global::GrpcConferenceService.TalkID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTPMapByTalkID",
        __Marshaller_TalkID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteTPMapByParticipantID = new grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTPMapByParticipantID",
        __Marshaller_ParticipantID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkParticipantMapInfo, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateTPMap = new grpc::Method<global::GrpcConferenceService.TalkParticipantMapInfo, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTPMap",
        __Marshaller_TalkParticipantMapInfo,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityParticipantMapInfo, global::GrpcConferenceService.CreateInfoVM> __Method_CreateAPMap = new grpc::Method<global::GrpcConferenceService.ActivityParticipantMapInfo, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAPMap",
        __Marshaller_ActivityParticipantMapInfo,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteAPMapByActivityID = new grpc::Method<global::GrpcConferenceService.ActivityID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAPMapByActivityID",
        __Marshaller_ActivityID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteAPMapByParticipantID = new grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAPMapByParticipantID",
        __Marshaller_ParticipantID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityParticipantMapInfo, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateAPMap = new grpc::Method<global::GrpcConferenceService.ActivityParticipantMapInfo, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAPMap",
        __Marshaller_ActivityParticipantMapInfo,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ParticipantGroupList> __Method_GetParticipantGroupList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ParticipantGroupList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantGroupList",
        __Marshaller_Empty,
        __Marshaller_ParticipantGroupList);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantGroupID, global::GrpcConferenceService.ParticipantGroupStruct> __Method_GetParticipantGroupByID = new grpc::Method<global::GrpcConferenceService.ParticipantGroupID, global::GrpcConferenceService.ParticipantGroupStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantGroupByID",
        __Marshaller_ParticipantGroupID,
        __Marshaller_ParticipantGroupStruct);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantGroupInfo, global::GrpcConferenceService.CreateInfoVM> __Method_CreateParticipantGroups = new grpc::Method<global::GrpcConferenceService.ParticipantGroupInfo, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateParticipantGroups",
        __Marshaller_ParticipantGroupInfo,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantGroupInfo, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateParticipantGroups = new grpc::Method<global::GrpcConferenceService.ParticipantGroupInfo, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParticipantGroups",
        __Marshaller_ParticipantGroupInfo,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantGroupID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteParticipantGroup = new grpc::Method<global::GrpcConferenceService.ParticipantGroupID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteParticipantGroup",
        __Marshaller_ParticipantGroupID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.ParticipantGroupList> __Method_GetParticipantGroupByParticipantID = new grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.ParticipantGroupList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantGroupByParticipantID",
        __Marshaller_ParticipantID,
        __Marshaller_ParticipantGroupList);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantGroupStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateParticipantGroup = new grpc::Method<global::GrpcConferenceService.ParticipantGroupStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateParticipantGroup",
        __Marshaller_ParticipantGroupStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantGroupStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateParticipantGroup = new grpc::Method<global::GrpcConferenceService.ParticipantGroupStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParticipantGroup",
        __Marshaller_ParticipantGroupStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantIDs, global::GrpcConferenceService.CreateInfoVM> __Method_CreateParticipantGroupMap = new grpc::Method<global::GrpcConferenceService.ParticipantIDs, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateParticipantGroupMap",
        __Marshaller_ParticipantIDs,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteParticipantGroupMapByParticipanID = new grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteParticipantGroupMapByParticipanID",
        __Marshaller_ParticipantID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantGroupID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteParticipantGroupMapByParticipantGroupID = new grpc::Method<global::GrpcConferenceService.ParticipantGroupID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteParticipantGroupMapByParticipantGroupID",
        __Marshaller_ParticipantGroupID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ParticipantTypeList> __Method_GetParticipantTypeList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ParticipantTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantTypeList",
        __Marshaller_Empty,
        __Marshaller_ParticipantTypeList);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantTypeID, global::GrpcConferenceService.ParticipantTypeStruct> __Method_GetParticipantTypeByID = new grpc::Method<global::GrpcConferenceService.ParticipantTypeID, global::GrpcConferenceService.ParticipantTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantTypeByID",
        __Marshaller_ParticipantTypeID,
        __Marshaller_ParticipantTypeStruct);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantTypeStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateParticipantType = new grpc::Method<global::GrpcConferenceService.ParticipantTypeStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateParticipantType",
        __Marshaller_ParticipantTypeStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantTypeStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateParticipantType = new grpc::Method<global::GrpcConferenceService.ParticipantTypeStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParticipantType",
        __Marshaller_ParticipantTypeStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantTypeID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteParticipantType = new grpc::Method<global::GrpcConferenceService.ParticipantTypeID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteParticipantType",
        __Marshaller_ParticipantTypeID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantTypeMapInfo, global::GrpcConferenceService.CreateInfoVM> __Method_CreateParticipantTypeMap = new grpc::Method<global::GrpcConferenceService.ParticipantTypeMapInfo, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateParticipantTypeMap",
        __Marshaller_ParticipantTypeMapInfo,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteParticipantTypeMapByParticipantID = new grpc::Method<global::GrpcConferenceService.ParticipantID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteParticipantTypeMapByParticipantID",
        __Marshaller_ParticipantID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantTypeMapInfo, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateParticipantTypeMap = new grpc::Method<global::GrpcConferenceService.ParticipantTypeMapInfo, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParticipantTypeMap",
        __Marshaller_ParticipantTypeMapInfo,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ActivityDraftList> __Method_GetActivityDraftList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ActivityDraftList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivityDraftList",
        __Marshaller_Empty,
        __Marshaller_ActivityDraftList);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityDraftID, global::GrpcConferenceService.ActivityDraftStruct> __Method_GetActivityDraftByID = new grpc::Method<global::GrpcConferenceService.ActivityDraftID, global::GrpcConferenceService.ActivityDraftStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivityDraftByID",
        __Marshaller_ActivityDraftID,
        __Marshaller_ActivityDraftStruct);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityDraftStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateActivityDraft = new grpc::Method<global::GrpcConferenceService.ActivityDraftStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateActivityDraft",
        __Marshaller_ActivityDraftStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityDraftStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateActivityDraft = new grpc::Method<global::GrpcConferenceService.ActivityDraftStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateActivityDraft",
        __Marshaller_ActivityDraftStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityDraftID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteActivityDraft = new grpc::Method<global::GrpcConferenceService.ActivityDraftID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteActivityDraft",
        __Marshaller_ActivityDraftID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ActivityStruct, global::GrpcConferenceService.CreateInfoVM> __Method_MoveActivityToActivityDraft = new grpc::Method<global::GrpcConferenceService.ActivityStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveActivityToActivityDraft",
        __Marshaller_ActivityStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.TalkDraftList> __Method_GetTalkDraftList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.TalkDraftList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTalkDraftList",
        __Marshaller_Empty,
        __Marshaller_TalkDraftList);

    static readonly grpc::Method<global::GrpcConferenceService.TalkDraftID, global::GrpcConferenceService.TalkDraftStruct> __Method_GetTalkDraftByID = new grpc::Method<global::GrpcConferenceService.TalkDraftID, global::GrpcConferenceService.TalkDraftStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTalkDraftByID",
        __Marshaller_TalkDraftID,
        __Marshaller_TalkDraftStruct);

    static readonly grpc::Method<global::GrpcConferenceService.TalkDraftStruct, global::GrpcConferenceService.CreateInfoVM> __Method_CreateTalkDraft = new grpc::Method<global::GrpcConferenceService.TalkDraftStruct, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTalkDraft",
        __Marshaller_TalkDraftStruct,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkDraftStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateTalkDraft = new grpc::Method<global::GrpcConferenceService.TalkDraftStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTalkDraft",
        __Marshaller_TalkDraftStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.TalkDraftID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteTalkDraft = new grpc::Method<global::GrpcConferenceService.TalkDraftID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTalkDraft",
        __Marshaller_TalkDraftID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.MoveInfo, global::GrpcConferenceService.CreateInfoVM> __Method_MoveTalkToTalkDraft = new grpc::Method<global::GrpcConferenceService.MoveInfo, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveTalkToTalkDraft",
        __Marshaller_MoveInfo,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ReceptionList> __Method_GetReceptionList = new grpc::Method<global::GrpcConferenceService.Empty, global::GrpcConferenceService.ReceptionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReceptionList",
        __Marshaller_Empty,
        __Marshaller_ReceptionList);

    static readonly grpc::Method<global::GrpcConferenceService.ReceptionList, global::GrpcConferenceService.CreateInfoVM> __Method_CreateReception = new grpc::Method<global::GrpcConferenceService.ReceptionList, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateReception",
        __Marshaller_ReceptionList,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ReceptionStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateReception = new grpc::Method<global::GrpcConferenceService.ReceptionStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateReception",
        __Marshaller_ReceptionStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ReceptionID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteReception = new grpc::Method<global::GrpcConferenceService.ReceptionID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteReception",
        __Marshaller_ReceptionID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.PolicyList> __Method_GetPolicyList = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.PolicyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPolicyList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_PolicyList);

    static readonly grpc::Method<global::GrpcConferenceService.PolicyID, global::GrpcConferenceService.PolicyStruct> __Method_GetPolicyByID = new grpc::Method<global::GrpcConferenceService.PolicyID, global::GrpcConferenceService.PolicyStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPolicyByID",
        __Marshaller_PolicyID,
        __Marshaller_PolicyStruct);

    static readonly grpc::Method<global::GrpcConferenceService.CreatePolicyInfo, global::GrpcConferenceService.CreateInfoVM> __Method_CreatePolicy = new grpc::Method<global::GrpcConferenceService.CreatePolicyInfo, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePolicy",
        __Marshaller_CreatePolicyInfo,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PolicyStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdatePolicy = new grpc::Method<global::GrpcConferenceService.PolicyStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePolicy",
        __Marshaller_PolicyStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.DeleteInfo, global::GrpcConferenceService.DeleteInfoVM> __Method_DeletePolicy = new grpc::Method<global::GrpcConferenceService.DeleteInfo, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePolicy",
        __Marshaller_DeleteInfo,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.UserName, global::GrpcConferenceService.PolicyList> __Method_GetPolicyListByUserName = new grpc::Method<global::GrpcConferenceService.UserName, global::GrpcConferenceService.PolicyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPolicyListByUserName",
        __Marshaller_UserName,
        __Marshaller_PolicyList);

    static readonly grpc::Method<global::GrpcConferenceService.CreatePolicyInfo, global::GrpcConferenceService.PolicyInfoStruct> __Method_getPolicyInfo = new grpc::Method<global::GrpcConferenceService.CreatePolicyInfo, global::GrpcConferenceService.PolicyInfoStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getPolicyInfo",
        __Marshaller_CreatePolicyInfo,
        __Marshaller_PolicyInfoStruct);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.ParticipantConferenceMapList> __Method_GetParticipantConferenceMapList = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.ParticipantConferenceMapList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantConferenceMapList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ParticipantConferenceMapList);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantConferenceMapID, global::GrpcConferenceService.ParticipantConferenceMapStruct> __Method_GetParticipantConferenceMapByID = new grpc::Method<global::GrpcConferenceService.ParticipantConferenceMapID, global::GrpcConferenceService.ParticipantConferenceMapStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantConferenceMapByID",
        __Marshaller_ParticipantConferenceMapID,
        __Marshaller_ParticipantConferenceMapStruct);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantConferenceMapList, global::GrpcConferenceService.CreateInfoVM> __Method_CreateParticipantConferenceMap = new grpc::Method<global::GrpcConferenceService.ParticipantConferenceMapList, global::GrpcConferenceService.CreateInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateParticipantConferenceMap",
        __Marshaller_ParticipantConferenceMapList,
        __Marshaller_CreateInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantConferenceMapStruct, global::GrpcConferenceService.ModifiedInfoVM> __Method_UpdateParticipantConferenceMap = new grpc::Method<global::GrpcConferenceService.ParticipantConferenceMapStruct, global::GrpcConferenceService.ModifiedInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParticipantConferenceMap",
        __Marshaller_ParticipantConferenceMapStruct,
        __Marshaller_ModifiedInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.ParticipantConferenceMapID, global::GrpcConferenceService.DeleteInfoVM> __Method_DeleteParticipantConferenceMap = new grpc::Method<global::GrpcConferenceService.ParticipantConferenceMapID, global::GrpcConferenceService.DeleteInfoVM>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteParticipantConferenceMap",
        __Marshaller_ParticipantConferenceMapID,
        __Marshaller_DeleteInfoVM);

    static readonly grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.HistoryPolicyList> __Method_getHistoryPolicyList = new grpc::Method<global::GrpcConferenceService.PaginationRequestSearch, global::GrpcConferenceService.HistoryPolicyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHistoryPolicyList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_HistoryPolicyList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcConferenceService.GrpcConferenceServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ConferenceServiceToGrpc</summary>
    public abstract partial class ConferenceServiceToGrpcBase
    {
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFRoomList> GetCFRoomList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取单条数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFRoomStruct> GetCFRoomByID(global::GrpcConferenceService.roomPK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateFRoom(global::GrpcConferenceService.CFRoomStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFRoom(global::GrpcConferenceService.CFRoomStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteCFRoom(global::GrpcConferenceService.roomPK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFSeatList> GetCFSeatList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFSeatStruct> GetCFSeatByID(global::GrpcConferenceService.CFSeatPK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateCFSeat(global::GrpcConferenceService.CFSeatStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFSeat(global::GrpcConferenceService.CFSeatStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteCFSeat(global::GrpcConferenceService.CFSeatPK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFAddressList> GetCFAddressList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFAddressList> GetAllCFAddressList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFAddressStruct> GetCFAddressByID(global::GrpcConferenceService.CFAddressPK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateCFAddress(global::GrpcConferenceService.CFAddressStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFAddress(global::GrpcConferenceService.CFAddressStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteCFAddress(global::GrpcConferenceService.CFAddressPK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有数据包括分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFRoomTypeList> GetCFRoomTypeList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CFRoomTypeStruct> GetCFRoomTypeByID(global::GrpcConferenceService.CFRoomTypePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateCFRoomType(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFRoomType(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteCFRoomType(global::GrpcConferenceService.CFRoomTypePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取conference所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ConferenceList> GetConferenceList(global::GrpcConferenceService.Year request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ConferenceStruct> GetConferenceByPK(global::GrpcConferenceService.ConferencePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据parentid获取所有数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ConferenceList> GetConferenceListByParentID(global::GrpcConferenceService.ParentID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateConference(global::GrpcConferenceService.ConferenceStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id修改开始时间
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateConferenceStartDateTime(global::GrpcConferenceService.UpdateInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateConference(global::GrpcConferenceService.ConferenceStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteConference(global::GrpcConferenceService.ConferencePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取一级会议列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ConferenceList> GetFirstConferenceList(global::GrpcConferenceService.Year request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有会议下的所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.AllConferenceInfoList> GetAllConferenceInfoByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据嘉宾id获取conferenceList
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ConferenceList> GetConferenceListByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///模糊搜索获取午餐，晚宴list
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ConferenceList> GetLunchList(global::GrpcConferenceService.LunchNames request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///复制旧数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ResBool> copyConferenceInfo(global::GrpcConferenceService.YearInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取conference表存在的会议年份
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.YearList> getConferenceYear(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityList> GetActivityList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityList> GetActivityListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityStruct> GetActivityByID(global::GrpcConferenceService.ActivityID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateActivity(global::GrpcConferenceService.ActivityStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivity(global::GrpcConferenceService.ActivityStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteActivity(global::GrpcConferenceService.ActivityID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateAllActivitySortByActivityIDs(global::GrpcConferenceService.ActivityIDs request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据一级会议id获取该一级会议下的所有activity
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityList> GetAllActivityListByFirstConfereceID(global::GrpcConferenceService.ConferencePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///草稿activity移至正式
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> MoveActivityDraftToActivity(global::GrpcConferenceService.ActivityDraftInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityTypeList> GetActivityTypeList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityTypeStruct> GetActivityTypeByID(global::GrpcConferenceService.ActivityTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateActivityType(global::GrpcConferenceService.ActivityTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivityType(global::GrpcConferenceService.ActivityTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteActivityType(global::GrpcConferenceService.ActivityTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据code获取单条数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityTypeStruct> GetActivityTypeByActivityCode(global::GrpcConferenceService.ActivityCode request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.TalkList> GetTalkList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.TalkList> GetTalkListByActivityID(global::GrpcConferenceService.ActivityID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.TalkStruct> GetTalkByID(global::GrpcConferenceService.TalkID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateTalk(global::GrpcConferenceService.TalkStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalk(global::GrpcConferenceService.TalkStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteTalk(global::GrpcConferenceService.TalkID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateAllTalkSortByTalkIDs(global::GrpcConferenceService.TalkIDs request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据talkid修改topicname
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateTopicNameByTalkID(global::GrpcConferenceService.UpdateTalkInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///topic是否在talk中存在引用
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.IsUse> IsTalkUse(global::GrpcConferenceService.Info request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///草稿talk移至正式
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> MoveTalkDraftToTalk(global::GrpcConferenceService.TalkDraftInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.TalkTypeList> GetTalkTypeList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.TalkTypeStruct> GetTalkTypeByID(global::GrpcConferenceService.TalkTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateTalkType(global::GrpcConferenceService.TalkTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalkType(global::GrpcConferenceService.TalkTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteTalkType(global::GrpcConferenceService.TalkTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.OrganizerLevelList> GetOrganizerLevelListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.OrganizerLevelList> GetOrganizerLevelList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.OrganizerLevelStruct> GetOrganizerLevelByID(global::GrpcConferenceService.OrganizerLevelID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateOrganizerLevel(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateOrganizerLevel(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteOrganizerLevel(global::GrpcConferenceService.OrganizerLevelID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据类型id获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.OrganizerList> GetOrganizerListByOrganizerLevelID(global::GrpcConferenceService.OrganizerLevelID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.OrganizerList> GetOrganizerList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.OrganizerStruct> GetOrganizerByID(global::GrpcConferenceService.OrganizerID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateOrganizer(global::GrpcConferenceService.OrganizerStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateOrganizer(global::GrpcConferenceService.OrganizerStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteOrganizer(global::GrpcConferenceService.OrganizerID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.PresenterList> GetPresenterListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.PresenterStruct> GetPresenterByID(global::GrpcConferenceService.PresenterID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreatePresenter(global::GrpcConferenceService.PresenterStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdatePresenter(global::GrpcConferenceService.PresenterStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeletePresenter(global::GrpcConferenceService.PresenterID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.PresenterList> GetAllPresenterList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据talkid获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantInfoList> GetParticipantListByTalkID(global::GrpcConferenceService.TalkID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantStruct> GetParticipantByID(global::GrpcConferenceService.ParticipantID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantInfoList> GetParticipantListByActivityID(global::GrpcConferenceService.ActivityID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateParticipant(global::GrpcConferenceService.ParticipantStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipant(global::GrpcConferenceService.ParticipantStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipant(global::GrpcConferenceService.ParticipantID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据分组id获取参与者信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantList> GetParticipantByGroupID(global::GrpcConferenceService.ParticipantGroupID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据合同号删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteParticioantByPerContractNumber(global::GrpcConferenceService.PerContractNumberID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据搜索条件获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantList> GetALLParticipantBySearch(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据姓名搜索
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantList> GetParticipantListByName(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据合同id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantIDList> GetParticipantIDByPersonContractID(global::GrpcConferenceService.PersonContractID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据conpanyid获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantList> GetParticipantListByCompanyID(global::GrpcConferenceService.CompanyId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据memberpk获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantList> GetParticipantListByMemberPK(global::GrpcConferenceService.MemberPK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据memberpk和ShowOnFont获取信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantList> GetParticipantListByMemberPKandIsShowOnFont(global::GrpcConferenceService.PInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据conferenceid获取所有嘉宾
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantList> GetParticipantListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据conferenceid获取所有percontarctnumber不为空的数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantList> GetParticipantNotNullListByConferenceID(global::GrpcConferenceService.PagingInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateTPMap(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据talkid删除映射关系
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteTPMapByTalkID(global::GrpcConferenceService.TalkID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteTPMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据talkid修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateTPMap(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateAPMap(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据activityid删除映射
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteAPMapByActivityID(global::GrpcConferenceService.ActivityID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteAPMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据activitydi修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateAPMap(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantGroupList> GetParticipantGroupList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantGroupStruct> GetParticipantGroupByID(global::GrpcConferenceService.ParticipantGroupID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///批量创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroups(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///批量编辑信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantGroups(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroup(global::GrpcConferenceService.ParticipantGroupID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据参与人id获取分组信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantGroupList> GetParticipantGroupByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroup(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantGroup(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroupMap(global::GrpcConferenceService.ParticipantIDs request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据参与者id删除映射关系
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroupMapByParticipanID(global::GrpcConferenceService.ParticipantID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据分组id删除映射关系
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroupMapByParticipantGroupID(global::GrpcConferenceService.ParticipantGroupID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantTypeList> GetParticipantTypeList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantTypeStruct> GetParticipantTypeByID(global::GrpcConferenceService.ParticipantTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateParticipantType(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantType(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantType(global::GrpcConferenceService.ParticipantTypeID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateParticipantTypeMap(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据ParticipantID删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantTypeMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据ParticipantID修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantTypeMap(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityDraftList> GetActivityDraftList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ActivityDraftStruct> GetActivityDraftByID(global::GrpcConferenceService.ActivityDraftID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateActivityDraft(global::GrpcConferenceService.ActivityDraftStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivityDraft(global::GrpcConferenceService.ActivityDraftStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteActivityDraft(global::GrpcConferenceService.ActivityDraftID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///正式activity移至草稿
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> MoveActivityToActivityDraft(global::GrpcConferenceService.ActivityStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.TalkDraftList> GetTalkDraftList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.TalkDraftStruct> GetTalkDraftByID(global::GrpcConferenceService.TalkDraftID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateTalkDraft(global::GrpcConferenceService.TalkDraftStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalkDraft(global::GrpcConferenceService.TalkDraftStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteTalkDraft(global::GrpcConferenceService.TalkDraftID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///正式talk移至草稿
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> MoveTalkToTalkDraft(global::GrpcConferenceService.MoveInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ReceptionList> GetReceptionList(global::GrpcConferenceService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateReception(global::GrpcConferenceService.ReceptionList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateReception(global::GrpcConferenceService.ReceptionStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteReception(global::GrpcConferenceService.ReceptionID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.PolicyList> GetPolicyList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.PolicyStruct> GetPolicyByID(global::GrpcConferenceService.PolicyID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreatePolicy(global::GrpcConferenceService.CreatePolicyInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdatePolicy(global::GrpcConferenceService.PolicyStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeletePolicy(global::GrpcConferenceService.DeleteInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据业务员获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.PolicyList> GetPolicyListByUserName(global::GrpcConferenceService.UserName request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取剩余保单数
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.PolicyInfoStruct> getPolicyInfo(global::GrpcConferenceService.CreatePolicyInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantConferenceMapList> GetParticipantConferenceMapList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ParticipantConferenceMapStruct> GetParticipantConferenceMapByID(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.CreateInfoVM> CreateParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceService.HistoryPolicyList> getHistoryPolicyList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ConferenceServiceToGrpc</summary>
    public partial class ConferenceServiceToGrpcClient : grpc::ClientBase<ConferenceServiceToGrpcClient>
    {
      /// <summary>Creates a new client for ConferenceServiceToGrpc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ConferenceServiceToGrpcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ConferenceServiceToGrpc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ConferenceServiceToGrpcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConferenceServiceToGrpcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ConferenceServiceToGrpcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFRoomList GetCFRoomList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFRoomList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFRoomList GetCFRoomList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCFRoomList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFRoomList> GetCFRoomListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFRoomListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFRoomList> GetCFRoomListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCFRoomList, null, options, request);
      }
      /// <summary>
      ///获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFRoomStruct GetCFRoomByID(global::GrpcConferenceService.roomPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFRoomByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFRoomStruct GetCFRoomByID(global::GrpcConferenceService.roomPK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCFRoomByID, null, options, request);
      }
      /// <summary>
      ///获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFRoomStruct> GetCFRoomByIDAsync(global::GrpcConferenceService.roomPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFRoomByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFRoomStruct> GetCFRoomByIDAsync(global::GrpcConferenceService.roomPK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCFRoomByID, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateFRoom(global::GrpcConferenceService.CFRoomStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateFRoom(global::GrpcConferenceService.CFRoomStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateFRoom, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateFRoomAsync(global::GrpcConferenceService.CFRoomStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateFRoomAsync(global::GrpcConferenceService.CFRoomStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateFRoom, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateCFRoom(global::GrpcConferenceService.CFRoomStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCFRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateCFRoom(global::GrpcConferenceService.CFRoomStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCFRoom, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFRoomAsync(global::GrpcConferenceService.CFRoomStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCFRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFRoomAsync(global::GrpcConferenceService.CFRoomStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCFRoom, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteCFRoom(global::GrpcConferenceService.roomPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCFRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteCFRoom(global::GrpcConferenceService.roomPK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCFRoom, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteCFRoomAsync(global::GrpcConferenceService.roomPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCFRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteCFRoomAsync(global::GrpcConferenceService.roomPK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCFRoom, null, options, request);
      }
      /// <summary>
      ///获取所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFSeatList GetCFSeatList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFSeatList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFSeatList GetCFSeatList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCFSeatList, null, options, request);
      }
      /// <summary>
      ///获取所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFSeatList> GetCFSeatListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFSeatListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFSeatList> GetCFSeatListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCFSeatList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFSeatStruct GetCFSeatByID(global::GrpcConferenceService.CFSeatPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFSeatByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFSeatStruct GetCFSeatByID(global::GrpcConferenceService.CFSeatPK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCFSeatByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFSeatStruct> GetCFSeatByIDAsync(global::GrpcConferenceService.CFSeatPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFSeatByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFSeatStruct> GetCFSeatByIDAsync(global::GrpcConferenceService.CFSeatPK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCFSeatByID, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateCFSeat(global::GrpcConferenceService.CFSeatStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCFSeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateCFSeat(global::GrpcConferenceService.CFSeatStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCFSeat, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateCFSeatAsync(global::GrpcConferenceService.CFSeatStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCFSeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateCFSeatAsync(global::GrpcConferenceService.CFSeatStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCFSeat, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateCFSeat(global::GrpcConferenceService.CFSeatStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCFSeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateCFSeat(global::GrpcConferenceService.CFSeatStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCFSeat, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFSeatAsync(global::GrpcConferenceService.CFSeatStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCFSeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFSeatAsync(global::GrpcConferenceService.CFSeatStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCFSeat, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteCFSeat(global::GrpcConferenceService.CFSeatPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCFSeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteCFSeat(global::GrpcConferenceService.CFSeatPK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCFSeat, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteCFSeatAsync(global::GrpcConferenceService.CFSeatPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCFSeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteCFSeatAsync(global::GrpcConferenceService.CFSeatPK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCFSeat, null, options, request);
      }
      /// <summary>
      ///获取所有信息分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFAddressList GetCFAddressList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFAddressList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFAddressList GetCFAddressList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCFAddressList, null, options, request);
      }
      /// <summary>
      ///获取所有信息分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFAddressList> GetCFAddressListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFAddressListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFAddressList> GetCFAddressListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCFAddressList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFAddressList GetAllCFAddressList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllCFAddressList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFAddressList GetAllCFAddressList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllCFAddressList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFAddressList> GetAllCFAddressListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllCFAddressListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFAddressList> GetAllCFAddressListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllCFAddressList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFAddressStruct GetCFAddressByID(global::GrpcConferenceService.CFAddressPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFAddressByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFAddressStruct GetCFAddressByID(global::GrpcConferenceService.CFAddressPK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCFAddressByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFAddressStruct> GetCFAddressByIDAsync(global::GrpcConferenceService.CFAddressPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFAddressByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFAddressStruct> GetCFAddressByIDAsync(global::GrpcConferenceService.CFAddressPK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCFAddressByID, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateCFAddress(global::GrpcConferenceService.CFAddressStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCFAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateCFAddress(global::GrpcConferenceService.CFAddressStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCFAddress, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateCFAddressAsync(global::GrpcConferenceService.CFAddressStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCFAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateCFAddressAsync(global::GrpcConferenceService.CFAddressStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCFAddress, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateCFAddress(global::GrpcConferenceService.CFAddressStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCFAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateCFAddress(global::GrpcConferenceService.CFAddressStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCFAddress, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFAddressAsync(global::GrpcConferenceService.CFAddressStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCFAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFAddressAsync(global::GrpcConferenceService.CFAddressStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCFAddress, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteCFAddress(global::GrpcConferenceService.CFAddressPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCFAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteCFAddress(global::GrpcConferenceService.CFAddressPK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCFAddress, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteCFAddressAsync(global::GrpcConferenceService.CFAddressPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCFAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteCFAddressAsync(global::GrpcConferenceService.CFAddressPK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCFAddress, null, options, request);
      }
      /// <summary>
      ///获取所有数据包括分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFRoomTypeList GetCFRoomTypeList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFRoomTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有数据包括分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFRoomTypeList GetCFRoomTypeList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCFRoomTypeList, null, options, request);
      }
      /// <summary>
      ///获取所有数据包括分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFRoomTypeList> GetCFRoomTypeListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFRoomTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有数据包括分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFRoomTypeList> GetCFRoomTypeListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCFRoomTypeList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFRoomTypeStruct GetCFRoomTypeByID(global::GrpcConferenceService.CFRoomTypePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFRoomTypeByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CFRoomTypeStruct GetCFRoomTypeByID(global::GrpcConferenceService.CFRoomTypePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCFRoomTypeByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFRoomTypeStruct> GetCFRoomTypeByIDAsync(global::GrpcConferenceService.CFRoomTypePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCFRoomTypeByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CFRoomTypeStruct> GetCFRoomTypeByIDAsync(global::GrpcConferenceService.CFRoomTypePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCFRoomTypeByID, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateCFRoomType(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCFRoomType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateCFRoomType(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCFRoomType, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateCFRoomTypeAsync(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCFRoomTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateCFRoomTypeAsync(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCFRoomType, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateCFRoomType(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCFRoomType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateCFRoomType(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCFRoomType, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFRoomTypeAsync(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCFRoomTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateCFRoomTypeAsync(global::GrpcConferenceService.CFRoomTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCFRoomType, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteCFRoomType(global::GrpcConferenceService.CFRoomTypePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCFRoomType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteCFRoomType(global::GrpcConferenceService.CFRoomTypePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCFRoomType, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteCFRoomTypeAsync(global::GrpcConferenceService.CFRoomTypePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCFRoomTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteCFRoomTypeAsync(global::GrpcConferenceService.CFRoomTypePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCFRoomType, null, options, request);
      }
      /// <summary>
      ///获取conference所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetConferenceList(global::GrpcConferenceService.Year request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取conference所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetConferenceList(global::GrpcConferenceService.Year request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceList, null, options, request);
      }
      /// <summary>
      ///获取conference所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetConferenceListAsync(global::GrpcConferenceService.Year request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取conference所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetConferenceListAsync(global::GrpcConferenceService.Year request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceStruct GetConferenceByPK(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceByPK(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceStruct GetConferenceByPK(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceByPK, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceStruct> GetConferenceByPKAsync(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceByPKAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceStruct> GetConferenceByPKAsync(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceByPK, null, options, request);
      }
      /// <summary>
      ///根据parentid获取所有数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetConferenceListByParentID(global::GrpcConferenceService.ParentID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceListByParentID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据parentid获取所有数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetConferenceListByParentID(global::GrpcConferenceService.ParentID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceListByParentID, null, options, request);
      }
      /// <summary>
      ///根据parentid获取所有数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetConferenceListByParentIDAsync(global::GrpcConferenceService.ParentID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceListByParentIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据parentid获取所有数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetConferenceListByParentIDAsync(global::GrpcConferenceService.ParentID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceListByParentID, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateConference(global::GrpcConferenceService.ConferenceStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConference(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateConference(global::GrpcConferenceService.ConferenceStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateConference, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateConferenceAsync(global::GrpcConferenceService.ConferenceStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConferenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateConferenceAsync(global::GrpcConferenceService.ConferenceStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateConference, null, options, request);
      }
      /// <summary>
      ///根据id修改开始时间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateConferenceStartDateTime(global::GrpcConferenceService.UpdateInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConferenceStartDateTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id修改开始时间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateConferenceStartDateTime(global::GrpcConferenceService.UpdateInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateConferenceStartDateTime, null, options, request);
      }
      /// <summary>
      ///根据id修改开始时间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateConferenceStartDateTimeAsync(global::GrpcConferenceService.UpdateInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConferenceStartDateTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id修改开始时间
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateConferenceStartDateTimeAsync(global::GrpcConferenceService.UpdateInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateConferenceStartDateTime, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateConference(global::GrpcConferenceService.ConferenceStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConference(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateConference(global::GrpcConferenceService.ConferenceStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateConference, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateConferenceAsync(global::GrpcConferenceService.ConferenceStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConferenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateConferenceAsync(global::GrpcConferenceService.ConferenceStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateConference, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteConference(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConference(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteConference(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConference, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteConferenceAsync(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConferenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteConferenceAsync(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConference, null, options, request);
      }
      /// <summary>
      ///获取一级会议列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetFirstConferenceList(global::GrpcConferenceService.Year request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFirstConferenceList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取一级会议列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetFirstConferenceList(global::GrpcConferenceService.Year request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFirstConferenceList, null, options, request);
      }
      /// <summary>
      ///获取一级会议列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetFirstConferenceListAsync(global::GrpcConferenceService.Year request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFirstConferenceListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取一级会议列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetFirstConferenceListAsync(global::GrpcConferenceService.Year request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFirstConferenceList, null, options, request);
      }
      /// <summary>
      ///获取所有会议下的所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.AllConferenceInfoList GetAllConferenceInfoByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllConferenceInfoByConferenceID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有会议下的所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.AllConferenceInfoList GetAllConferenceInfoByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllConferenceInfoByConferenceID, null, options, request);
      }
      /// <summary>
      ///获取所有会议下的所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.AllConferenceInfoList> GetAllConferenceInfoByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllConferenceInfoByConferenceIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有会议下的所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.AllConferenceInfoList> GetAllConferenceInfoByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllConferenceInfoByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据嘉宾id获取conferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetConferenceListByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceListByParticipantID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据嘉宾id获取conferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetConferenceListByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceListByParticipantID, null, options, request);
      }
      /// <summary>
      ///根据嘉宾id获取conferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetConferenceListByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceListByParticipantIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据嘉宾id获取conferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetConferenceListByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceListByParticipantID, null, options, request);
      }
      /// <summary>
      ///模糊搜索获取午餐，晚宴list
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetLunchList(global::GrpcConferenceService.LunchNames request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLunchList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///模糊搜索获取午餐，晚宴list
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ConferenceList GetLunchList(global::GrpcConferenceService.LunchNames request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLunchList, null, options, request);
      }
      /// <summary>
      ///模糊搜索获取午餐，晚宴list
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetLunchListAsync(global::GrpcConferenceService.LunchNames request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLunchListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///模糊搜索获取午餐，晚宴list
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ConferenceList> GetLunchListAsync(global::GrpcConferenceService.LunchNames request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLunchList, null, options, request);
      }
      /// <summary>
      ///复制旧数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ResBool copyConferenceInfo(global::GrpcConferenceService.YearInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return copyConferenceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///复制旧数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ResBool copyConferenceInfo(global::GrpcConferenceService.YearInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_copyConferenceInfo, null, options, request);
      }
      /// <summary>
      ///复制旧数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ResBool> copyConferenceInfoAsync(global::GrpcConferenceService.YearInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return copyConferenceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///复制旧数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ResBool> copyConferenceInfoAsync(global::GrpcConferenceService.YearInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_copyConferenceInfo, null, options, request);
      }
      /// <summary>
      ///获取conference表存在的会议年份
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.YearList getConferenceYear(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getConferenceYear(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取conference表存在的会议年份
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.YearList getConferenceYear(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getConferenceYear, null, options, request);
      }
      /// <summary>
      ///获取conference表存在的会议年份
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.YearList> getConferenceYearAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getConferenceYearAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取conference表存在的会议年份
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.YearList> getConferenceYearAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getConferenceYear, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityList GetActivityList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityList GetActivityList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivityList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityList> GetActivityListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityList> GetActivityListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivityList, null, options, request);
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityList GetActivityListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityListByConferenceID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityList GetActivityListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivityListByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityList> GetActivityListByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityListByConferenceIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityList> GetActivityListByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivityListByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityStruct GetActivityByID(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityStruct GetActivityByID(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivityByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityStruct> GetActivityByIDAsync(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityStruct> GetActivityByIDAsync(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivityByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateActivity(global::GrpcConferenceService.ActivityStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateActivity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateActivity(global::GrpcConferenceService.ActivityStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateActivity, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateActivityAsync(global::GrpcConferenceService.ActivityStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateActivityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateActivityAsync(global::GrpcConferenceService.ActivityStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateActivity, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateActivity(global::GrpcConferenceService.ActivityStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateActivity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateActivity(global::GrpcConferenceService.ActivityStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateActivity, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivityAsync(global::GrpcConferenceService.ActivityStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateActivityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivityAsync(global::GrpcConferenceService.ActivityStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateActivity, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteActivity(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteActivity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteActivity(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteActivity, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteActivityAsync(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteActivityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteActivityAsync(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteActivity, null, options, request);
      }
      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateAllActivitySortByActivityIDs(global::GrpcConferenceService.ActivityIDs request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAllActivitySortByActivityIDs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateAllActivitySortByActivityIDs(global::GrpcConferenceService.ActivityIDs request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAllActivitySortByActivityIDs, null, options, request);
      }
      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateAllActivitySortByActivityIDsAsync(global::GrpcConferenceService.ActivityIDs request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAllActivitySortByActivityIDsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateAllActivitySortByActivityIDsAsync(global::GrpcConferenceService.ActivityIDs request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAllActivitySortByActivityIDs, null, options, request);
      }
      /// <summary>
      ///根据一级会议id获取该一级会议下的所有activity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityList GetAllActivityListByFirstConfereceID(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllActivityListByFirstConfereceID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据一级会议id获取该一级会议下的所有activity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityList GetAllActivityListByFirstConfereceID(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllActivityListByFirstConfereceID, null, options, request);
      }
      /// <summary>
      ///根据一级会议id获取该一级会议下的所有activity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityList> GetAllActivityListByFirstConfereceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllActivityListByFirstConfereceIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据一级会议id获取该一级会议下的所有activity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityList> GetAllActivityListByFirstConfereceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllActivityListByFirstConfereceID, null, options, request);
      }
      /// <summary>
      ///草稿activity移至正式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM MoveActivityDraftToActivity(global::GrpcConferenceService.ActivityDraftInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveActivityDraftToActivity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///草稿activity移至正式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM MoveActivityDraftToActivity(global::GrpcConferenceService.ActivityDraftInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveActivityDraftToActivity, null, options, request);
      }
      /// <summary>
      ///草稿activity移至正式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> MoveActivityDraftToActivityAsync(global::GrpcConferenceService.ActivityDraftInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveActivityDraftToActivityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///草稿activity移至正式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> MoveActivityDraftToActivityAsync(global::GrpcConferenceService.ActivityDraftInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveActivityDraftToActivity, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityTypeList GetActivityTypeList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityTypeList GetActivityTypeList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivityTypeList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityTypeList> GetActivityTypeListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityTypeList> GetActivityTypeListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivityTypeList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityTypeStruct GetActivityTypeByID(global::GrpcConferenceService.ActivityTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityTypeByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityTypeStruct GetActivityTypeByID(global::GrpcConferenceService.ActivityTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivityTypeByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityTypeStruct> GetActivityTypeByIDAsync(global::GrpcConferenceService.ActivityTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityTypeByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityTypeStruct> GetActivityTypeByIDAsync(global::GrpcConferenceService.ActivityTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivityTypeByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateActivityType(global::GrpcConferenceService.ActivityTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateActivityType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateActivityType(global::GrpcConferenceService.ActivityTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateActivityType, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateActivityTypeAsync(global::GrpcConferenceService.ActivityTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateActivityTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateActivityTypeAsync(global::GrpcConferenceService.ActivityTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateActivityType, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateActivityType(global::GrpcConferenceService.ActivityTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateActivityType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateActivityType(global::GrpcConferenceService.ActivityTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateActivityType, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivityTypeAsync(global::GrpcConferenceService.ActivityTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateActivityTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivityTypeAsync(global::GrpcConferenceService.ActivityTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateActivityType, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteActivityType(global::GrpcConferenceService.ActivityTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteActivityType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteActivityType(global::GrpcConferenceService.ActivityTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteActivityType, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteActivityTypeAsync(global::GrpcConferenceService.ActivityTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteActivityTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteActivityTypeAsync(global::GrpcConferenceService.ActivityTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteActivityType, null, options, request);
      }
      /// <summary>
      ///根据code获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityTypeStruct GetActivityTypeByActivityCode(global::GrpcConferenceService.ActivityCode request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityTypeByActivityCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据code获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityTypeStruct GetActivityTypeByActivityCode(global::GrpcConferenceService.ActivityCode request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivityTypeByActivityCode, null, options, request);
      }
      /// <summary>
      ///根据code获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityTypeStruct> GetActivityTypeByActivityCodeAsync(global::GrpcConferenceService.ActivityCode request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityTypeByActivityCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据code获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityTypeStruct> GetActivityTypeByActivityCodeAsync(global::GrpcConferenceService.ActivityCode request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivityTypeByActivityCode, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkList GetTalkList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkList GetTalkList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTalkList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkList> GetTalkListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkList> GetTalkListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTalkList, null, options, request);
      }
      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkList GetTalkListByActivityID(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkListByActivityID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkList GetTalkListByActivityID(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTalkListByActivityID, null, options, request);
      }
      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkList> GetTalkListByActivityIDAsync(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkListByActivityIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkList> GetTalkListByActivityIDAsync(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTalkListByActivityID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkStruct GetTalkByID(global::GrpcConferenceService.TalkID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkStruct GetTalkByID(global::GrpcConferenceService.TalkID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTalkByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkStruct> GetTalkByIDAsync(global::GrpcConferenceService.TalkID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkStruct> GetTalkByIDAsync(global::GrpcConferenceService.TalkID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTalkByID, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateTalk(global::GrpcConferenceService.TalkStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTalk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateTalk(global::GrpcConferenceService.TalkStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTalk, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateTalkAsync(global::GrpcConferenceService.TalkStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTalkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateTalkAsync(global::GrpcConferenceService.TalkStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTalk, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTalk(global::GrpcConferenceService.TalkStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTalk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTalk(global::GrpcConferenceService.TalkStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTalk, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalkAsync(global::GrpcConferenceService.TalkStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTalkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalkAsync(global::GrpcConferenceService.TalkStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTalk, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTalk(global::GrpcConferenceService.TalkID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTalk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTalk(global::GrpcConferenceService.TalkID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTalk, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTalkAsync(global::GrpcConferenceService.TalkID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTalkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTalkAsync(global::GrpcConferenceService.TalkID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTalk, null, options, request);
      }
      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateAllTalkSortByTalkIDs(global::GrpcConferenceService.TalkIDs request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAllTalkSortByTalkIDs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateAllTalkSortByTalkIDs(global::GrpcConferenceService.TalkIDs request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAllTalkSortByTalkIDs, null, options, request);
      }
      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateAllTalkSortByTalkIDsAsync(global::GrpcConferenceService.TalkIDs request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAllTalkSortByTalkIDsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id集合修改排序
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateAllTalkSortByTalkIDsAsync(global::GrpcConferenceService.TalkIDs request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAllTalkSortByTalkIDs, null, options, request);
      }
      /// <summary>
      ///根据talkid修改topicname
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTopicNameByTalkID(global::GrpcConferenceService.UpdateTalkInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTopicNameByTalkID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据talkid修改topicname
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTopicNameByTalkID(global::GrpcConferenceService.UpdateTalkInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTopicNameByTalkID, null, options, request);
      }
      /// <summary>
      ///根据talkid修改topicname
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTopicNameByTalkIDAsync(global::GrpcConferenceService.UpdateTalkInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTopicNameByTalkIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据talkid修改topicname
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTopicNameByTalkIDAsync(global::GrpcConferenceService.UpdateTalkInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTopicNameByTalkID, null, options, request);
      }
      /// <summary>
      ///topic是否在talk中存在引用
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.IsUse IsTalkUse(global::GrpcConferenceService.Info request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsTalkUse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///topic是否在talk中存在引用
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.IsUse IsTalkUse(global::GrpcConferenceService.Info request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsTalkUse, null, options, request);
      }
      /// <summary>
      ///topic是否在talk中存在引用
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.IsUse> IsTalkUseAsync(global::GrpcConferenceService.Info request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsTalkUseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///topic是否在talk中存在引用
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.IsUse> IsTalkUseAsync(global::GrpcConferenceService.Info request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsTalkUse, null, options, request);
      }
      /// <summary>
      ///草稿talk移至正式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM MoveTalkDraftToTalk(global::GrpcConferenceService.TalkDraftInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveTalkDraftToTalk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///草稿talk移至正式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM MoveTalkDraftToTalk(global::GrpcConferenceService.TalkDraftInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveTalkDraftToTalk, null, options, request);
      }
      /// <summary>
      ///草稿talk移至正式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> MoveTalkDraftToTalkAsync(global::GrpcConferenceService.TalkDraftInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveTalkDraftToTalkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///草稿talk移至正式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> MoveTalkDraftToTalkAsync(global::GrpcConferenceService.TalkDraftInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveTalkDraftToTalk, null, options, request);
      }
      /// <summary>
      ///获取所有数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkTypeList GetTalkTypeList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkTypeList GetTalkTypeList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTalkTypeList, null, options, request);
      }
      /// <summary>
      ///获取所有数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkTypeList> GetTalkTypeListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkTypeList> GetTalkTypeListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTalkTypeList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkTypeStruct GetTalkTypeByID(global::GrpcConferenceService.TalkTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkTypeByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkTypeStruct GetTalkTypeByID(global::GrpcConferenceService.TalkTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTalkTypeByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkTypeStruct> GetTalkTypeByIDAsync(global::GrpcConferenceService.TalkTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkTypeByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkTypeStruct> GetTalkTypeByIDAsync(global::GrpcConferenceService.TalkTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTalkTypeByID, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateTalkType(global::GrpcConferenceService.TalkTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTalkType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateTalkType(global::GrpcConferenceService.TalkTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTalkType, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateTalkTypeAsync(global::GrpcConferenceService.TalkTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTalkTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateTalkTypeAsync(global::GrpcConferenceService.TalkTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTalkType, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTalkType(global::GrpcConferenceService.TalkTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTalkType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTalkType(global::GrpcConferenceService.TalkTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTalkType, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalkTypeAsync(global::GrpcConferenceService.TalkTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTalkTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalkTypeAsync(global::GrpcConferenceService.TalkTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTalkType, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTalkType(global::GrpcConferenceService.TalkTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTalkType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTalkType(global::GrpcConferenceService.TalkTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTalkType, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTalkTypeAsync(global::GrpcConferenceService.TalkTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTalkTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTalkTypeAsync(global::GrpcConferenceService.TalkTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTalkType, null, options, request);
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerLevelList GetOrganizerLevelListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerLevelListByConferenceID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerLevelList GetOrganizerLevelListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganizerLevelListByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerLevelList> GetOrganizerLevelListByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerLevelListByConferenceIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerLevelList> GetOrganizerLevelListByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganizerLevelListByConferenceID, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerLevelList GetOrganizerLevelList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerLevelList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerLevelList GetOrganizerLevelList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganizerLevelList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerLevelList> GetOrganizerLevelListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerLevelListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerLevelList> GetOrganizerLevelListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganizerLevelList, null, options, request);
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerLevelStruct GetOrganizerLevelByID(global::GrpcConferenceService.OrganizerLevelID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerLevelByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerLevelStruct GetOrganizerLevelByID(global::GrpcConferenceService.OrganizerLevelID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganizerLevelByID, null, options, request);
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerLevelStruct> GetOrganizerLevelByIDAsync(global::GrpcConferenceService.OrganizerLevelID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerLevelByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerLevelStruct> GetOrganizerLevelByIDAsync(global::GrpcConferenceService.OrganizerLevelID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganizerLevelByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateOrganizerLevel(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganizerLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateOrganizerLevel(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOrganizerLevel, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateOrganizerLevelAsync(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganizerLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateOrganizerLevelAsync(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOrganizerLevel, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateOrganizerLevel(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganizerLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateOrganizerLevel(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOrganizerLevel, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateOrganizerLevelAsync(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganizerLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateOrganizerLevelAsync(global::GrpcConferenceService.OrganizerLevelStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOrganizerLevel, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteOrganizerLevel(global::GrpcConferenceService.OrganizerLevelID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizerLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteOrganizerLevel(global::GrpcConferenceService.OrganizerLevelID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganizerLevel, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteOrganizerLevelAsync(global::GrpcConferenceService.OrganizerLevelID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizerLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteOrganizerLevelAsync(global::GrpcConferenceService.OrganizerLevelID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganizerLevel, null, options, request);
      }
      /// <summary>
      ///根据类型id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerList GetOrganizerListByOrganizerLevelID(global::GrpcConferenceService.OrganizerLevelID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerListByOrganizerLevelID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据类型id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerList GetOrganizerListByOrganizerLevelID(global::GrpcConferenceService.OrganizerLevelID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganizerListByOrganizerLevelID, null, options, request);
      }
      /// <summary>
      ///根据类型id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerList> GetOrganizerListByOrganizerLevelIDAsync(global::GrpcConferenceService.OrganizerLevelID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerListByOrganizerLevelIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据类型id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerList> GetOrganizerListByOrganizerLevelIDAsync(global::GrpcConferenceService.OrganizerLevelID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganizerListByOrganizerLevelID, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerList GetOrganizerList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerList GetOrganizerList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganizerList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerList> GetOrganizerListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerList> GetOrganizerListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganizerList, null, options, request);
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerStruct GetOrganizerByID(global::GrpcConferenceService.OrganizerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.OrganizerStruct GetOrganizerByID(global::GrpcConferenceService.OrganizerID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganizerByID, null, options, request);
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerStruct> GetOrganizerByIDAsync(global::GrpcConferenceService.OrganizerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizerByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.OrganizerStruct> GetOrganizerByIDAsync(global::GrpcConferenceService.OrganizerID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganizerByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateOrganizer(global::GrpcConferenceService.OrganizerStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganizer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateOrganizer(global::GrpcConferenceService.OrganizerStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOrganizer, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateOrganizerAsync(global::GrpcConferenceService.OrganizerStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganizerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateOrganizerAsync(global::GrpcConferenceService.OrganizerStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOrganizer, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateOrganizer(global::GrpcConferenceService.OrganizerStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganizer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateOrganizer(global::GrpcConferenceService.OrganizerStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOrganizer, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateOrganizerAsync(global::GrpcConferenceService.OrganizerStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganizerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateOrganizerAsync(global::GrpcConferenceService.OrganizerStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOrganizer, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteOrganizer(global::GrpcConferenceService.OrganizerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteOrganizer(global::GrpcConferenceService.OrganizerID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganizer, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteOrganizerAsync(global::GrpcConferenceService.OrganizerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteOrganizerAsync(global::GrpcConferenceService.OrganizerID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganizer, null, options, request);
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PresenterList GetPresenterListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPresenterListByConferenceID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PresenterList GetPresenterListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPresenterListByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PresenterList> GetPresenterListByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPresenterListByConferenceIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据会议id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PresenterList> GetPresenterListByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPresenterListByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PresenterStruct GetPresenterByID(global::GrpcConferenceService.PresenterID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPresenterByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PresenterStruct GetPresenterByID(global::GrpcConferenceService.PresenterID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPresenterByID, null, options, request);
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PresenterStruct> GetPresenterByIDAsync(global::GrpcConferenceService.PresenterID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPresenterByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PresenterStruct> GetPresenterByIDAsync(global::GrpcConferenceService.PresenterID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPresenterByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreatePresenter(global::GrpcConferenceService.PresenterStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePresenter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreatePresenter(global::GrpcConferenceService.PresenterStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePresenter, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreatePresenterAsync(global::GrpcConferenceService.PresenterStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePresenterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreatePresenterAsync(global::GrpcConferenceService.PresenterStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePresenter, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdatePresenter(global::GrpcConferenceService.PresenterStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePresenter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdatePresenter(global::GrpcConferenceService.PresenterStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePresenter, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdatePresenterAsync(global::GrpcConferenceService.PresenterStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePresenterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdatePresenterAsync(global::GrpcConferenceService.PresenterStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePresenter, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeletePresenter(global::GrpcConferenceService.PresenterID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePresenter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeletePresenter(global::GrpcConferenceService.PresenterID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePresenter, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeletePresenterAsync(global::GrpcConferenceService.PresenterID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePresenterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeletePresenterAsync(global::GrpcConferenceService.PresenterID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePresenter, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PresenterList GetAllPresenterList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllPresenterList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PresenterList GetAllPresenterList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllPresenterList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PresenterList> GetAllPresenterListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllPresenterListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PresenterList> GetAllPresenterListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllPresenterList, null, options, request);
      }
      /// <summary>
      ///根据talkid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantInfoList GetParticipantListByTalkID(global::GrpcConferenceService.TalkID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByTalkID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据talkid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantInfoList GetParticipantListByTalkID(global::GrpcConferenceService.TalkID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantListByTalkID, null, options, request);
      }
      /// <summary>
      ///根据talkid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantInfoList> GetParticipantListByTalkIDAsync(global::GrpcConferenceService.TalkID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByTalkIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据talkid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantInfoList> GetParticipantListByTalkIDAsync(global::GrpcConferenceService.TalkID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantListByTalkID, null, options, request);
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantStruct GetParticipantByID(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantStruct GetParticipantByID(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantByID, null, options, request);
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantStruct> GetParticipantByIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantStruct> GetParticipantByIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantByID, null, options, request);
      }
      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantInfoList GetParticipantListByActivityID(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByActivityID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantInfoList GetParticipantListByActivityID(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantListByActivityID, null, options, request);
      }
      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantInfoList> GetParticipantListByActivityIDAsync(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByActivityIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据activityid获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantInfoList> GetParticipantListByActivityIDAsync(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantListByActivityID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipant(global::GrpcConferenceService.ParticipantStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipant(global::GrpcConferenceService.ParticipantStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateParticipant, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantAsync(global::GrpcConferenceService.ParticipantStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantAsync(global::GrpcConferenceService.ParticipantStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateParticipant, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipant(global::GrpcConferenceService.ParticipantStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipant(global::GrpcConferenceService.ParticipantStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParticipant, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantAsync(global::GrpcConferenceService.ParticipantStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantAsync(global::GrpcConferenceService.ParticipantStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParticipant, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipant(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipant(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteParticipant, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantAsync(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantAsync(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteParticipant, null, options, request);
      }
      /// <summary>
      ///根据分组id获取参与者信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantByGroupID(global::GrpcConferenceService.ParticipantGroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantByGroupID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据分组id获取参与者信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantByGroupID(global::GrpcConferenceService.ParticipantGroupID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantByGroupID, null, options, request);
      }
      /// <summary>
      ///根据分组id获取参与者信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantByGroupIDAsync(global::GrpcConferenceService.ParticipantGroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantByGroupIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据分组id获取参与者信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantByGroupIDAsync(global::GrpcConferenceService.ParticipantGroupID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantByGroupID, null, options, request);
      }
      /// <summary>
      ///根据合同号删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticioantByPerContractNumber(global::GrpcConferenceService.PerContractNumberID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticioantByPerContractNumber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据合同号删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticioantByPerContractNumber(global::GrpcConferenceService.PerContractNumberID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteParticioantByPerContractNumber, null, options, request);
      }
      /// <summary>
      ///根据合同号删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticioantByPerContractNumberAsync(global::GrpcConferenceService.PerContractNumberID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticioantByPerContractNumberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据合同号删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticioantByPerContractNumberAsync(global::GrpcConferenceService.PerContractNumberID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteParticioantByPerContractNumber, null, options, request);
      }
      /// <summary>
      ///根据搜索条件获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetALLParticipantBySearch(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetALLParticipantBySearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据搜索条件获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetALLParticipantBySearch(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetALLParticipantBySearch, null, options, request);
      }
      /// <summary>
      ///根据搜索条件获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetALLParticipantBySearchAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetALLParticipantBySearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据搜索条件获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetALLParticipantBySearchAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetALLParticipantBySearch, null, options, request);
      }
      /// <summary>
      ///根据姓名搜索
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByName(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据姓名搜索
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByName(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantListByName, null, options, request);
      }
      /// <summary>
      ///根据姓名搜索
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByNameAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据姓名搜索
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByNameAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantListByName, null, options, request);
      }
      /// <summary>
      ///根据合同id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantIDList GetParticipantIDByPersonContractID(global::GrpcConferenceService.PersonContractID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantIDByPersonContractID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据合同id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantIDList GetParticipantIDByPersonContractID(global::GrpcConferenceService.PersonContractID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantIDByPersonContractID, null, options, request);
      }
      /// <summary>
      ///根据合同id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantIDList> GetParticipantIDByPersonContractIDAsync(global::GrpcConferenceService.PersonContractID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantIDByPersonContractIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据合同id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantIDList> GetParticipantIDByPersonContractIDAsync(global::GrpcConferenceService.PersonContractID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantIDByPersonContractID, null, options, request);
      }
      /// <summary>
      ///根据conpanyid获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByCompanyID(global::GrpcConferenceService.CompanyId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByCompanyID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据conpanyid获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByCompanyID(global::GrpcConferenceService.CompanyId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantListByCompanyID, null, options, request);
      }
      /// <summary>
      ///根据conpanyid获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByCompanyIDAsync(global::GrpcConferenceService.CompanyId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByCompanyIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据conpanyid获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByCompanyIDAsync(global::GrpcConferenceService.CompanyId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantListByCompanyID, null, options, request);
      }
      /// <summary>
      ///根据memberpk获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByMemberPK(global::GrpcConferenceService.MemberPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByMemberPK(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据memberpk获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByMemberPK(global::GrpcConferenceService.MemberPK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantListByMemberPK, null, options, request);
      }
      /// <summary>
      ///根据memberpk获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByMemberPKAsync(global::GrpcConferenceService.MemberPK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByMemberPKAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据memberpk获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByMemberPKAsync(global::GrpcConferenceService.MemberPK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantListByMemberPK, null, options, request);
      }
      /// <summary>
      ///根据memberpk和ShowOnFont获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByMemberPKandIsShowOnFont(global::GrpcConferenceService.PInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByMemberPKandIsShowOnFont(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据memberpk和ShowOnFont获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByMemberPKandIsShowOnFont(global::GrpcConferenceService.PInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantListByMemberPKandIsShowOnFont, null, options, request);
      }
      /// <summary>
      ///根据memberpk和ShowOnFont获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByMemberPKandIsShowOnFontAsync(global::GrpcConferenceService.PInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByMemberPKandIsShowOnFontAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据memberpk和ShowOnFont获取信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByMemberPKandIsShowOnFontAsync(global::GrpcConferenceService.PInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantListByMemberPKandIsShowOnFont, null, options, request);
      }
      /// <summary>
      ///根据conferenceid获取所有嘉宾
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByConferenceID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据conferenceid获取所有嘉宾
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantListByConferenceID(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantListByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据conferenceid获取所有嘉宾
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantListByConferenceIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据conferenceid获取所有嘉宾
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantListByConferenceIDAsync(global::GrpcConferenceService.ConferencePK request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantListByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据conferenceid获取所有percontarctnumber不为空的数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantNotNullListByConferenceID(global::GrpcConferenceService.PagingInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantNotNullListByConferenceID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据conferenceid获取所有percontarctnumber不为空的数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantList GetParticipantNotNullListByConferenceID(global::GrpcConferenceService.PagingInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantNotNullListByConferenceID, null, options, request);
      }
      /// <summary>
      ///根据conferenceid获取所有percontarctnumber不为空的数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantNotNullListByConferenceIDAsync(global::GrpcConferenceService.PagingInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantNotNullListByConferenceIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据conferenceid获取所有percontarctnumber不为空的数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantList> GetParticipantNotNullListByConferenceIDAsync(global::GrpcConferenceService.PagingInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantNotNullListByConferenceID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateTPMap(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTPMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateTPMap(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTPMap, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateTPMapAsync(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTPMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateTPMapAsync(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTPMap, null, options, request);
      }
      /// <summary>
      ///根据talkid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTPMapByTalkID(global::GrpcConferenceService.TalkID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTPMapByTalkID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据talkid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTPMapByTalkID(global::GrpcConferenceService.TalkID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTPMapByTalkID, null, options, request);
      }
      /// <summary>
      ///根据talkid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTPMapByTalkIDAsync(global::GrpcConferenceService.TalkID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTPMapByTalkIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据talkid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTPMapByTalkIDAsync(global::GrpcConferenceService.TalkID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTPMapByTalkID, null, options, request);
      }
      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTPMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTPMapByParticipantID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTPMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTPMapByParticipantID, null, options, request);
      }
      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTPMapByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTPMapByParticipantIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTPMapByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTPMapByParticipantID, null, options, request);
      }
      /// <summary>
      ///根据talkid修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTPMap(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTPMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据talkid修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTPMap(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTPMap, null, options, request);
      }
      /// <summary>
      ///根据talkid修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTPMapAsync(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTPMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据talkid修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTPMapAsync(global::GrpcConferenceService.TalkParticipantMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTPMap, null, options, request);
      }
      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateAPMap(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAPMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateAPMap(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAPMap, null, options, request);
      }
      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateAPMapAsync(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAPMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateAPMapAsync(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAPMap, null, options, request);
      }
      /// <summary>
      ///根据activityid删除映射
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteAPMapByActivityID(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAPMapByActivityID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据activityid删除映射
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteAPMapByActivityID(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAPMapByActivityID, null, options, request);
      }
      /// <summary>
      ///根据activityid删除映射
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteAPMapByActivityIDAsync(global::GrpcConferenceService.ActivityID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAPMapByActivityIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据activityid删除映射
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteAPMapByActivityIDAsync(global::GrpcConferenceService.ActivityID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAPMapByActivityID, null, options, request);
      }
      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteAPMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAPMapByParticipantID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteAPMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAPMapByParticipantID, null, options, request);
      }
      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteAPMapByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAPMapByParticipantIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据participantid删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteAPMapByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAPMapByParticipantID, null, options, request);
      }
      /// <summary>
      ///根据activitydi修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateAPMap(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAPMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据activitydi修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateAPMap(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAPMap, null, options, request);
      }
      /// <summary>
      ///根据activitydi修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateAPMapAsync(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAPMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据activitydi修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateAPMapAsync(global::GrpcConferenceService.ActivityParticipantMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAPMap, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantGroupList GetParticipantGroupList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantGroupList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantGroupList GetParticipantGroupList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantGroupList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantGroupList> GetParticipantGroupListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantGroupListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantGroupList> GetParticipantGroupListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantGroupList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantGroupStruct GetParticipantGroupByID(global::GrpcConferenceService.ParticipantGroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantGroupByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantGroupStruct GetParticipantGroupByID(global::GrpcConferenceService.ParticipantGroupID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantGroupByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantGroupStruct> GetParticipantGroupByIDAsync(global::GrpcConferenceService.ParticipantGroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantGroupByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantGroupStruct> GetParticipantGroupByIDAsync(global::GrpcConferenceService.ParticipantGroupID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantGroupByID, null, options, request);
      }
      /// <summary>
      ///批量创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantGroups(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///批量创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantGroups(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateParticipantGroups, null, options, request);
      }
      /// <summary>
      ///批量创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroupsAsync(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///批量创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroupsAsync(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateParticipantGroups, null, options, request);
      }
      /// <summary>
      ///批量编辑信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantGroups(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///批量编辑信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantGroups(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParticipantGroups, null, options, request);
      }
      /// <summary>
      ///批量编辑信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantGroupsAsync(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///批量编辑信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantGroupsAsync(global::GrpcConferenceService.ParticipantGroupInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParticipantGroups, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantGroup(global::GrpcConferenceService.ParticipantGroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantGroup(global::GrpcConferenceService.ParticipantGroupID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteParticipantGroup, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroupAsync(global::GrpcConferenceService.ParticipantGroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroupAsync(global::GrpcConferenceService.ParticipantGroupID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteParticipantGroup, null, options, request);
      }
      /// <summary>
      ///根据参与人id获取分组信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantGroupList GetParticipantGroupByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantGroupByParticipantID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据参与人id获取分组信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantGroupList GetParticipantGroupByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantGroupByParticipantID, null, options, request);
      }
      /// <summary>
      ///根据参与人id获取分组信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantGroupList> GetParticipantGroupByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantGroupByParticipantIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据参与人id获取分组信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantGroupList> GetParticipantGroupByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantGroupByParticipantID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantGroup(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantGroup(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateParticipantGroup, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroupAsync(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroupAsync(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateParticipantGroup, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantGroup(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantGroup(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParticipantGroup, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantGroupAsync(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantGroupAsync(global::GrpcConferenceService.ParticipantGroupStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParticipantGroup, null, options, request);
      }
      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantGroupMap(global::GrpcConferenceService.ParticipantIDs request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantGroupMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantGroupMap(global::GrpcConferenceService.ParticipantIDs request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateParticipantGroupMap, null, options, request);
      }
      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroupMapAsync(global::GrpcConferenceService.ParticipantIDs request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantGroupMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建映射信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantGroupMapAsync(global::GrpcConferenceService.ParticipantIDs request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateParticipantGroupMap, null, options, request);
      }
      /// <summary>
      ///根据参与者id删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantGroupMapByParticipanID(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantGroupMapByParticipanID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据参与者id删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantGroupMapByParticipanID(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteParticipantGroupMapByParticipanID, null, options, request);
      }
      /// <summary>
      ///根据参与者id删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroupMapByParticipanIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantGroupMapByParticipanIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据参与者id删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroupMapByParticipanIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteParticipantGroupMapByParticipanID, null, options, request);
      }
      /// <summary>
      ///根据分组id删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantGroupMapByParticipantGroupID(global::GrpcConferenceService.ParticipantGroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantGroupMapByParticipantGroupID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据分组id删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantGroupMapByParticipantGroupID(global::GrpcConferenceService.ParticipantGroupID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteParticipantGroupMapByParticipantGroupID, null, options, request);
      }
      /// <summary>
      ///根据分组id删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroupMapByParticipantGroupIDAsync(global::GrpcConferenceService.ParticipantGroupID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantGroupMapByParticipantGroupIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据分组id删除映射关系
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantGroupMapByParticipantGroupIDAsync(global::GrpcConferenceService.ParticipantGroupID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteParticipantGroupMapByParticipantGroupID, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantTypeList GetParticipantTypeList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantTypeList GetParticipantTypeList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantTypeList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantTypeList> GetParticipantTypeListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantTypeList> GetParticipantTypeListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantTypeList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantTypeStruct GetParticipantTypeByID(global::GrpcConferenceService.ParticipantTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantTypeByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantTypeStruct GetParticipantTypeByID(global::GrpcConferenceService.ParticipantTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantTypeByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantTypeStruct> GetParticipantTypeByIDAsync(global::GrpcConferenceService.ParticipantTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantTypeByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantTypeStruct> GetParticipantTypeByIDAsync(global::GrpcConferenceService.ParticipantTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantTypeByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantType(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantType(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateParticipantType, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantTypeAsync(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantTypeAsync(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateParticipantType, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantType(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantType(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParticipantType, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantTypeAsync(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantTypeAsync(global::GrpcConferenceService.ParticipantTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParticipantType, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantType(global::GrpcConferenceService.ParticipantTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantType(global::GrpcConferenceService.ParticipantTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteParticipantType, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantTypeAsync(global::GrpcConferenceService.ParticipantTypeID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantTypeAsync(global::GrpcConferenceService.ParticipantTypeID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteParticipantType, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantTypeMap(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantTypeMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantTypeMap(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateParticipantTypeMap, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantTypeMapAsync(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantTypeMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantTypeMapAsync(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateParticipantTypeMap, null, options, request);
      }
      /// <summary>
      ///根据ParticipantID删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantTypeMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantTypeMapByParticipantID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ParticipantID删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantTypeMapByParticipantID(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteParticipantTypeMapByParticipantID, null, options, request);
      }
      /// <summary>
      ///根据ParticipantID删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantTypeMapByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantTypeMapByParticipantIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ParticipantID删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantTypeMapByParticipantIDAsync(global::GrpcConferenceService.ParticipantID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteParticipantTypeMapByParticipantID, null, options, request);
      }
      /// <summary>
      ///根据ParticipantID修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantTypeMap(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantTypeMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ParticipantID修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantTypeMap(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParticipantTypeMap, null, options, request);
      }
      /// <summary>
      ///根据ParticipantID修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantTypeMapAsync(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantTypeMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ParticipantID修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantTypeMapAsync(global::GrpcConferenceService.ParticipantTypeMapInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParticipantTypeMap, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityDraftList GetActivityDraftList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityDraftList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityDraftList GetActivityDraftList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivityDraftList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityDraftList> GetActivityDraftListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityDraftListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityDraftList> GetActivityDraftListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivityDraftList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityDraftStruct GetActivityDraftByID(global::GrpcConferenceService.ActivityDraftID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityDraftByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ActivityDraftStruct GetActivityDraftByID(global::GrpcConferenceService.ActivityDraftID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivityDraftByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityDraftStruct> GetActivityDraftByIDAsync(global::GrpcConferenceService.ActivityDraftID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivityDraftByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ActivityDraftStruct> GetActivityDraftByIDAsync(global::GrpcConferenceService.ActivityDraftID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivityDraftByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateActivityDraft(global::GrpcConferenceService.ActivityDraftStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateActivityDraft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateActivityDraft(global::GrpcConferenceService.ActivityDraftStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateActivityDraft, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateActivityDraftAsync(global::GrpcConferenceService.ActivityDraftStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateActivityDraftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateActivityDraftAsync(global::GrpcConferenceService.ActivityDraftStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateActivityDraft, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateActivityDraft(global::GrpcConferenceService.ActivityDraftStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateActivityDraft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateActivityDraft(global::GrpcConferenceService.ActivityDraftStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateActivityDraft, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivityDraftAsync(global::GrpcConferenceService.ActivityDraftStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateActivityDraftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateActivityDraftAsync(global::GrpcConferenceService.ActivityDraftStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateActivityDraft, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteActivityDraft(global::GrpcConferenceService.ActivityDraftID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteActivityDraft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteActivityDraft(global::GrpcConferenceService.ActivityDraftID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteActivityDraft, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteActivityDraftAsync(global::GrpcConferenceService.ActivityDraftID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteActivityDraftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteActivityDraftAsync(global::GrpcConferenceService.ActivityDraftID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteActivityDraft, null, options, request);
      }
      /// <summary>
      ///正式activity移至草稿
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM MoveActivityToActivityDraft(global::GrpcConferenceService.ActivityStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveActivityToActivityDraft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///正式activity移至草稿
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM MoveActivityToActivityDraft(global::GrpcConferenceService.ActivityStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveActivityToActivityDraft, null, options, request);
      }
      /// <summary>
      ///正式activity移至草稿
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> MoveActivityToActivityDraftAsync(global::GrpcConferenceService.ActivityStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveActivityToActivityDraftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///正式activity移至草稿
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> MoveActivityToActivityDraftAsync(global::GrpcConferenceService.ActivityStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveActivityToActivityDraft, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkDraftList GetTalkDraftList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkDraftList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkDraftList GetTalkDraftList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTalkDraftList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkDraftList> GetTalkDraftListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkDraftListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkDraftList> GetTalkDraftListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTalkDraftList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkDraftStruct GetTalkDraftByID(global::GrpcConferenceService.TalkDraftID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkDraftByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.TalkDraftStruct GetTalkDraftByID(global::GrpcConferenceService.TalkDraftID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTalkDraftByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkDraftStruct> GetTalkDraftByIDAsync(global::GrpcConferenceService.TalkDraftID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTalkDraftByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.TalkDraftStruct> GetTalkDraftByIDAsync(global::GrpcConferenceService.TalkDraftID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTalkDraftByID, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateTalkDraft(global::GrpcConferenceService.TalkDraftStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTalkDraft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateTalkDraft(global::GrpcConferenceService.TalkDraftStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTalkDraft, null, options, request);
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateTalkDraftAsync(global::GrpcConferenceService.TalkDraftStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTalkDraftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateTalkDraftAsync(global::GrpcConferenceService.TalkDraftStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTalkDraft, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTalkDraft(global::GrpcConferenceService.TalkDraftStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTalkDraft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateTalkDraft(global::GrpcConferenceService.TalkDraftStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTalkDraft, null, options, request);
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalkDraftAsync(global::GrpcConferenceService.TalkDraftStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTalkDraftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateTalkDraftAsync(global::GrpcConferenceService.TalkDraftStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTalkDraft, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTalkDraft(global::GrpcConferenceService.TalkDraftID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTalkDraft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteTalkDraft(global::GrpcConferenceService.TalkDraftID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTalkDraft, null, options, request);
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTalkDraftAsync(global::GrpcConferenceService.TalkDraftID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTalkDraftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteTalkDraftAsync(global::GrpcConferenceService.TalkDraftID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTalkDraft, null, options, request);
      }
      /// <summary>
      ///正式talk移至草稿
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM MoveTalkToTalkDraft(global::GrpcConferenceService.MoveInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveTalkToTalkDraft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///正式talk移至草稿
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM MoveTalkToTalkDraft(global::GrpcConferenceService.MoveInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveTalkToTalkDraft, null, options, request);
      }
      /// <summary>
      ///正式talk移至草稿
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> MoveTalkToTalkDraftAsync(global::GrpcConferenceService.MoveInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveTalkToTalkDraftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///正式talk移至草稿
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> MoveTalkToTalkDraftAsync(global::GrpcConferenceService.MoveInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveTalkToTalkDraft, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ReceptionList GetReceptionList(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReceptionList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ReceptionList GetReceptionList(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReceptionList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ReceptionList> GetReceptionListAsync(global::GrpcConferenceService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReceptionListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ReceptionList> GetReceptionListAsync(global::GrpcConferenceService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReceptionList, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateReception(global::GrpcConferenceService.ReceptionList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReception(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateReception(global::GrpcConferenceService.ReceptionList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateReception, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateReceptionAsync(global::GrpcConferenceService.ReceptionList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReceptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateReceptionAsync(global::GrpcConferenceService.ReceptionList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateReception, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateReception(global::GrpcConferenceService.ReceptionStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateReception(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateReception(global::GrpcConferenceService.ReceptionStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateReception, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateReceptionAsync(global::GrpcConferenceService.ReceptionStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateReceptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateReceptionAsync(global::GrpcConferenceService.ReceptionStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateReception, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteReception(global::GrpcConferenceService.ReceptionID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReception(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteReception(global::GrpcConferenceService.ReceptionID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteReception, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteReceptionAsync(global::GrpcConferenceService.ReceptionID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReceptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteReceptionAsync(global::GrpcConferenceService.ReceptionID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteReception, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PolicyList GetPolicyList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PolicyList GetPolicyList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPolicyList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PolicyList> GetPolicyListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PolicyList> GetPolicyListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPolicyList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PolicyStruct GetPolicyByID(global::GrpcConferenceService.PolicyID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PolicyStruct GetPolicyByID(global::GrpcConferenceService.PolicyID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPolicyByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PolicyStruct> GetPolicyByIDAsync(global::GrpcConferenceService.PolicyID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PolicyStruct> GetPolicyByIDAsync(global::GrpcConferenceService.PolicyID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPolicyByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreatePolicy(global::GrpcConferenceService.CreatePolicyInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreatePolicy(global::GrpcConferenceService.CreatePolicyInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePolicy, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreatePolicyAsync(global::GrpcConferenceService.CreatePolicyInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreatePolicyAsync(global::GrpcConferenceService.CreatePolicyInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePolicy, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdatePolicy(global::GrpcConferenceService.PolicyStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdatePolicy(global::GrpcConferenceService.PolicyStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePolicy, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdatePolicyAsync(global::GrpcConferenceService.PolicyStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdatePolicyAsync(global::GrpcConferenceService.PolicyStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePolicy, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeletePolicy(global::GrpcConferenceService.DeleteInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeletePolicy(global::GrpcConferenceService.DeleteInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePolicy, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeletePolicyAsync(global::GrpcConferenceService.DeleteInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeletePolicyAsync(global::GrpcConferenceService.DeleteInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePolicy, null, options, request);
      }
      /// <summary>
      ///根据业务员获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PolicyList GetPolicyListByUserName(global::GrpcConferenceService.UserName request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyListByUserName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据业务员获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PolicyList GetPolicyListByUserName(global::GrpcConferenceService.UserName request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPolicyListByUserName, null, options, request);
      }
      /// <summary>
      ///根据业务员获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PolicyList> GetPolicyListByUserNameAsync(global::GrpcConferenceService.UserName request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyListByUserNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据业务员获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PolicyList> GetPolicyListByUserNameAsync(global::GrpcConferenceService.UserName request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPolicyListByUserName, null, options, request);
      }
      /// <summary>
      ///获取剩余保单数
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PolicyInfoStruct getPolicyInfo(global::GrpcConferenceService.CreatePolicyInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getPolicyInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取剩余保单数
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.PolicyInfoStruct getPolicyInfo(global::GrpcConferenceService.CreatePolicyInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getPolicyInfo, null, options, request);
      }
      /// <summary>
      ///获取剩余保单数
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PolicyInfoStruct> getPolicyInfoAsync(global::GrpcConferenceService.CreatePolicyInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getPolicyInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取剩余保单数
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.PolicyInfoStruct> getPolicyInfoAsync(global::GrpcConferenceService.CreatePolicyInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getPolicyInfo, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantConferenceMapList GetParticipantConferenceMapList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantConferenceMapList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantConferenceMapList GetParticipantConferenceMapList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantConferenceMapList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantConferenceMapList> GetParticipantConferenceMapListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantConferenceMapListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantConferenceMapList> GetParticipantConferenceMapListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantConferenceMapList, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantConferenceMapStruct GetParticipantConferenceMapByID(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantConferenceMapByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ParticipantConferenceMapStruct GetParticipantConferenceMapByID(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantConferenceMapByID, null, options, request);
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantConferenceMapStruct> GetParticipantConferenceMapByIDAsync(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantConferenceMapByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据id获取单条信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ParticipantConferenceMapStruct> GetParticipantConferenceMapByIDAsync(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantConferenceMapByID, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantConferenceMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.CreateInfoVM CreateParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateParticipantConferenceMap, null, options, request);
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantConferenceMapAsync(global::GrpcConferenceService.ParticipantConferenceMapList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateParticipantConferenceMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.CreateInfoVM> CreateParticipantConferenceMapAsync(global::GrpcConferenceService.ParticipantConferenceMapList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateParticipantConferenceMap, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantConferenceMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.ModifiedInfoVM UpdateParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParticipantConferenceMap, null, options, request);
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantConferenceMapAsync(global::GrpcConferenceService.ParticipantConferenceMapStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParticipantConferenceMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.ModifiedInfoVM> UpdateParticipantConferenceMapAsync(global::GrpcConferenceService.ParticipantConferenceMapStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParticipantConferenceMap, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantConferenceMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.DeleteInfoVM DeleteParticipantConferenceMap(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteParticipantConferenceMap, null, options, request);
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantConferenceMapAsync(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteParticipantConferenceMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.DeleteInfoVM> DeleteParticipantConferenceMapAsync(global::GrpcConferenceService.ParticipantConferenceMapID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteParticipantConferenceMap, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.HistoryPolicyList getHistoryPolicyList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHistoryPolicyList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceService.HistoryPolicyList getHistoryPolicyList(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHistoryPolicyList, null, options, request);
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.HistoryPolicyList> getHistoryPolicyListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHistoryPolicyListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceService.HistoryPolicyList> getHistoryPolicyListAsync(global::GrpcConferenceService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHistoryPolicyList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ConferenceServiceToGrpcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConferenceServiceToGrpcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConferenceServiceToGrpcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCFRoomList, serviceImpl.GetCFRoomList)
          .AddMethod(__Method_GetCFRoomByID, serviceImpl.GetCFRoomByID)
          .AddMethod(__Method_CreateFRoom, serviceImpl.CreateFRoom)
          .AddMethod(__Method_UpdateCFRoom, serviceImpl.UpdateCFRoom)
          .AddMethod(__Method_DeleteCFRoom, serviceImpl.DeleteCFRoom)
          .AddMethod(__Method_GetCFSeatList, serviceImpl.GetCFSeatList)
          .AddMethod(__Method_GetCFSeatByID, serviceImpl.GetCFSeatByID)
          .AddMethod(__Method_CreateCFSeat, serviceImpl.CreateCFSeat)
          .AddMethod(__Method_UpdateCFSeat, serviceImpl.UpdateCFSeat)
          .AddMethod(__Method_DeleteCFSeat, serviceImpl.DeleteCFSeat)
          .AddMethod(__Method_GetCFAddressList, serviceImpl.GetCFAddressList)
          .AddMethod(__Method_GetAllCFAddressList, serviceImpl.GetAllCFAddressList)
          .AddMethod(__Method_GetCFAddressByID, serviceImpl.GetCFAddressByID)
          .AddMethod(__Method_CreateCFAddress, serviceImpl.CreateCFAddress)
          .AddMethod(__Method_UpdateCFAddress, serviceImpl.UpdateCFAddress)
          .AddMethod(__Method_DeleteCFAddress, serviceImpl.DeleteCFAddress)
          .AddMethod(__Method_GetCFRoomTypeList, serviceImpl.GetCFRoomTypeList)
          .AddMethod(__Method_GetCFRoomTypeByID, serviceImpl.GetCFRoomTypeByID)
          .AddMethod(__Method_CreateCFRoomType, serviceImpl.CreateCFRoomType)
          .AddMethod(__Method_UpdateCFRoomType, serviceImpl.UpdateCFRoomType)
          .AddMethod(__Method_DeleteCFRoomType, serviceImpl.DeleteCFRoomType)
          .AddMethod(__Method_GetConferenceList, serviceImpl.GetConferenceList)
          .AddMethod(__Method_GetConferenceByPK, serviceImpl.GetConferenceByPK)
          .AddMethod(__Method_GetConferenceListByParentID, serviceImpl.GetConferenceListByParentID)
          .AddMethod(__Method_CreateConference, serviceImpl.CreateConference)
          .AddMethod(__Method_UpdateConferenceStartDateTime, serviceImpl.UpdateConferenceStartDateTime)
          .AddMethod(__Method_UpdateConference, serviceImpl.UpdateConference)
          .AddMethod(__Method_DeleteConference, serviceImpl.DeleteConference)
          .AddMethod(__Method_GetFirstConferenceList, serviceImpl.GetFirstConferenceList)
          .AddMethod(__Method_GetAllConferenceInfoByConferenceID, serviceImpl.GetAllConferenceInfoByConferenceID)
          .AddMethod(__Method_GetConferenceListByParticipantID, serviceImpl.GetConferenceListByParticipantID)
          .AddMethod(__Method_GetLunchList, serviceImpl.GetLunchList)
          .AddMethod(__Method_copyConferenceInfo, serviceImpl.copyConferenceInfo)
          .AddMethod(__Method_getConferenceYear, serviceImpl.getConferenceYear)
          .AddMethod(__Method_GetActivityList, serviceImpl.GetActivityList)
          .AddMethod(__Method_GetActivityListByConferenceID, serviceImpl.GetActivityListByConferenceID)
          .AddMethod(__Method_GetActivityByID, serviceImpl.GetActivityByID)
          .AddMethod(__Method_CreateActivity, serviceImpl.CreateActivity)
          .AddMethod(__Method_UpdateActivity, serviceImpl.UpdateActivity)
          .AddMethod(__Method_DeleteActivity, serviceImpl.DeleteActivity)
          .AddMethod(__Method_UpdateAllActivitySortByActivityIDs, serviceImpl.UpdateAllActivitySortByActivityIDs)
          .AddMethod(__Method_GetAllActivityListByFirstConfereceID, serviceImpl.GetAllActivityListByFirstConfereceID)
          .AddMethod(__Method_MoveActivityDraftToActivity, serviceImpl.MoveActivityDraftToActivity)
          .AddMethod(__Method_GetActivityTypeList, serviceImpl.GetActivityTypeList)
          .AddMethod(__Method_GetActivityTypeByID, serviceImpl.GetActivityTypeByID)
          .AddMethod(__Method_CreateActivityType, serviceImpl.CreateActivityType)
          .AddMethod(__Method_UpdateActivityType, serviceImpl.UpdateActivityType)
          .AddMethod(__Method_DeleteActivityType, serviceImpl.DeleteActivityType)
          .AddMethod(__Method_GetActivityTypeByActivityCode, serviceImpl.GetActivityTypeByActivityCode)
          .AddMethod(__Method_GetTalkList, serviceImpl.GetTalkList)
          .AddMethod(__Method_GetTalkListByActivityID, serviceImpl.GetTalkListByActivityID)
          .AddMethod(__Method_GetTalkByID, serviceImpl.GetTalkByID)
          .AddMethod(__Method_CreateTalk, serviceImpl.CreateTalk)
          .AddMethod(__Method_UpdateTalk, serviceImpl.UpdateTalk)
          .AddMethod(__Method_DeleteTalk, serviceImpl.DeleteTalk)
          .AddMethod(__Method_UpdateAllTalkSortByTalkIDs, serviceImpl.UpdateAllTalkSortByTalkIDs)
          .AddMethod(__Method_UpdateTopicNameByTalkID, serviceImpl.UpdateTopicNameByTalkID)
          .AddMethod(__Method_IsTalkUse, serviceImpl.IsTalkUse)
          .AddMethod(__Method_MoveTalkDraftToTalk, serviceImpl.MoveTalkDraftToTalk)
          .AddMethod(__Method_GetTalkTypeList, serviceImpl.GetTalkTypeList)
          .AddMethod(__Method_GetTalkTypeByID, serviceImpl.GetTalkTypeByID)
          .AddMethod(__Method_CreateTalkType, serviceImpl.CreateTalkType)
          .AddMethod(__Method_UpdateTalkType, serviceImpl.UpdateTalkType)
          .AddMethod(__Method_DeleteTalkType, serviceImpl.DeleteTalkType)
          .AddMethod(__Method_GetOrganizerLevelListByConferenceID, serviceImpl.GetOrganizerLevelListByConferenceID)
          .AddMethod(__Method_GetOrganizerLevelList, serviceImpl.GetOrganizerLevelList)
          .AddMethod(__Method_GetOrganizerLevelByID, serviceImpl.GetOrganizerLevelByID)
          .AddMethod(__Method_CreateOrganizerLevel, serviceImpl.CreateOrganizerLevel)
          .AddMethod(__Method_UpdateOrganizerLevel, serviceImpl.UpdateOrganizerLevel)
          .AddMethod(__Method_DeleteOrganizerLevel, serviceImpl.DeleteOrganizerLevel)
          .AddMethod(__Method_GetOrganizerListByOrganizerLevelID, serviceImpl.GetOrganizerListByOrganizerLevelID)
          .AddMethod(__Method_GetOrganizerList, serviceImpl.GetOrganizerList)
          .AddMethod(__Method_GetOrganizerByID, serviceImpl.GetOrganizerByID)
          .AddMethod(__Method_CreateOrganizer, serviceImpl.CreateOrganizer)
          .AddMethod(__Method_UpdateOrganizer, serviceImpl.UpdateOrganizer)
          .AddMethod(__Method_DeleteOrganizer, serviceImpl.DeleteOrganizer)
          .AddMethod(__Method_GetPresenterListByConferenceID, serviceImpl.GetPresenterListByConferenceID)
          .AddMethod(__Method_GetPresenterByID, serviceImpl.GetPresenterByID)
          .AddMethod(__Method_CreatePresenter, serviceImpl.CreatePresenter)
          .AddMethod(__Method_UpdatePresenter, serviceImpl.UpdatePresenter)
          .AddMethod(__Method_DeletePresenter, serviceImpl.DeletePresenter)
          .AddMethod(__Method_GetAllPresenterList, serviceImpl.GetAllPresenterList)
          .AddMethod(__Method_GetParticipantListByTalkID, serviceImpl.GetParticipantListByTalkID)
          .AddMethod(__Method_GetParticipantByID, serviceImpl.GetParticipantByID)
          .AddMethod(__Method_GetParticipantListByActivityID, serviceImpl.GetParticipantListByActivityID)
          .AddMethod(__Method_CreateParticipant, serviceImpl.CreateParticipant)
          .AddMethod(__Method_UpdateParticipant, serviceImpl.UpdateParticipant)
          .AddMethod(__Method_DeleteParticipant, serviceImpl.DeleteParticipant)
          .AddMethod(__Method_GetParticipantByGroupID, serviceImpl.GetParticipantByGroupID)
          .AddMethod(__Method_DeleteParticioantByPerContractNumber, serviceImpl.DeleteParticioantByPerContractNumber)
          .AddMethod(__Method_GetALLParticipantBySearch, serviceImpl.GetALLParticipantBySearch)
          .AddMethod(__Method_GetParticipantListByName, serviceImpl.GetParticipantListByName)
          .AddMethod(__Method_GetParticipantIDByPersonContractID, serviceImpl.GetParticipantIDByPersonContractID)
          .AddMethod(__Method_GetParticipantListByCompanyID, serviceImpl.GetParticipantListByCompanyID)
          .AddMethod(__Method_GetParticipantListByMemberPK, serviceImpl.GetParticipantListByMemberPK)
          .AddMethod(__Method_GetParticipantListByMemberPKandIsShowOnFont, serviceImpl.GetParticipantListByMemberPKandIsShowOnFont)
          .AddMethod(__Method_GetParticipantListByConferenceID, serviceImpl.GetParticipantListByConferenceID)
          .AddMethod(__Method_GetParticipantNotNullListByConferenceID, serviceImpl.GetParticipantNotNullListByConferenceID)
          .AddMethod(__Method_CreateTPMap, serviceImpl.CreateTPMap)
          .AddMethod(__Method_DeleteTPMapByTalkID, serviceImpl.DeleteTPMapByTalkID)
          .AddMethod(__Method_DeleteTPMapByParticipantID, serviceImpl.DeleteTPMapByParticipantID)
          .AddMethod(__Method_UpdateTPMap, serviceImpl.UpdateTPMap)
          .AddMethod(__Method_CreateAPMap, serviceImpl.CreateAPMap)
          .AddMethod(__Method_DeleteAPMapByActivityID, serviceImpl.DeleteAPMapByActivityID)
          .AddMethod(__Method_DeleteAPMapByParticipantID, serviceImpl.DeleteAPMapByParticipantID)
          .AddMethod(__Method_UpdateAPMap, serviceImpl.UpdateAPMap)
          .AddMethod(__Method_GetParticipantGroupList, serviceImpl.GetParticipantGroupList)
          .AddMethod(__Method_GetParticipantGroupByID, serviceImpl.GetParticipantGroupByID)
          .AddMethod(__Method_CreateParticipantGroups, serviceImpl.CreateParticipantGroups)
          .AddMethod(__Method_UpdateParticipantGroups, serviceImpl.UpdateParticipantGroups)
          .AddMethod(__Method_DeleteParticipantGroup, serviceImpl.DeleteParticipantGroup)
          .AddMethod(__Method_GetParticipantGroupByParticipantID, serviceImpl.GetParticipantGroupByParticipantID)
          .AddMethod(__Method_CreateParticipantGroup, serviceImpl.CreateParticipantGroup)
          .AddMethod(__Method_UpdateParticipantGroup, serviceImpl.UpdateParticipantGroup)
          .AddMethod(__Method_CreateParticipantGroupMap, serviceImpl.CreateParticipantGroupMap)
          .AddMethod(__Method_DeleteParticipantGroupMapByParticipanID, serviceImpl.DeleteParticipantGroupMapByParticipanID)
          .AddMethod(__Method_DeleteParticipantGroupMapByParticipantGroupID, serviceImpl.DeleteParticipantGroupMapByParticipantGroupID)
          .AddMethod(__Method_GetParticipantTypeList, serviceImpl.GetParticipantTypeList)
          .AddMethod(__Method_GetParticipantTypeByID, serviceImpl.GetParticipantTypeByID)
          .AddMethod(__Method_CreateParticipantType, serviceImpl.CreateParticipantType)
          .AddMethod(__Method_UpdateParticipantType, serviceImpl.UpdateParticipantType)
          .AddMethod(__Method_DeleteParticipantType, serviceImpl.DeleteParticipantType)
          .AddMethod(__Method_CreateParticipantTypeMap, serviceImpl.CreateParticipantTypeMap)
          .AddMethod(__Method_DeleteParticipantTypeMapByParticipantID, serviceImpl.DeleteParticipantTypeMapByParticipantID)
          .AddMethod(__Method_UpdateParticipantTypeMap, serviceImpl.UpdateParticipantTypeMap)
          .AddMethod(__Method_GetActivityDraftList, serviceImpl.GetActivityDraftList)
          .AddMethod(__Method_GetActivityDraftByID, serviceImpl.GetActivityDraftByID)
          .AddMethod(__Method_CreateActivityDraft, serviceImpl.CreateActivityDraft)
          .AddMethod(__Method_UpdateActivityDraft, serviceImpl.UpdateActivityDraft)
          .AddMethod(__Method_DeleteActivityDraft, serviceImpl.DeleteActivityDraft)
          .AddMethod(__Method_MoveActivityToActivityDraft, serviceImpl.MoveActivityToActivityDraft)
          .AddMethod(__Method_GetTalkDraftList, serviceImpl.GetTalkDraftList)
          .AddMethod(__Method_GetTalkDraftByID, serviceImpl.GetTalkDraftByID)
          .AddMethod(__Method_CreateTalkDraft, serviceImpl.CreateTalkDraft)
          .AddMethod(__Method_UpdateTalkDraft, serviceImpl.UpdateTalkDraft)
          .AddMethod(__Method_DeleteTalkDraft, serviceImpl.DeleteTalkDraft)
          .AddMethod(__Method_MoveTalkToTalkDraft, serviceImpl.MoveTalkToTalkDraft)
          .AddMethod(__Method_GetReceptionList, serviceImpl.GetReceptionList)
          .AddMethod(__Method_CreateReception, serviceImpl.CreateReception)
          .AddMethod(__Method_UpdateReception, serviceImpl.UpdateReception)
          .AddMethod(__Method_DeleteReception, serviceImpl.DeleteReception)
          .AddMethod(__Method_GetPolicyList, serviceImpl.GetPolicyList)
          .AddMethod(__Method_GetPolicyByID, serviceImpl.GetPolicyByID)
          .AddMethod(__Method_CreatePolicy, serviceImpl.CreatePolicy)
          .AddMethod(__Method_UpdatePolicy, serviceImpl.UpdatePolicy)
          .AddMethod(__Method_DeletePolicy, serviceImpl.DeletePolicy)
          .AddMethod(__Method_GetPolicyListByUserName, serviceImpl.GetPolicyListByUserName)
          .AddMethod(__Method_getPolicyInfo, serviceImpl.getPolicyInfo)
          .AddMethod(__Method_GetParticipantConferenceMapList, serviceImpl.GetParticipantConferenceMapList)
          .AddMethod(__Method_GetParticipantConferenceMapByID, serviceImpl.GetParticipantConferenceMapByID)
          .AddMethod(__Method_CreateParticipantConferenceMap, serviceImpl.CreateParticipantConferenceMap)
          .AddMethod(__Method_UpdateParticipantConferenceMap, serviceImpl.UpdateParticipantConferenceMap)
          .AddMethod(__Method_DeleteParticipantConferenceMap, serviceImpl.DeleteParticipantConferenceMap)
          .AddMethod(__Method_getHistoryPolicyList, serviceImpl.getHistoryPolicyList).Build();
    }

  }
}
#endregion
