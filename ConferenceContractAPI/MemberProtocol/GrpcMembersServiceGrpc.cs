// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GrpcMembersService.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcMembersService {
  /// <summary>
  ///version_20190222_0.1
  /// tag&lt;gRPC>
  /// host&lt;member.api>
  /// port&lt;40001> 
  /// </summary>
  public static partial class MemberServiceToGrpc
  {
    static readonly string __ServiceName = "GrpcMembersService.MemberServiceToGrpc";

    static readonly grpc::Marshaller<global::GrpcMembersService.GetMsgNumRequest> __Marshaller_GetMsgNumRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.GetMsgNumRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.GetMsgSumReply> __Marshaller_GetMsgSumReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.GetMsgSumReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemberRequest> __Marshaller_MemberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.LoginInfoReply> __Marshaller_LoginInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.LoginInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemContractRequest> __Marshaller_MemContractRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemContractRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemberContractStruct> __Marshaller_MemberContractStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemberContractStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.ModifyReply> __Marshaller_ModifyReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.ModifyReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemberContractRequest> __Marshaller_MemberContractRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemberContractRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.PaginationRequestSearch> __Marshaller_PaginationRequestSearch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.PaginationRequestSearch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemberList> __Marshaller_MemberList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemberList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemberSearch> __Marshaller_MemberSearch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemberSearch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.IdRequest> __Marshaller_IdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.IdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemberStruct> __Marshaller_MemberStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemberStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemberAccountStruct> __Marshaller_MemberAccountStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemberAccountStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.ModifyReplyForCreateMember> __Marshaller_ModifyReplyForCreateMember = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.ModifyReplyForCreateMember.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.MemberIdList> __Marshaller_MemberIdList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.MemberIdList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.ActivationStruct> __Marshaller_ActivationStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.ActivationStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.PwdRequest> __Marshaller_PwdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.PwdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.CompanyDicList> __Marshaller_CompanyDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.CompanyDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.CompanyList> __Marshaller_CompanyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.CompanyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.SearchStruct> __Marshaller_SearchStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.SearchStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.CompanyStruct> __Marshaller_CompanyStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.CompanyStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.BoolReply> __Marshaller_BoolReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.BoolReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.ModifyReplyForCreateOther> __Marshaller_ModifyReplyForCreateOther = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.ModifyReplyForCreateOther.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.ComnpanyIdList> __Marshaller_ComnpanyIdList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.ComnpanyIdList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.SourceDicList> __Marshaller_SourceDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.SourceDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.PaginationRequest> __Marshaller_PaginationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.PaginationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.SourceList> __Marshaller_SourceList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.SourceList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.SourceStruct> __Marshaller_SourceStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.SourceStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.IndustryTypeDicList> __Marshaller_IndustryTypeDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.IndustryTypeDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.IndustryTypeList> __Marshaller_IndustryTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.IndustryTypeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.IndustryTypeStruct> __Marshaller_IndustryTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.IndustryTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.CompanyTypeDicList> __Marshaller_CompanyTypeDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.CompanyTypeDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.CompanyTypeList> __Marshaller_CompanyTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.CompanyTypeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.CompanyTypeStruct> __Marshaller_CompanyTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.CompanyTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.AreaList> __Marshaller_AreaList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.AreaList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.AreaStruct> __Marshaller_AreaStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.AreaStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMembersService.CountryDicList> __Marshaller_CountryDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMembersService.CountryDicList.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcMembersService.GetMsgNumRequest, global::GrpcMembersService.GetMsgSumReply> __Method_GetSum = new grpc::Method<global::GrpcMembersService.GetMsgNumRequest, global::GrpcMembersService.GetMsgSumReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSum",
        __Marshaller_GetMsgNumRequest,
        __Marshaller_GetMsgSumReply);

    static readonly grpc::Method<global::GrpcMembersService.MemberRequest, global::GrpcMembersService.LoginInfoReply> __Method_LoginToMember = new grpc::Method<global::GrpcMembersService.MemberRequest, global::GrpcMembersService.LoginInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoginToMember",
        __Marshaller_MemberRequest,
        __Marshaller_LoginInfoReply);

    static readonly grpc::Method<global::GrpcMembersService.MemContractRequest, global::GrpcMembersService.LoginInfoReply> __Method_LoginToMemContract = new grpc::Method<global::GrpcMembersService.MemContractRequest, global::GrpcMembersService.LoginInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoginToMemContract",
        __Marshaller_MemContractRequest,
        __Marshaller_LoginInfoReply);

    static readonly grpc::Method<global::GrpcMembersService.MemberContractStruct, global::GrpcMembersService.ModifyReply> __Method_CreateMemberContractInfo = new grpc::Method<global::GrpcMembersService.MemberContractStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMemberContractInfo",
        __Marshaller_MemberContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.MemberContractRequest, global::GrpcMembersService.MemberContractStruct> __Method_GetMemContractByMemContract = new grpc::Method<global::GrpcMembersService.MemberContractRequest, global::GrpcMembersService.MemberContractStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMemContractByMemContract",
        __Marshaller_MemberContractRequest,
        __Marshaller_MemberContractStruct);

    static readonly grpc::Method<global::GrpcMembersService.MemberContractRequest, global::GrpcMembersService.ModifyReply> __Method_DeleteMemContractByMemContract = new grpc::Method<global::GrpcMembersService.MemberContractRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMemContractByMemContract",
        __Marshaller_MemberContractRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.PaginationRequestSearch, global::GrpcMembersService.MemberList> __Method_GetMemberList = new grpc::Method<global::GrpcMembersService.PaginationRequestSearch, global::GrpcMembersService.MemberList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMemberList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_MemberList);

    static readonly grpc::Method<global::GrpcMembersService.PaginationRequestSearch, global::GrpcMembersService.MemberList> __Method_GetMemberListByCompanyPK = new grpc::Method<global::GrpcMembersService.PaginationRequestSearch, global::GrpcMembersService.MemberList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMemberListByCompanyPK",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_MemberList);

    static readonly grpc::Method<global::GrpcMembersService.MemberSearch, global::GrpcMembersService.MemberList> __Method_GetMemberListByMemberSearchToAll = new grpc::Method<global::GrpcMembersService.MemberSearch, global::GrpcMembersService.MemberList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMemberListByMemberSearchToAll",
        __Marshaller_MemberSearch,
        __Marshaller_MemberList);

    static readonly grpc::Method<global::GrpcMembersService.MemberSearch, global::GrpcMembersService.MemberList> __Method_GetMemberListByMemberSearch = new grpc::Method<global::GrpcMembersService.MemberSearch, global::GrpcMembersService.MemberList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMemberListByMemberSearch",
        __Marshaller_MemberSearch,
        __Marshaller_MemberList);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.MemberStruct> __Method_GetMemberById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.MemberStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMemberById",
        __Marshaller_IdRequest,
        __Marshaller_MemberStruct);

    static readonly grpc::Method<global::GrpcMembersService.MemberAccountStruct, global::GrpcMembersService.ModifyReplyForCreateMember> __Method_CreateMemberAccountInfo = new grpc::Method<global::GrpcMembersService.MemberAccountStruct, global::GrpcMembersService.ModifyReplyForCreateMember>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMemberAccountInfo",
        __Marshaller_MemberAccountStruct,
        __Marshaller_ModifyReplyForCreateMember);

    static readonly grpc::Method<global::GrpcMembersService.MemberStruct, global::GrpcMembersService.ModifyReplyForCreateMember> __Method_CreateMemberInfo = new grpc::Method<global::GrpcMembersService.MemberStruct, global::GrpcMembersService.ModifyReplyForCreateMember>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMemberInfo",
        __Marshaller_MemberStruct,
        __Marshaller_ModifyReplyForCreateMember);

    static readonly grpc::Method<global::GrpcMembersService.MemberStruct, global::GrpcMembersService.ModifyReply> __Method_UpdateMemberInfo = new grpc::Method<global::GrpcMembersService.MemberStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMemberInfo",
        __Marshaller_MemberStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply> __Method_DeleteMemberById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMemberById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.MemberIdList, global::GrpcMembersService.ModifyReply> __Method_DeleteMemberByList = new grpc::Method<global::GrpcMembersService.MemberIdList, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMemberByList",
        __Marshaller_MemberIdList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.ActivationStruct, global::GrpcMembersService.ModifyReply> __Method_ActivateMemAccountByEmail = new grpc::Method<global::GrpcMembersService.ActivationStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateMemAccountByEmail",
        __Marshaller_ActivationStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.ActivationStruct, global::GrpcMembersService.ModifyReply> __Method_ActivateMemAccountByMobile = new grpc::Method<global::GrpcMembersService.ActivationStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateMemAccountByMobile",
        __Marshaller_ActivationStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.PwdRequest, global::GrpcMembersService.ModifyReply> __Method_ResetMemPwdInfo = new grpc::Method<global::GrpcMembersService.PwdRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetMemPwdInfo",
        __Marshaller_PwdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.CompanyDicList> __Method_GetCompanyDic = new grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.CompanyDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyDic",
        __Marshaller_Empty,
        __Marshaller_CompanyDicList);

    static readonly grpc::Method<global::GrpcMembersService.PaginationRequestSearch, global::GrpcMembersService.CompanyList> __Method_GetCompanyList = new grpc::Method<global::GrpcMembersService.PaginationRequestSearch, global::GrpcMembersService.CompanyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_CompanyList);

    static readonly grpc::Method<global::GrpcMembersService.MemberSearch, global::GrpcMembersService.CompanyList> __Method_GetComAccountListByMemberSearch = new grpc::Method<global::GrpcMembersService.MemberSearch, global::GrpcMembersService.CompanyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetComAccountListByMemberSearch",
        __Marshaller_MemberSearch,
        __Marshaller_CompanyList);

    static readonly grpc::Method<global::GrpcMembersService.SearchStruct, global::GrpcMembersService.CompanyStruct> __Method_GetCompanyByCompanyName = new grpc::Method<global::GrpcMembersService.SearchStruct, global::GrpcMembersService.CompanyStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyByCompanyName",
        __Marshaller_SearchStruct,
        __Marshaller_CompanyStruct);

    static readonly grpc::Method<global::GrpcMembersService.SearchStruct, global::GrpcMembersService.BoolReply> __Method_IsExitCompanyCn = new grpc::Method<global::GrpcMembersService.SearchStruct, global::GrpcMembersService.BoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsExitCompanyCn",
        __Marshaller_SearchStruct,
        __Marshaller_BoolReply);

    static readonly grpc::Method<global::GrpcMembersService.SearchStruct, global::GrpcMembersService.BoolReply> __Method_IsExitCompanyEn = new grpc::Method<global::GrpcMembersService.SearchStruct, global::GrpcMembersService.BoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsExitCompanyEn",
        __Marshaller_SearchStruct,
        __Marshaller_BoolReply);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.CompanyStruct> __Method_GetCompanyById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.CompanyStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyById",
        __Marshaller_IdRequest,
        __Marshaller_CompanyStruct);

    static readonly grpc::Method<global::GrpcMembersService.CompanyStruct, global::GrpcMembersService.ModifyReplyForCreateOther> __Method_CreateCompanyInfo = new grpc::Method<global::GrpcMembersService.CompanyStruct, global::GrpcMembersService.ModifyReplyForCreateOther>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCompanyInfo",
        __Marshaller_CompanyStruct,
        __Marshaller_ModifyReplyForCreateOther);

    static readonly grpc::Method<global::GrpcMembersService.CompanyStruct, global::GrpcMembersService.ModifyReplyForCreateOther> __Method_CreateCompanyInfoForSnecAdmin = new grpc::Method<global::GrpcMembersService.CompanyStruct, global::GrpcMembersService.ModifyReplyForCreateOther>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCompanyInfoForSnecAdmin",
        __Marshaller_CompanyStruct,
        __Marshaller_ModifyReplyForCreateOther);

    static readonly grpc::Method<global::GrpcMembersService.CompanyStruct, global::GrpcMembersService.ModifyReply> __Method_UpdateCompanyInfo = new grpc::Method<global::GrpcMembersService.CompanyStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCompanyInfo",
        __Marshaller_CompanyStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.SearchStruct, global::GrpcMembersService.ModifyReply> __Method_UpdateCompanyManagerByMemberPK = new grpc::Method<global::GrpcMembersService.SearchStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCompanyManagerByMemberPK",
        __Marshaller_SearchStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply> __Method_DeleteCompanyById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCompanyById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.ComnpanyIdList, global::GrpcMembersService.ModifyReply> __Method_DeleteCompanyByList = new grpc::Method<global::GrpcMembersService.ComnpanyIdList, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCompanyByList",
        __Marshaller_ComnpanyIdList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply> __Method_VerifyComAccount = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyComAccount",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.SourceDicList> __Method_GetSourceDic = new grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.SourceDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSourceDic",
        __Marshaller_Empty,
        __Marshaller_SourceDicList);

    static readonly grpc::Method<global::GrpcMembersService.PaginationRequest, global::GrpcMembersService.SourceList> __Method_GetSourceList = new grpc::Method<global::GrpcMembersService.PaginationRequest, global::GrpcMembersService.SourceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSourceList",
        __Marshaller_PaginationRequest,
        __Marshaller_SourceList);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.SourceStruct> __Method_GetSourceById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.SourceStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSourceById",
        __Marshaller_IdRequest,
        __Marshaller_SourceStruct);

    static readonly grpc::Method<global::GrpcMembersService.SourceStruct, global::GrpcMembersService.ModifyReply> __Method_CreateSourceInfo = new grpc::Method<global::GrpcMembersService.SourceStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSourceInfo",
        __Marshaller_SourceStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.SourceStruct, global::GrpcMembersService.ModifyReply> __Method_UpdateSourceInfo = new grpc::Method<global::GrpcMembersService.SourceStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSourceInfo",
        __Marshaller_SourceStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply> __Method_DeleteSourceById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSourceById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.IndustryTypeDicList> __Method_GetIndustryTypeDic = new grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.IndustryTypeDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIndustryTypeDic",
        __Marshaller_Empty,
        __Marshaller_IndustryTypeDicList);

    static readonly grpc::Method<global::GrpcMembersService.PaginationRequest, global::GrpcMembersService.IndustryTypeList> __Method_GetIndustryTypeList = new grpc::Method<global::GrpcMembersService.PaginationRequest, global::GrpcMembersService.IndustryTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIndustryTypeList",
        __Marshaller_PaginationRequest,
        __Marshaller_IndustryTypeList);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.IndustryTypeStruct> __Method_GetIndustryTypeById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.IndustryTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIndustryTypeById",
        __Marshaller_IdRequest,
        __Marshaller_IndustryTypeStruct);

    static readonly grpc::Method<global::GrpcMembersService.IndustryTypeStruct, global::GrpcMembersService.ModifyReply> __Method_CreateIndustryTypeInfo = new grpc::Method<global::GrpcMembersService.IndustryTypeStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateIndustryTypeInfo",
        __Marshaller_IndustryTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.IndustryTypeStruct, global::GrpcMembersService.ModifyReply> __Method_UpdateIndustryTypeInfo = new grpc::Method<global::GrpcMembersService.IndustryTypeStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateIndustryTypeInfo",
        __Marshaller_IndustryTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply> __Method_DeleteIndustryTypeById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteIndustryTypeById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.CompanyTypeDicList> __Method_GetCompanyTypeDic = new grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.CompanyTypeDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyTypeDic",
        __Marshaller_Empty,
        __Marshaller_CompanyTypeDicList);

    static readonly grpc::Method<global::GrpcMembersService.PaginationRequest, global::GrpcMembersService.CompanyTypeList> __Method_GetCompanyTypeList = new grpc::Method<global::GrpcMembersService.PaginationRequest, global::GrpcMembersService.CompanyTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyTypeList",
        __Marshaller_PaginationRequest,
        __Marshaller_CompanyTypeList);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.CompanyTypeStruct> __Method_GetCompanyTypeById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.CompanyTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyTypeById",
        __Marshaller_IdRequest,
        __Marshaller_CompanyTypeStruct);

    static readonly grpc::Method<global::GrpcMembersService.CompanyTypeStruct, global::GrpcMembersService.ModifyReply> __Method_CreateCompanyTypeInfo = new grpc::Method<global::GrpcMembersService.CompanyTypeStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCompanyTypeInfo",
        __Marshaller_CompanyTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.CompanyTypeStruct, global::GrpcMembersService.ModifyReply> __Method_UpdateCompanyTypeInfo = new grpc::Method<global::GrpcMembersService.CompanyTypeStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCompanyTypeInfo",
        __Marshaller_CompanyTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply> __Method_DeleteCompanyTypeById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCompanyTypeById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.PaginationRequest, global::GrpcMembersService.AreaList> __Method_GetAreasList = new grpc::Method<global::GrpcMembersService.PaginationRequest, global::GrpcMembersService.AreaList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAreasList",
        __Marshaller_PaginationRequest,
        __Marshaller_AreaList);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.AreaStruct> __Method_GetAreaById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.AreaStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAreaById",
        __Marshaller_IdRequest,
        __Marshaller_AreaStruct);

    static readonly grpc::Method<global::GrpcMembersService.AreaStruct, global::GrpcMembersService.ModifyReply> __Method_CreateAreaInfo = new grpc::Method<global::GrpcMembersService.AreaStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAreaInfo",
        __Marshaller_AreaStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.AreaStruct, global::GrpcMembersService.ModifyReply> __Method_UpdateAreaInfo = new grpc::Method<global::GrpcMembersService.AreaStruct, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAreaInfo",
        __Marshaller_AreaStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply> __Method_DeleteAreaById = new grpc::Method<global::GrpcMembersService.IdRequest, global::GrpcMembersService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAreaById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.CountryDicList> __Method_GetCountryDic = new grpc::Method<global::GrpcMembersService.Empty, global::GrpcMembersService.CountryDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCountryDic",
        __Marshaller_Empty,
        __Marshaller_CountryDicList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcMembersService.GrpcMembersServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MemberServiceToGrpc</summary>
    public abstract partial class MemberServiceToGrpcBase
    {
      /// <summary>
      ///案例
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.GetMsgSumReply> GetSum(global::GrpcMembersService.GetMsgNumRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过Member账号登录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.LoginInfoReply> LoginToMember(global::GrpcMembersService.MemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过合同号登录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.LoginInfoReply> LoginToMemContract(global::GrpcMembersService.MemContractRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============MemberContract==============
      ///创建MemberContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> CreateMemberContractInfo(global::GrpcMembersService.MemberContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.MemberContractStruct> GetMemContractByMemContract(global::GrpcMembersService.MemberContractRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据MemContract删除MemberContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteMemContractByMemContract(global::GrpcMembersService.MemberContractRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============Member==============
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为memEmail,memberName,companyName,memIsDelete,sourcePk）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.MemberList> GetMemberList(global::GrpcMembersService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内companyPk获取MemberList列表(带分页)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.MemberList> GetMemberListByCompanyPK(global::GrpcMembersService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///在根据member名字和公司名搜索相应的用户列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.MemberList> GetMemberListByMemberSearchToAll(global::GrpcMembersService.MemberSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///在创建个人合同之前根据账号名和公司名获取用户列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.MemberList> GetMemberListByMemberSearch(global::GrpcMembersService.MemberSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.MemberStruct> GetMemberById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///注册Member账号（用户自行注册成为SNEC账号）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReplyForCreateMember> CreateMemberAccountInfo(global::GrpcMembersService.MemberAccountStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建用户时去拿出所有Compay表中公司账号的信息（调用GetCompanyDic()接口），可以提供选择，如果未选择的话CompanyPK就为空，选择了的话就把Company表中的CompanyPK传入到Member表内的CompanyPK字段
      ///创建Member单个对象（如果客户或SNEC后台人员或在创建公司合同的时候时创建member账号时不需要传入CompanyPK参数，CompanyPK可为空）
      ///SNEC后台管理人员给客户注册member账号（如客户或是SNEC后台人员在创建该公司账户下其他个人会议合同时创建新member账号时，需要传入CompanyPK参数）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReplyForCreateMember> CreateMemberInfo(global::GrpcMembersService.MemberStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改Member单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> UpdateMemberInfo(global::GrpcMembersService.MemberStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除Member单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteMemberById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除Member多个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteMemberByList(global::GrpcMembersService.MemberIdList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///激活会员账号通过邮箱（传ActivationStruct内MemberPK和Email字段）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> ActivateMemAccountByEmail(global::GrpcMembersService.ActivationStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///激活会员账号通过手机（传ActivationStruct内MemberPK和Mobile字段）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> ActivateMemAccountByMobile(global::GrpcMembersService.ActivationStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///重置Member密码
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> ResetMemPwdInfo(global::GrpcMembersService.PwdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============Company==============
      ///获取Company所有公司账号信息的字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CompanyDicList> GetCompanyDic(global::GrpcMembersService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为comNameCn,comNameEn,comIsDelete,comIsVerify）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CompanyList> GetCompanyList(global::GrpcMembersService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///在创建公司合同之前根据账号名和公司名获取用户列表（SNEC后台管理员使用）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CompanyList> GetComAccountListByMemberSearch(global::GrpcMembersService.MemberSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内companyName字段精准查找Company对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CompanyStruct> GetCompanyByCompanyName(global::GrpcMembersService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内comNameCn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.BoolReply> IsExitCompanyCn(global::GrpcMembersService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内comNameEn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.BoolReply> IsExitCompanyEn(global::GrpcMembersService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CompanyStruct> GetCompanyById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///客户自己创建Company单个对象（客户自己申请为公司账户时使用）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReplyForCreateOther> CreateCompanyInfo(global::GrpcMembersService.CompanyStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///snec后台管理创建Company单个对象（snec后台管理人员创建公司账户时使用）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReplyForCreateOther> CreateCompanyInfoForSnecAdmin(global::GrpcMembersService.CompanyStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改Company单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> UpdateCompanyInfo(global::GrpcMembersService.CompanyStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改Company表中MemberPK，传SearchStruct内companyPk和memberPk（更换公司管理员）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> UpdateCompanyManagerByMemberPK(global::GrpcMembersService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除Company单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteCompanyById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除Company多个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteCompanyByList(global::GrpcMembersService.ComnpanyIdList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///审核账号是否成为公司账号
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> VerifyComAccount(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============Source==============
      ///获取Source字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.SourceDicList> GetSourceDic(global::GrpcMembersService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.SourceList> GetSourceList(global::GrpcMembersService.PaginationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.SourceStruct> GetSourceById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建Source单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> CreateSourceInfo(global::GrpcMembersService.SourceStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改Source单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> UpdateSourceInfo(global::GrpcMembersService.SourceStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除Source单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteSourceById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============IndustryType==============
      ///获取IndustryType字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.IndustryTypeDicList> GetIndustryTypeDic(global::GrpcMembersService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.IndustryTypeList> GetIndustryTypeList(global::GrpcMembersService.PaginationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.IndustryTypeStruct> GetIndustryTypeById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建IndustryType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> CreateIndustryTypeInfo(global::GrpcMembersService.IndustryTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改IndustryType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> UpdateIndustryTypeInfo(global::GrpcMembersService.IndustryTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除IndustryType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteIndustryTypeById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============CompanyType==============
      ///获取CompanyType字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CompanyTypeDicList> GetCompanyTypeDic(global::GrpcMembersService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CompanyTypeList> GetCompanyTypeList(global::GrpcMembersService.PaginationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CompanyTypeStruct> GetCompanyTypeById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建CompanyType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> CreateCompanyTypeInfo(global::GrpcMembersService.CompanyTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改CompanyType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> UpdateCompanyTypeInfo(global::GrpcMembersService.CompanyTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除CompanyType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteCompanyTypeById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============Area==============
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.AreaList> GetAreasList(global::GrpcMembersService.PaginationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.AreaStruct> GetAreaById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建Area单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> CreateAreaInfo(global::GrpcMembersService.AreaStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改Area单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> UpdateAreaInfo(global::GrpcMembersService.AreaStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除Area单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.ModifyReply> DeleteAreaById(global::GrpcMembersService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============Source==============
      ///获取Country字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMembersService.CountryDicList> GetCountryDic(global::GrpcMembersService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MemberServiceToGrpc</summary>
    public partial class MemberServiceToGrpcClient : grpc::ClientBase<MemberServiceToGrpcClient>
    {
      /// <summary>Creates a new client for MemberServiceToGrpc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MemberServiceToGrpcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MemberServiceToGrpc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MemberServiceToGrpcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MemberServiceToGrpcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MemberServiceToGrpcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///案例
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.GetMsgSumReply GetSum(global::GrpcMembersService.GetMsgNumRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///案例
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.GetMsgSumReply GetSum(global::GrpcMembersService.GetMsgNumRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSum, null, options, request);
      }
      /// <summary>
      ///案例
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.GetMsgSumReply> GetSumAsync(global::GrpcMembersService.GetMsgNumRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///案例
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.GetMsgSumReply> GetSumAsync(global::GrpcMembersService.GetMsgNumRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSum, null, options, request);
      }
      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过Member账号登录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.LoginInfoReply LoginToMember(global::GrpcMembersService.MemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginToMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过Member账号登录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.LoginInfoReply LoginToMember(global::GrpcMembersService.MemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoginToMember, null, options, request);
      }
      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过Member账号登录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.LoginInfoReply> LoginToMemberAsync(global::GrpcMembersService.MemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginToMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过Member账号登录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.LoginInfoReply> LoginToMemberAsync(global::GrpcMembersService.MemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoginToMember, null, options, request);
      }
      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过合同号登录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.LoginInfoReply LoginToMemContract(global::GrpcMembersService.MemContractRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginToMemContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过合同号登录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.LoginInfoReply LoginToMemContract(global::GrpcMembersService.MemContractRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoginToMemContract, null, options, request);
      }
      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过合同号登录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.LoginInfoReply> LoginToMemContractAsync(global::GrpcMembersService.MemContractRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginToMemContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///单点登陆（返回数据，不生成jwt），通过合同号登录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.LoginInfoReply> LoginToMemContractAsync(global::GrpcMembersService.MemContractRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoginToMemContract, null, options, request);
      }
      /// <summary>
      ///============MemberContract==============
      ///创建MemberContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateMemberContractInfo(global::GrpcMembersService.MemberContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMemberContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============MemberContract==============
      ///创建MemberContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateMemberContractInfo(global::GrpcMembersService.MemberContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMemberContractInfo, null, options, request);
      }
      /// <summary>
      ///============MemberContract==============
      ///创建MemberContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateMemberContractInfoAsync(global::GrpcMembersService.MemberContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMemberContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============MemberContract==============
      ///创建MemberContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateMemberContractInfoAsync(global::GrpcMembersService.MemberContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMemberContractInfo, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberContractStruct GetMemContractByMemContract(global::GrpcMembersService.MemberContractRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemContractByMemContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberContractStruct GetMemContractByMemContract(global::GrpcMembersService.MemberContractRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMemContractByMemContract, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberContractStruct> GetMemContractByMemContractAsync(global::GrpcMembersService.MemberContractRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemContractByMemContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberContractStruct> GetMemContractByMemContractAsync(global::GrpcMembersService.MemberContractRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMemContractByMemContract, null, options, request);
      }
      /// <summary>
      ///根据MemContract删除MemberContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteMemContractByMemContract(global::GrpcMembersService.MemberContractRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMemContractByMemContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据MemContract删除MemberContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteMemContractByMemContract(global::GrpcMembersService.MemberContractRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMemContractByMemContract, null, options, request);
      }
      /// <summary>
      ///根据MemContract删除MemberContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteMemContractByMemContractAsync(global::GrpcMembersService.MemberContractRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMemContractByMemContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据MemContract删除MemberContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteMemContractByMemContractAsync(global::GrpcMembersService.MemberContractRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMemContractByMemContract, null, options, request);
      }
      /// <summary>
      ///============Member==============
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为memEmail,memberName,companyName,memIsDelete,sourcePk）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberList GetMemberList(global::GrpcMembersService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Member==============
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为memEmail,memberName,companyName,memIsDelete,sourcePk）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberList GetMemberList(global::GrpcMembersService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMemberList, null, options, request);
      }
      /// <summary>
      ///============Member==============
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为memEmail,memberName,companyName,memIsDelete,sourcePk）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberList> GetMemberListAsync(global::GrpcMembersService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Member==============
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为memEmail,memberName,companyName,memIsDelete,sourcePk）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberList> GetMemberListAsync(global::GrpcMembersService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMemberList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内companyPk获取MemberList列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberList GetMemberListByCompanyPK(global::GrpcMembersService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberListByCompanyPK(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内companyPk获取MemberList列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberList GetMemberListByCompanyPK(global::GrpcMembersService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMemberListByCompanyPK, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内companyPk获取MemberList列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberList> GetMemberListByCompanyPKAsync(global::GrpcMembersService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberListByCompanyPKAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内companyPk获取MemberList列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberList> GetMemberListByCompanyPKAsync(global::GrpcMembersService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMemberListByCompanyPK, null, options, request);
      }
      /// <summary>
      ///在根据member名字和公司名搜索相应的用户列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberList GetMemberListByMemberSearchToAll(global::GrpcMembersService.MemberSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberListByMemberSearchToAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///在根据member名字和公司名搜索相应的用户列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberList GetMemberListByMemberSearchToAll(global::GrpcMembersService.MemberSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMemberListByMemberSearchToAll, null, options, request);
      }
      /// <summary>
      ///在根据member名字和公司名搜索相应的用户列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberList> GetMemberListByMemberSearchToAllAsync(global::GrpcMembersService.MemberSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberListByMemberSearchToAllAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///在根据member名字和公司名搜索相应的用户列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberList> GetMemberListByMemberSearchToAllAsync(global::GrpcMembersService.MemberSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMemberListByMemberSearchToAll, null, options, request);
      }
      /// <summary>
      ///在创建个人合同之前根据账号名和公司名获取用户列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberList GetMemberListByMemberSearch(global::GrpcMembersService.MemberSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberListByMemberSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///在创建个人合同之前根据账号名和公司名获取用户列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberList GetMemberListByMemberSearch(global::GrpcMembersService.MemberSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMemberListByMemberSearch, null, options, request);
      }
      /// <summary>
      ///在创建个人合同之前根据账号名和公司名获取用户列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberList> GetMemberListByMemberSearchAsync(global::GrpcMembersService.MemberSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberListByMemberSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///在创建个人合同之前根据账号名和公司名获取用户列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberList> GetMemberListByMemberSearchAsync(global::GrpcMembersService.MemberSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMemberListByMemberSearch, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberStruct GetMemberById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.MemberStruct GetMemberById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMemberById, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberStruct> GetMemberByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.MemberStruct> GetMemberByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMemberById, null, options, request);
      }
      /// <summary>
      ///注册Member账号（用户自行注册成为SNEC账号）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReplyForCreateMember CreateMemberAccountInfo(global::GrpcMembersService.MemberAccountStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMemberAccountInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///注册Member账号（用户自行注册成为SNEC账号）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReplyForCreateMember CreateMemberAccountInfo(global::GrpcMembersService.MemberAccountStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMemberAccountInfo, null, options, request);
      }
      /// <summary>
      ///注册Member账号（用户自行注册成为SNEC账号）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReplyForCreateMember> CreateMemberAccountInfoAsync(global::GrpcMembersService.MemberAccountStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMemberAccountInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///注册Member账号（用户自行注册成为SNEC账号）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReplyForCreateMember> CreateMemberAccountInfoAsync(global::GrpcMembersService.MemberAccountStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMemberAccountInfo, null, options, request);
      }
      /// <summary>
      ///创建用户时去拿出所有Compay表中公司账号的信息（调用GetCompanyDic()接口），可以提供选择，如果未选择的话CompanyPK就为空，选择了的话就把Company表中的CompanyPK传入到Member表内的CompanyPK字段
      ///创建Member单个对象（如果客户或SNEC后台人员或在创建公司合同的时候时创建member账号时不需要传入CompanyPK参数，CompanyPK可为空）
      ///SNEC后台管理人员给客户注册member账号（如客户或是SNEC后台人员在创建该公司账户下其他个人会议合同时创建新member账号时，需要传入CompanyPK参数）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReplyForCreateMember CreateMemberInfo(global::GrpcMembersService.MemberStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMemberInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建用户时去拿出所有Compay表中公司账号的信息（调用GetCompanyDic()接口），可以提供选择，如果未选择的话CompanyPK就为空，选择了的话就把Company表中的CompanyPK传入到Member表内的CompanyPK字段
      ///创建Member单个对象（如果客户或SNEC后台人员或在创建公司合同的时候时创建member账号时不需要传入CompanyPK参数，CompanyPK可为空）
      ///SNEC后台管理人员给客户注册member账号（如客户或是SNEC后台人员在创建该公司账户下其他个人会议合同时创建新member账号时，需要传入CompanyPK参数）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReplyForCreateMember CreateMemberInfo(global::GrpcMembersService.MemberStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMemberInfo, null, options, request);
      }
      /// <summary>
      ///创建用户时去拿出所有Compay表中公司账号的信息（调用GetCompanyDic()接口），可以提供选择，如果未选择的话CompanyPK就为空，选择了的话就把Company表中的CompanyPK传入到Member表内的CompanyPK字段
      ///创建Member单个对象（如果客户或SNEC后台人员或在创建公司合同的时候时创建member账号时不需要传入CompanyPK参数，CompanyPK可为空）
      ///SNEC后台管理人员给客户注册member账号（如客户或是SNEC后台人员在创建该公司账户下其他个人会议合同时创建新member账号时，需要传入CompanyPK参数）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReplyForCreateMember> CreateMemberInfoAsync(global::GrpcMembersService.MemberStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMemberInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建用户时去拿出所有Compay表中公司账号的信息（调用GetCompanyDic()接口），可以提供选择，如果未选择的话CompanyPK就为空，选择了的话就把Company表中的CompanyPK传入到Member表内的CompanyPK字段
      ///创建Member单个对象（如果客户或SNEC后台人员或在创建公司合同的时候时创建member账号时不需要传入CompanyPK参数，CompanyPK可为空）
      ///SNEC后台管理人员给客户注册member账号（如客户或是SNEC后台人员在创建该公司账户下其他个人会议合同时创建新member账号时，需要传入CompanyPK参数）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReplyForCreateMember> CreateMemberInfoAsync(global::GrpcMembersService.MemberStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMemberInfo, null, options, request);
      }
      /// <summary>
      ///修改Member单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateMemberInfo(global::GrpcMembersService.MemberStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMemberInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Member单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateMemberInfo(global::GrpcMembersService.MemberStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMemberInfo, null, options, request);
      }
      /// <summary>
      ///修改Member单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateMemberInfoAsync(global::GrpcMembersService.MemberStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMemberInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Member单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateMemberInfoAsync(global::GrpcMembersService.MemberStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMemberInfo, null, options, request);
      }
      /// <summary>
      ///删除Member单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteMemberById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMemberById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Member单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteMemberById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMemberById, null, options, request);
      }
      /// <summary>
      ///删除Member单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteMemberByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMemberByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Member单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteMemberByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMemberById, null, options, request);
      }
      /// <summary>
      ///删除Member多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteMemberByList(global::GrpcMembersService.MemberIdList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMemberByList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Member多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteMemberByList(global::GrpcMembersService.MemberIdList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMemberByList, null, options, request);
      }
      /// <summary>
      ///删除Member多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteMemberByListAsync(global::GrpcMembersService.MemberIdList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMemberByListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Member多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteMemberByListAsync(global::GrpcMembersService.MemberIdList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMemberByList, null, options, request);
      }
      /// <summary>
      ///激活会员账号通过邮箱（传ActivationStruct内MemberPK和Email字段）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply ActivateMemAccountByEmail(global::GrpcMembersService.ActivationStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateMemAccountByEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///激活会员账号通过邮箱（传ActivationStruct内MemberPK和Email字段）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply ActivateMemAccountByEmail(global::GrpcMembersService.ActivationStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateMemAccountByEmail, null, options, request);
      }
      /// <summary>
      ///激活会员账号通过邮箱（传ActivationStruct内MemberPK和Email字段）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> ActivateMemAccountByEmailAsync(global::GrpcMembersService.ActivationStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateMemAccountByEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///激活会员账号通过邮箱（传ActivationStruct内MemberPK和Email字段）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> ActivateMemAccountByEmailAsync(global::GrpcMembersService.ActivationStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateMemAccountByEmail, null, options, request);
      }
      /// <summary>
      ///激活会员账号通过手机（传ActivationStruct内MemberPK和Mobile字段）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply ActivateMemAccountByMobile(global::GrpcMembersService.ActivationStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateMemAccountByMobile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///激活会员账号通过手机（传ActivationStruct内MemberPK和Mobile字段）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply ActivateMemAccountByMobile(global::GrpcMembersService.ActivationStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateMemAccountByMobile, null, options, request);
      }
      /// <summary>
      ///激活会员账号通过手机（传ActivationStruct内MemberPK和Mobile字段）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> ActivateMemAccountByMobileAsync(global::GrpcMembersService.ActivationStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateMemAccountByMobileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///激活会员账号通过手机（传ActivationStruct内MemberPK和Mobile字段）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> ActivateMemAccountByMobileAsync(global::GrpcMembersService.ActivationStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateMemAccountByMobile, null, options, request);
      }
      /// <summary>
      ///重置Member密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply ResetMemPwdInfo(global::GrpcMembersService.PwdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetMemPwdInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///重置Member密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply ResetMemPwdInfo(global::GrpcMembersService.PwdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetMemPwdInfo, null, options, request);
      }
      /// <summary>
      ///重置Member密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> ResetMemPwdInfoAsync(global::GrpcMembersService.PwdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetMemPwdInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///重置Member密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> ResetMemPwdInfoAsync(global::GrpcMembersService.PwdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetMemPwdInfo, null, options, request);
      }
      /// <summary>
      ///============Company==============
      ///获取Company所有公司账号信息的字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyDicList GetCompanyDic(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Company==============
      ///获取Company所有公司账号信息的字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyDicList GetCompanyDic(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyDic, null, options, request);
      }
      /// <summary>
      ///============Company==============
      ///获取Company所有公司账号信息的字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyDicList> GetCompanyDicAsync(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Company==============
      ///获取Company所有公司账号信息的字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyDicList> GetCompanyDicAsync(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyDic, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为comNameCn,comNameEn,comIsDelete,comIsVerify）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyList GetCompanyList(global::GrpcMembersService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为comNameCn,comNameEn,comIsDelete,comIsVerify）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyList GetCompanyList(global::GrpcMembersService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为comNameCn,comNameEn,comIsDelete,comIsVerify）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyList> GetCompanyListAsync(global::GrpcMembersService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为comNameCn,comNameEn,comIsDelete,comIsVerify）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyList> GetCompanyListAsync(global::GrpcMembersService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyList, null, options, request);
      }
      /// <summary>
      ///在创建公司合同之前根据账号名和公司名获取用户列表（SNEC后台管理员使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyList GetComAccountListByMemberSearch(global::GrpcMembersService.MemberSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetComAccountListByMemberSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///在创建公司合同之前根据账号名和公司名获取用户列表（SNEC后台管理员使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyList GetComAccountListByMemberSearch(global::GrpcMembersService.MemberSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetComAccountListByMemberSearch, null, options, request);
      }
      /// <summary>
      ///在创建公司合同之前根据账号名和公司名获取用户列表（SNEC后台管理员使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyList> GetComAccountListByMemberSearchAsync(global::GrpcMembersService.MemberSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetComAccountListByMemberSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///在创建公司合同之前根据账号名和公司名获取用户列表（SNEC后台管理员使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyList> GetComAccountListByMemberSearchAsync(global::GrpcMembersService.MemberSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetComAccountListByMemberSearch, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内companyName字段精准查找Company对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyStruct GetCompanyByCompanyName(global::GrpcMembersService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyByCompanyName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内companyName字段精准查找Company对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyStruct GetCompanyByCompanyName(global::GrpcMembersService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyByCompanyName, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内companyName字段精准查找Company对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyStruct> GetCompanyByCompanyNameAsync(global::GrpcMembersService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyByCompanyNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内companyName字段精准查找Company对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyStruct> GetCompanyByCompanyNameAsync(global::GrpcMembersService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyByCompanyName, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内comNameCn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.BoolReply IsExitCompanyCn(global::GrpcMembersService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsExitCompanyCn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内comNameCn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.BoolReply IsExitCompanyCn(global::GrpcMembersService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsExitCompanyCn, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内comNameCn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.BoolReply> IsExitCompanyCnAsync(global::GrpcMembersService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsExitCompanyCnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内comNameCn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.BoolReply> IsExitCompanyCnAsync(global::GrpcMembersService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsExitCompanyCn, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内comNameEn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.BoolReply IsExitCompanyEn(global::GrpcMembersService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsExitCompanyEn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内comNameEn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.BoolReply IsExitCompanyEn(global::GrpcMembersService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsExitCompanyEn, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内comNameEn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.BoolReply> IsExitCompanyEnAsync(global::GrpcMembersService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsExitCompanyEnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内comNameEn字段验证公司是否已存在
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.BoolReply> IsExitCompanyEnAsync(global::GrpcMembersService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsExitCompanyEn, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyStruct GetCompanyById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyStruct GetCompanyById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyById, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyStruct> GetCompanyByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyStruct> GetCompanyByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyById, null, options, request);
      }
      /// <summary>
      ///客户自己创建Company单个对象（客户自己申请为公司账户时使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReplyForCreateOther CreateCompanyInfo(global::GrpcMembersService.CompanyStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///客户自己创建Company单个对象（客户自己申请为公司账户时使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReplyForCreateOther CreateCompanyInfo(global::GrpcMembersService.CompanyStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCompanyInfo, null, options, request);
      }
      /// <summary>
      ///客户自己创建Company单个对象（客户自己申请为公司账户时使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReplyForCreateOther> CreateCompanyInfoAsync(global::GrpcMembersService.CompanyStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///客户自己创建Company单个对象（客户自己申请为公司账户时使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReplyForCreateOther> CreateCompanyInfoAsync(global::GrpcMembersService.CompanyStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCompanyInfo, null, options, request);
      }
      /// <summary>
      ///snec后台管理创建Company单个对象（snec后台管理人员创建公司账户时使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReplyForCreateOther CreateCompanyInfoForSnecAdmin(global::GrpcMembersService.CompanyStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyInfoForSnecAdmin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///snec后台管理创建Company单个对象（snec后台管理人员创建公司账户时使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReplyForCreateOther CreateCompanyInfoForSnecAdmin(global::GrpcMembersService.CompanyStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCompanyInfoForSnecAdmin, null, options, request);
      }
      /// <summary>
      ///snec后台管理创建Company单个对象（snec后台管理人员创建公司账户时使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReplyForCreateOther> CreateCompanyInfoForSnecAdminAsync(global::GrpcMembersService.CompanyStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyInfoForSnecAdminAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///snec后台管理创建Company单个对象（snec后台管理人员创建公司账户时使用）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReplyForCreateOther> CreateCompanyInfoForSnecAdminAsync(global::GrpcMembersService.CompanyStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCompanyInfoForSnecAdmin, null, options, request);
      }
      /// <summary>
      ///修改Company单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateCompanyInfo(global::GrpcMembersService.CompanyStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Company单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateCompanyInfo(global::GrpcMembersService.CompanyStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCompanyInfo, null, options, request);
      }
      /// <summary>
      ///修改Company单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateCompanyInfoAsync(global::GrpcMembersService.CompanyStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Company单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateCompanyInfoAsync(global::GrpcMembersService.CompanyStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCompanyInfo, null, options, request);
      }
      /// <summary>
      ///修改Company表中MemberPK，传SearchStruct内companyPk和memberPk（更换公司管理员）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateCompanyManagerByMemberPK(global::GrpcMembersService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyManagerByMemberPK(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Company表中MemberPK，传SearchStruct内companyPk和memberPk（更换公司管理员）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateCompanyManagerByMemberPK(global::GrpcMembersService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCompanyManagerByMemberPK, null, options, request);
      }
      /// <summary>
      ///修改Company表中MemberPK，传SearchStruct内companyPk和memberPk（更换公司管理员）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateCompanyManagerByMemberPKAsync(global::GrpcMembersService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyManagerByMemberPKAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Company表中MemberPK，传SearchStruct内companyPk和memberPk（更换公司管理员）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateCompanyManagerByMemberPKAsync(global::GrpcMembersService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCompanyManagerByMemberPK, null, options, request);
      }
      /// <summary>
      ///删除Company单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteCompanyById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Company单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteCompanyById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCompanyById, null, options, request);
      }
      /// <summary>
      ///删除Company单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteCompanyByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Company单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteCompanyByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCompanyById, null, options, request);
      }
      /// <summary>
      ///删除Company多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteCompanyByList(global::GrpcMembersService.ComnpanyIdList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyByList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Company多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteCompanyByList(global::GrpcMembersService.ComnpanyIdList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCompanyByList, null, options, request);
      }
      /// <summary>
      ///删除Company多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteCompanyByListAsync(global::GrpcMembersService.ComnpanyIdList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyByListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Company多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteCompanyByListAsync(global::GrpcMembersService.ComnpanyIdList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCompanyByList, null, options, request);
      }
      /// <summary>
      ///审核账号是否成为公司账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply VerifyComAccount(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyComAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///审核账号是否成为公司账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply VerifyComAccount(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyComAccount, null, options, request);
      }
      /// <summary>
      ///审核账号是否成为公司账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> VerifyComAccountAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyComAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///审核账号是否成为公司账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> VerifyComAccountAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyComAccount, null, options, request);
      }
      /// <summary>
      ///============Source==============
      ///获取Source字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.SourceDicList GetSourceDic(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSourceDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Source==============
      ///获取Source字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.SourceDicList GetSourceDic(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSourceDic, null, options, request);
      }
      /// <summary>
      ///============Source==============
      ///获取Source字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.SourceDicList> GetSourceDicAsync(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSourceDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Source==============
      ///获取Source字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.SourceDicList> GetSourceDicAsync(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSourceDic, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.SourceList GetSourceList(global::GrpcMembersService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSourceList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.SourceList GetSourceList(global::GrpcMembersService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSourceList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.SourceList> GetSourceListAsync(global::GrpcMembersService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSourceListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.SourceList> GetSourceListAsync(global::GrpcMembersService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSourceList, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.SourceStruct GetSourceById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSourceById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.SourceStruct GetSourceById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSourceById, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.SourceStruct> GetSourceByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSourceByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.SourceStruct> GetSourceByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSourceById, null, options, request);
      }
      /// <summary>
      ///创建Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateSourceInfo(global::GrpcMembersService.SourceStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSourceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateSourceInfo(global::GrpcMembersService.SourceStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSourceInfo, null, options, request);
      }
      /// <summary>
      ///创建Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateSourceInfoAsync(global::GrpcMembersService.SourceStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSourceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateSourceInfoAsync(global::GrpcMembersService.SourceStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSourceInfo, null, options, request);
      }
      /// <summary>
      ///修改Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateSourceInfo(global::GrpcMembersService.SourceStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSourceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateSourceInfo(global::GrpcMembersService.SourceStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSourceInfo, null, options, request);
      }
      /// <summary>
      ///修改Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateSourceInfoAsync(global::GrpcMembersService.SourceStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSourceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateSourceInfoAsync(global::GrpcMembersService.SourceStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSourceInfo, null, options, request);
      }
      /// <summary>
      ///删除Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteSourceById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSourceById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteSourceById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSourceById, null, options, request);
      }
      /// <summary>
      ///删除Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteSourceByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSourceByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Source单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteSourceByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSourceById, null, options, request);
      }
      /// <summary>
      ///============IndustryType==============
      ///获取IndustryType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.IndustryTypeDicList GetIndustryTypeDic(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndustryTypeDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============IndustryType==============
      ///获取IndustryType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.IndustryTypeDicList GetIndustryTypeDic(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIndustryTypeDic, null, options, request);
      }
      /// <summary>
      ///============IndustryType==============
      ///获取IndustryType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.IndustryTypeDicList> GetIndustryTypeDicAsync(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndustryTypeDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============IndustryType==============
      ///获取IndustryType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.IndustryTypeDicList> GetIndustryTypeDicAsync(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIndustryTypeDic, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.IndustryTypeList GetIndustryTypeList(global::GrpcMembersService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndustryTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.IndustryTypeList GetIndustryTypeList(global::GrpcMembersService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIndustryTypeList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.IndustryTypeList> GetIndustryTypeListAsync(global::GrpcMembersService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndustryTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.IndustryTypeList> GetIndustryTypeListAsync(global::GrpcMembersService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIndustryTypeList, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.IndustryTypeStruct GetIndustryTypeById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndustryTypeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.IndustryTypeStruct GetIndustryTypeById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIndustryTypeById, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.IndustryTypeStruct> GetIndustryTypeByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndustryTypeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.IndustryTypeStruct> GetIndustryTypeByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIndustryTypeById, null, options, request);
      }
      /// <summary>
      ///创建IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateIndustryTypeInfo(global::GrpcMembersService.IndustryTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIndustryTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateIndustryTypeInfo(global::GrpcMembersService.IndustryTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateIndustryTypeInfo, null, options, request);
      }
      /// <summary>
      ///创建IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateIndustryTypeInfoAsync(global::GrpcMembersService.IndustryTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIndustryTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateIndustryTypeInfoAsync(global::GrpcMembersService.IndustryTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateIndustryTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateIndustryTypeInfo(global::GrpcMembersService.IndustryTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIndustryTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateIndustryTypeInfo(global::GrpcMembersService.IndustryTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateIndustryTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateIndustryTypeInfoAsync(global::GrpcMembersService.IndustryTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIndustryTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateIndustryTypeInfoAsync(global::GrpcMembersService.IndustryTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateIndustryTypeInfo, null, options, request);
      }
      /// <summary>
      ///删除IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteIndustryTypeById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIndustryTypeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteIndustryTypeById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteIndustryTypeById, null, options, request);
      }
      /// <summary>
      ///删除IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteIndustryTypeByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIndustryTypeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除IndustryType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteIndustryTypeByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteIndustryTypeById, null, options, request);
      }
      /// <summary>
      ///============CompanyType==============
      ///获取CompanyType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyTypeDicList GetCompanyTypeDic(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyTypeDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============CompanyType==============
      ///获取CompanyType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyTypeDicList GetCompanyTypeDic(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyTypeDic, null, options, request);
      }
      /// <summary>
      ///============CompanyType==============
      ///获取CompanyType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyTypeDicList> GetCompanyTypeDicAsync(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyTypeDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============CompanyType==============
      ///获取CompanyType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyTypeDicList> GetCompanyTypeDicAsync(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyTypeDic, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyTypeList GetCompanyTypeList(global::GrpcMembersService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyTypeList GetCompanyTypeList(global::GrpcMembersService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyTypeList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyTypeList> GetCompanyTypeListAsync(global::GrpcMembersService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyTypeList> GetCompanyTypeListAsync(global::GrpcMembersService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyTypeList, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyTypeStruct GetCompanyTypeById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyTypeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CompanyTypeStruct GetCompanyTypeById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyTypeById, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyTypeStruct> GetCompanyTypeByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyTypeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CompanyTypeStruct> GetCompanyTypeByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyTypeById, null, options, request);
      }
      /// <summary>
      ///创建CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateCompanyTypeInfo(global::GrpcMembersService.CompanyTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateCompanyTypeInfo(global::GrpcMembersService.CompanyTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCompanyTypeInfo, null, options, request);
      }
      /// <summary>
      ///创建CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateCompanyTypeInfoAsync(global::GrpcMembersService.CompanyTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateCompanyTypeInfoAsync(global::GrpcMembersService.CompanyTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCompanyTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateCompanyTypeInfo(global::GrpcMembersService.CompanyTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateCompanyTypeInfo(global::GrpcMembersService.CompanyTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCompanyTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateCompanyTypeInfoAsync(global::GrpcMembersService.CompanyTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateCompanyTypeInfoAsync(global::GrpcMembersService.CompanyTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCompanyTypeInfo, null, options, request);
      }
      /// <summary>
      ///删除CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteCompanyTypeById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyTypeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteCompanyTypeById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCompanyTypeById, null, options, request);
      }
      /// <summary>
      ///删除CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteCompanyTypeByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyTypeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteCompanyTypeByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCompanyTypeById, null, options, request);
      }
      /// <summary>
      ///============Area==============
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.AreaList GetAreasList(global::GrpcMembersService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAreasList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Area==============
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.AreaList GetAreasList(global::GrpcMembersService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAreasList, null, options, request);
      }
      /// <summary>
      ///============Area==============
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.AreaList> GetAreasListAsync(global::GrpcMembersService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAreasListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Area==============
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.AreaList> GetAreasListAsync(global::GrpcMembersService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAreasList, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.AreaStruct GetAreaById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAreaById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.AreaStruct GetAreaById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAreaById, null, options, request);
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.AreaStruct> GetAreaByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAreaByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取栏目
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.AreaStruct> GetAreaByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAreaById, null, options, request);
      }
      /// <summary>
      ///创建Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateAreaInfo(global::GrpcMembersService.AreaStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAreaInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply CreateAreaInfo(global::GrpcMembersService.AreaStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAreaInfo, null, options, request);
      }
      /// <summary>
      ///创建Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateAreaInfoAsync(global::GrpcMembersService.AreaStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAreaInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> CreateAreaInfoAsync(global::GrpcMembersService.AreaStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAreaInfo, null, options, request);
      }
      /// <summary>
      ///修改Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateAreaInfo(global::GrpcMembersService.AreaStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAreaInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply UpdateAreaInfo(global::GrpcMembersService.AreaStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAreaInfo, null, options, request);
      }
      /// <summary>
      ///修改Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateAreaInfoAsync(global::GrpcMembersService.AreaStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAreaInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> UpdateAreaInfoAsync(global::GrpcMembersService.AreaStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAreaInfo, null, options, request);
      }
      /// <summary>
      ///删除Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteAreaById(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAreaById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.ModifyReply DeleteAreaById(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAreaById, null, options, request);
      }
      /// <summary>
      ///删除Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteAreaByIdAsync(global::GrpcMembersService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAreaByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除Area单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.ModifyReply> DeleteAreaByIdAsync(global::GrpcMembersService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAreaById, null, options, request);
      }
      /// <summary>
      ///============Source==============
      ///获取Country字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CountryDicList GetCountryDic(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountryDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Source==============
      ///获取Country字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMembersService.CountryDicList GetCountryDic(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCountryDic, null, options, request);
      }
      /// <summary>
      ///============Source==============
      ///获取Country字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CountryDicList> GetCountryDicAsync(global::GrpcMembersService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountryDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============Source==============
      ///获取Country字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMembersService.CountryDicList> GetCountryDicAsync(global::GrpcMembersService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCountryDic, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MemberServiceToGrpcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MemberServiceToGrpcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MemberServiceToGrpcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetSum, serviceImpl.GetSum)
          .AddMethod(__Method_LoginToMember, serviceImpl.LoginToMember)
          .AddMethod(__Method_LoginToMemContract, serviceImpl.LoginToMemContract)
          .AddMethod(__Method_CreateMemberContractInfo, serviceImpl.CreateMemberContractInfo)
          .AddMethod(__Method_GetMemContractByMemContract, serviceImpl.GetMemContractByMemContract)
          .AddMethod(__Method_DeleteMemContractByMemContract, serviceImpl.DeleteMemContractByMemContract)
          .AddMethod(__Method_GetMemberList, serviceImpl.GetMemberList)
          .AddMethod(__Method_GetMemberListByCompanyPK, serviceImpl.GetMemberListByCompanyPK)
          .AddMethod(__Method_GetMemberListByMemberSearchToAll, serviceImpl.GetMemberListByMemberSearchToAll)
          .AddMethod(__Method_GetMemberListByMemberSearch, serviceImpl.GetMemberListByMemberSearch)
          .AddMethod(__Method_GetMemberById, serviceImpl.GetMemberById)
          .AddMethod(__Method_CreateMemberAccountInfo, serviceImpl.CreateMemberAccountInfo)
          .AddMethod(__Method_CreateMemberInfo, serviceImpl.CreateMemberInfo)
          .AddMethod(__Method_UpdateMemberInfo, serviceImpl.UpdateMemberInfo)
          .AddMethod(__Method_DeleteMemberById, serviceImpl.DeleteMemberById)
          .AddMethod(__Method_DeleteMemberByList, serviceImpl.DeleteMemberByList)
          .AddMethod(__Method_ActivateMemAccountByEmail, serviceImpl.ActivateMemAccountByEmail)
          .AddMethod(__Method_ActivateMemAccountByMobile, serviceImpl.ActivateMemAccountByMobile)
          .AddMethod(__Method_ResetMemPwdInfo, serviceImpl.ResetMemPwdInfo)
          .AddMethod(__Method_GetCompanyDic, serviceImpl.GetCompanyDic)
          .AddMethod(__Method_GetCompanyList, serviceImpl.GetCompanyList)
          .AddMethod(__Method_GetComAccountListByMemberSearch, serviceImpl.GetComAccountListByMemberSearch)
          .AddMethod(__Method_GetCompanyByCompanyName, serviceImpl.GetCompanyByCompanyName)
          .AddMethod(__Method_IsExitCompanyCn, serviceImpl.IsExitCompanyCn)
          .AddMethod(__Method_IsExitCompanyEn, serviceImpl.IsExitCompanyEn)
          .AddMethod(__Method_GetCompanyById, serviceImpl.GetCompanyById)
          .AddMethod(__Method_CreateCompanyInfo, serviceImpl.CreateCompanyInfo)
          .AddMethod(__Method_CreateCompanyInfoForSnecAdmin, serviceImpl.CreateCompanyInfoForSnecAdmin)
          .AddMethod(__Method_UpdateCompanyInfo, serviceImpl.UpdateCompanyInfo)
          .AddMethod(__Method_UpdateCompanyManagerByMemberPK, serviceImpl.UpdateCompanyManagerByMemberPK)
          .AddMethod(__Method_DeleteCompanyById, serviceImpl.DeleteCompanyById)
          .AddMethod(__Method_DeleteCompanyByList, serviceImpl.DeleteCompanyByList)
          .AddMethod(__Method_VerifyComAccount, serviceImpl.VerifyComAccount)
          .AddMethod(__Method_GetSourceDic, serviceImpl.GetSourceDic)
          .AddMethod(__Method_GetSourceList, serviceImpl.GetSourceList)
          .AddMethod(__Method_GetSourceById, serviceImpl.GetSourceById)
          .AddMethod(__Method_CreateSourceInfo, serviceImpl.CreateSourceInfo)
          .AddMethod(__Method_UpdateSourceInfo, serviceImpl.UpdateSourceInfo)
          .AddMethod(__Method_DeleteSourceById, serviceImpl.DeleteSourceById)
          .AddMethod(__Method_GetIndustryTypeDic, serviceImpl.GetIndustryTypeDic)
          .AddMethod(__Method_GetIndustryTypeList, serviceImpl.GetIndustryTypeList)
          .AddMethod(__Method_GetIndustryTypeById, serviceImpl.GetIndustryTypeById)
          .AddMethod(__Method_CreateIndustryTypeInfo, serviceImpl.CreateIndustryTypeInfo)
          .AddMethod(__Method_UpdateIndustryTypeInfo, serviceImpl.UpdateIndustryTypeInfo)
          .AddMethod(__Method_DeleteIndustryTypeById, serviceImpl.DeleteIndustryTypeById)
          .AddMethod(__Method_GetCompanyTypeDic, serviceImpl.GetCompanyTypeDic)
          .AddMethod(__Method_GetCompanyTypeList, serviceImpl.GetCompanyTypeList)
          .AddMethod(__Method_GetCompanyTypeById, serviceImpl.GetCompanyTypeById)
          .AddMethod(__Method_CreateCompanyTypeInfo, serviceImpl.CreateCompanyTypeInfo)
          .AddMethod(__Method_UpdateCompanyTypeInfo, serviceImpl.UpdateCompanyTypeInfo)
          .AddMethod(__Method_DeleteCompanyTypeById, serviceImpl.DeleteCompanyTypeById)
          .AddMethod(__Method_GetAreasList, serviceImpl.GetAreasList)
          .AddMethod(__Method_GetAreaById, serviceImpl.GetAreaById)
          .AddMethod(__Method_CreateAreaInfo, serviceImpl.CreateAreaInfo)
          .AddMethod(__Method_UpdateAreaInfo, serviceImpl.UpdateAreaInfo)
          .AddMethod(__Method_DeleteAreaById, serviceImpl.DeleteAreaById)
          .AddMethod(__Method_GetCountryDic, serviceImpl.GetCountryDic).Build();
    }

  }
}
#endregion
