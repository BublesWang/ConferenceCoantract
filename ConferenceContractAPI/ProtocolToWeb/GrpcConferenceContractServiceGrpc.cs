// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GrpcConferenceContractService.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcConferenceContractService {
  /// <summary>
  ///Vsersion_ConferenceContractServiceToGrpc_20200925_0.1
  /// tag&lt;gRPC>
  /// host&lt;conferencecontract.api>
  /// port&lt;40001> 
  /// </summary>
  public static partial class ConferenceContractServiceToGrpc
  {
    static readonly string __ServiceName = "GrpcConferenceContractService.ConferenceContractServiceToGrpc";

    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PaginationRequestSearch> __Marshaller_PaginationRequestSearch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PaginationRequestSearch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ConferenceContractList> __Marshaller_ConferenceContractList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ConferenceContractList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.IdRequest> __Marshaller_IdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.IdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.SearchStruct> __Marshaller_SearchStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.SearchStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ConferenceContractStruct> __Marshaller_ConferenceContractStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ConferenceContractStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ModifyReplyForCreateOther> __Marshaller_ModifyReplyForCreateOther = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ModifyReplyForCreateOther.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ModifyReply> __Marshaller_ModifyReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ModifyReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ConferenceContractCidList> __Marshaller_ConferenceContractCidList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ConferenceContractCidList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CompanyContractList> __Marshaller_CompanyContractList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CompanyContractList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CompanyContractStruct> __Marshaller_CompanyContractStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CompanyContractStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct> __Marshaller_ModifyCCPCOwerInfoStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CompanyContractCidList> __Marshaller_CompanyContractCidList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CompanyContractCidList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PersonContractList> __Marshaller_PersonContractList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PersonContractList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PersonContractStruct> __Marshaller_PersonContractStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PersonContractStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ModifyRequest> __Marshaller_ModifyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ModifyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CheckInRequest> __Marshaller_CheckInRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CheckInRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PersonContractPidList> __Marshaller_PersonContractPidList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PersonContractPidList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PersonContractPCNoRequest> __Marshaller_PersonContractPCNoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PersonContractPCNoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.IdsRequest> __Marshaller_IdsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.IdsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CompanyServicePackList> __Marshaller_CompanyServicePackList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CompanyServicePackList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CompanyServicePackVMStruct> __Marshaller_CompanyServicePackVMStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CompanyServicePackVMStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ExtraServiceList> __Marshaller_ExtraServiceList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ExtraServiceList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ExtraServiceVMStruct> __Marshaller_ExtraServiceVMStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ExtraServiceVMStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ServicePackList> __Marshaller_ServicePackList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ServicePackList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ServicePackVMStruct> __Marshaller_ServicePackVMStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ServicePackVMStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ResultReply> __Marshaller_ResultReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ResultReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ContractTypeList> __Marshaller_ContractTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ContractTypeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PaginationRequest> __Marshaller_PaginationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PaginationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ContractTypeStruct> __Marshaller_ContractTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ContractTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CCNumberConfigList> __Marshaller_CCNumberConfigList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CCNumberConfigList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CCNumberConfigStruct> __Marshaller_CCNumberConfigStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CCNumberConfigStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.DelegateServicePackDiscountList> __Marshaller_DelegateServicePackDiscountList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.DelegateServicePackDiscountList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct> __Marshaller_DelegateServicePackDiscountListStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.DelegateServicePackDiscountStruct> __Marshaller_DelegateServicePackDiscountStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.DelegateServicePackDiscountStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList> __Marshaller_DelegateServicePackDiscountForConferenceContractList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct> __Marshaller_DelegateServicePackDiscountForConferenceContractListStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct> __Marshaller_DelegateServicePackDiscountForConferenceContractStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ContractStatusDicForDicList> __Marshaller_ContractStatusDicForDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ContractStatusDicForDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ContractStatusDicList> __Marshaller_ContractStatusDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ContractStatusDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ContractStatusDicStruct> __Marshaller_ContractStatusDicStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ContractStatusDicStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.RemarkDicForDicList> __Marshaller_RemarkDicForDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.RemarkDicForDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.RemarkDicList> __Marshaller_RemarkDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.RemarkDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.RemarkDicStruct> __Marshaller_RemarkDicStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.RemarkDicStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PersonContractActivityMapList> __Marshaller_PersonContractActivityMapList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PersonContractActivityMapList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate> __Marshaller_PersonContractActivityMapListToUpdate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ApplyConferenceList> __Marshaller_ApplyConferenceList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ApplyConferenceList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate> __Marshaller_ApplyConferenceListToCreateOrUpdate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.InviteLetterStruct> __Marshaller_InviteLetterStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.InviteLetterStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.TagTypeForDicList> __Marshaller_TagTypeForDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.TagTypeForDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CodeRequest> __Marshaller_CodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.TagTypeStruct> __Marshaller_TagTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.TagTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.YearConfigForDicList> __Marshaller_YearConfigForDicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.YearConfigForDicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.YearConfigStruct> __Marshaller_YearConfigStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.YearConfigStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ConferenceOnsiteList> __Marshaller_ConferenceOnsiteList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ConferenceOnsiteList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.IdIntRequest> __Marshaller_IdIntRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.IdIntRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ConferenceOnsiteStruct> __Marshaller_ConferenceOnsiteStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ConferenceOnsiteStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite> __Marshaller_ModifyReplyForConferenceOnsite = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.InviteCodeList> __Marshaller_InviteCodeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.InviteCodeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.InviteCodeCSPVMStruct> __Marshaller_InviteCodeCSPVMStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.InviteCodeCSPVMStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.InviteCodeStruct> __Marshaller_InviteCodeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.InviteCodeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.InviteCodeRecordList> __Marshaller_InviteCodeRecordList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.InviteCodeRecordList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.InviteCodeRecordStruct> __Marshaller_InviteCodeRecordStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.InviteCodeRecordStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.CompanyServicePackMapList> __Marshaller_CompanyServicePackMapList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.CompanyServicePackMapList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.ContractStatisticsList> __Marshaller_ContractStatisticsList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.ContractStatisticsList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.BoolReply> __Marshaller_BoolReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.BoolReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList> __Marshaller_PersonContractAndSessionConferenceIdList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ConferenceContractList> __Method_GetConferenceContractList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ConferenceContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceContractList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ConferenceContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ConferenceContractList> __Method_GetConferenceContractListByIsGive = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ConferenceContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceContractListByIsGive",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ConferenceContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ConferenceContractList> __Method_GetConferenceContractListByIsGiveWithAllContractStatusCode = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ConferenceContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceContractListByIsGiveWithAllContractStatusCode",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ConferenceContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ConferenceContractList> __Method_GetConferenceContractByCompanyIdList = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ConferenceContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceContractByCompanyIdList",
        __Marshaller_IdRequest,
        __Marshaller_ConferenceContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ConferenceContractList> __Method_GetConferenceContractByCompanyIdAndYearList = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ConferenceContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceContractByCompanyIdAndYearList",
        __Marshaller_SearchStruct,
        __Marshaller_ConferenceContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ConferenceContractStruct> __Method_GetConferenceContractById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ConferenceContractStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceContractById",
        __Marshaller_IdRequest,
        __Marshaller_ConferenceContractStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceContractStruct, global::GrpcConferenceContractService.ModifyReplyForCreateOther> __Method_CreateConferenceContractInfo = new grpc::Method<global::GrpcConferenceContractService.ConferenceContractStruct, global::GrpcConferenceContractService.ModifyReplyForCreateOther>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateConferenceContractInfo",
        __Marshaller_ConferenceContractStruct,
        __Marshaller_ModifyReplyForCreateOther);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateConferenceContractInfo = new grpc::Method<global::GrpcConferenceContractService.ConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateConferenceContractInfo",
        __Marshaller_ConferenceContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyConferenceContractByOwer = new grpc::Method<global::GrpcConferenceContractService.ConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyConferenceContractByOwer",
        __Marshaller_ConferenceContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyConferenceContractPaymentStatusCode = new grpc::Method<global::GrpcConferenceContractService.ConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyConferenceContractPaymentStatusCode",
        __Marshaller_ConferenceContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceContractCidList, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyConferenceContractIsSendEmail = new grpc::Method<global::GrpcConferenceContractService.ConferenceContractCidList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyConferenceContractIsSendEmail",
        __Marshaller_ConferenceContractCidList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyModifyPermissionById = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyModifyPermissionById",
        __Marshaller_SearchStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteConferenceContractById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConferenceContractById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceContractCidList, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteConferenceContractByList = new grpc::Method<global::GrpcConferenceContractService.ConferenceContractCidList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConferenceContractByList",
        __Marshaller_ConferenceContractCidList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceContractCidList, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteConCAndCCAndPCByConIdList = new grpc::Method<global::GrpcConferenceContractService.ConferenceContractCidList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConCAndCCAndPCByConIdList",
        __Marshaller_ConferenceContractCidList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.CompanyContractList> __Method_GetCompanyContractList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.CompanyContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyContractList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_CompanyContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyContractList> __Method_GetCompanyContractByConferenceContractIdList = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyContractByConferenceContractIdList",
        __Marshaller_IdRequest,
        __Marshaller_CompanyContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyContractList> __Method_GetCompanyContractByCompanyIdList = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyContractByCompanyIdList",
        __Marshaller_IdRequest,
        __Marshaller_CompanyContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyContractStruct> __Method_GetCompanyContractById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyContractStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyContractById",
        __Marshaller_IdRequest,
        __Marshaller_CompanyContractStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.CompanyContractStruct, global::GrpcConferenceContractService.ModifyReplyForCreateOther> __Method_CreateCompanyContractInfo = new grpc::Method<global::GrpcConferenceContractService.CompanyContractStruct, global::GrpcConferenceContractService.ModifyReplyForCreateOther>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCompanyContractInfo",
        __Marshaller_CompanyContractStruct,
        __Marshaller_ModifyReplyForCreateOther);

    static readonly grpc::Method<global::GrpcConferenceContractService.CompanyContractStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateCompanyContractInfo = new grpc::Method<global::GrpcConferenceContractService.CompanyContractStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCompanyContractInfo",
        __Marshaller_CompanyContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.CompanyContractStruct, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyMaxContractNumber = new grpc::Method<global::GrpcConferenceContractService.CompanyContractStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyMaxContractNumber",
        __Marshaller_CompanyContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyCCPCOwer = new grpc::Method<global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyCCPCOwer",
        __Marshaller_ModifyCCPCOwerInfoStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteCompanyContractById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCompanyContractById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReplyForCreateOther> __Method_RemoveCompanyContractIfPersonContractEmpty = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReplyForCreateOther>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveCompanyContractIfPersonContractEmpty",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReplyForCreateOther);

    static readonly grpc::Method<global::GrpcConferenceContractService.CompanyContractCidList, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteCompanyContractByList = new grpc::Method<global::GrpcConferenceContractService.CompanyContractCidList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCompanyContractByList",
        __Marshaller_CompanyContractCidList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.CompanyContractCidList, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteCCAndPCByCidList = new grpc::Method<global::GrpcConferenceContractService.CompanyContractCidList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCCAndPCByCidList",
        __Marshaller_CompanyContractCidList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList> __Method_GetPersonContractList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_PersonContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList> __Method_GetPersonContractByContractIdList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractByContractIdList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_PersonContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList> __Method_GetPersonContractByNewList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractByNewList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_PersonContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList> __Method_GetPersonContractByMemberPKList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractByMemberPKList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_PersonContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractList> __Method_GetPersonContractByMemberPKListWithNoPagination = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractByMemberPKListWithNoPagination",
        __Marshaller_SearchStruct,
        __Marshaller_PersonContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.PersonContractStruct> __Method_GetPersonContractById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.PersonContractStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractById",
        __Marshaller_IdRequest,
        __Marshaller_PersonContractStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractStruct> __Method_GetPersonContractByPersonContractNumber = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractByPersonContractNumber",
        __Marshaller_SearchStruct,
        __Marshaller_PersonContractStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.PersonContractStruct, global::GrpcConferenceContractService.ModifyReplyForCreateOther> __Method_CreatePersonContractInfo = new grpc::Method<global::GrpcConferenceContractService.PersonContractStruct, global::GrpcConferenceContractService.ModifyReplyForCreateOther>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePersonContractInfo",
        __Marshaller_PersonContractStruct,
        __Marshaller_ModifyReplyForCreateOther);

    static readonly grpc::Method<global::GrpcConferenceContractService.PersonContractStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdatePersonContractInfo = new grpc::Method<global::GrpcConferenceContractService.PersonContractStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePersonContractInfo",
        __Marshaller_PersonContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ModifyRequest, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyPersonContractByIsCheckIn = new grpc::Method<global::GrpcConferenceContractService.ModifyRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyPersonContractByIsCheckIn",
        __Marshaller_ModifyRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.CheckInRequest, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyPersonContractIsCheckInByIdList = new grpc::Method<global::GrpcConferenceContractService.CheckInRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyPersonContractIsCheckInByIdList",
        __Marshaller_CheckInRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PersonContractPidList, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyPersonContractIsSendEmail = new grpc::Method<global::GrpcConferenceContractService.PersonContractPidList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyPersonContractIsSendEmail",
        __Marshaller_PersonContractPidList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PersonContractPCNoRequest, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyPersonContractIsFianceRecord = new grpc::Method<global::GrpcConferenceContractService.PersonContractPCNoRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyPersonContractIsFianceRecord",
        __Marshaller_PersonContractPCNoRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyPersonContractIsPrintByOwerid = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyPersonContractIsPrintByOwerid",
        __Marshaller_SearchStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdsRequest, global::GrpcConferenceContractService.ModifyReply> __Method_ModifyPersonContractIsPrintByids = new grpc::Method<global::GrpcConferenceContractService.IdsRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyPersonContractIsPrintByids",
        __Marshaller_IdsRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeletePersonContractById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePersonContractById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PersonContractPidList, global::GrpcConferenceContractService.ModifyReply> __Method_DeletePersonContractByList = new grpc::Method<global::GrpcConferenceContractService.PersonContractPidList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePersonContractByList",
        __Marshaller_PersonContractPidList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeletePersonContractByIdForWeb = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePersonContractByIdForWeb",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.CompanyServicePackList> __Method_GetCompanyServicePackDic = new grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.CompanyServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyServicePackDic",
        __Marshaller_Empty,
        __Marshaller_CompanyServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.CompanyServicePackList> __Method_GetCompanyServicePackDicByYear = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.CompanyServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyServicePackDicByYear",
        __Marshaller_SearchStruct,
        __Marshaller_CompanyServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.CompanyServicePackList> __Method_GetCompanyServicePackListByIsShownOnFront = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.CompanyServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyServicePackListByIsShownOnFront",
        __Marshaller_SearchStruct,
        __Marshaller_CompanyServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.CompanyServicePackList> __Method_GetCompanyServicePackList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.CompanyServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyServicePackList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_CompanyServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyServicePackList> __Method_GetCompanyServicePackListByContractTypeId = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyServicePackListByContractTypeId",
        __Marshaller_IdRequest,
        __Marshaller_CompanyServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.CompanyServicePackList> __Method_GetCompanyServicePackListForLunchOrDinner = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.CompanyServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyServicePackListForLunchOrDinner",
        __Marshaller_SearchStruct,
        __Marshaller_CompanyServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyServicePackVMStruct> __Method_GetCompanyServicePackById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CompanyServicePackVMStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyServicePackById",
        __Marshaller_IdRequest,
        __Marshaller_CompanyServicePackVMStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.CompanyServicePackVMStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateCompanyServicePackInfo = new grpc::Method<global::GrpcConferenceContractService.CompanyServicePackVMStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCompanyServicePackInfo",
        __Marshaller_CompanyServicePackVMStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.CompanyServicePackVMStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateCompanyServicePackInfo = new grpc::Method<global::GrpcConferenceContractService.CompanyServicePackVMStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCompanyServicePackInfo",
        __Marshaller_CompanyServicePackVMStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteCompanyServicePackById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCompanyServicePackById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.CompanyServicePackVMStruct> __Method_GetCompanyServicePackVMByPersonContractNumber = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.CompanyServicePackVMStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyServicePackVMByPersonContractNumber",
        __Marshaller_SearchStruct,
        __Marshaller_CompanyServicePackVMStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ExtraServiceList> __Method_GetExtraServiceList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ExtraServiceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExtraServiceList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ExtraServiceList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ExtraServiceVMStruct> __Method_GetExtraServiceById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ExtraServiceVMStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExtraServiceById",
        __Marshaller_IdRequest,
        __Marshaller_ExtraServiceVMStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.ExtraServiceVMStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateExtraServiceInfo = new grpc::Method<global::GrpcConferenceContractService.ExtraServiceVMStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateExtraServiceInfo",
        __Marshaller_ExtraServiceVMStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ExtraServiceVMStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateExtraServiceInfo = new grpc::Method<global::GrpcConferenceContractService.ExtraServiceVMStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateExtraServiceInfo",
        __Marshaller_ExtraServiceVMStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteExtraServiceById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteExtraServiceById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.ServicePackList> __Method_GetServicePackListAll = new grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.ServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServicePackListAll",
        __Marshaller_Empty,
        __Marshaller_ServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ServicePackList> __Method_GetServicePackByConferenceIdList = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServicePackByConferenceIdList",
        __Marshaller_IdRequest,
        __Marshaller_ServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ServicePackList> __Method_GetServicePackList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ServicePackList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServicePackList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ServicePackList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ServicePackVMStruct> __Method_GetServicePackById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ServicePackVMStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServicePackById",
        __Marshaller_IdRequest,
        __Marshaller_ServicePackVMStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.ServicePackVMStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateServicePackInfo = new grpc::Method<global::GrpcConferenceContractService.ServicePackVMStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServicePackInfo",
        __Marshaller_ServicePackVMStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ServicePackVMStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateServicePackInfo = new grpc::Method<global::GrpcConferenceContractService.ServicePackVMStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateServicePackInfo",
        __Marshaller_ServicePackVMStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteServicePackById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServicePackById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ResultReply> __Method_IsCanDeleteAcitvity = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ResultReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsCanDeleteAcitvity",
        __Marshaller_IdRequest,
        __Marshaller_ResultReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ResultReply> __Method_IsExistSessionConferencdId = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ResultReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsExistSessionConferencdId",
        __Marshaller_SearchStruct,
        __Marshaller_ResultReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ModifyReply> __Method_RemoveSCBySessionConferencdId = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveSCBySessionConferencdId",
        __Marshaller_SearchStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.ContractTypeList> __Method_GetContractTypeDic = new grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.ContractTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractTypeDic",
        __Marshaller_Empty,
        __Marshaller_ContractTypeList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequest, global::GrpcConferenceContractService.ContractTypeList> __Method_GetContractTypeList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequest, global::GrpcConferenceContractService.ContractTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractTypeList",
        __Marshaller_PaginationRequest,
        __Marshaller_ContractTypeList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ContractTypeStruct> __Method_GetContractTypeById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ContractTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractTypeById",
        __Marshaller_IdRequest,
        __Marshaller_ContractTypeStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.ContractTypeStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateContractTypeInfo = new grpc::Method<global::GrpcConferenceContractService.ContractTypeStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateContractTypeInfo",
        __Marshaller_ContractTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ContractTypeStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateContractTypeInfo = new grpc::Method<global::GrpcConferenceContractService.ContractTypeStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateContractTypeInfo",
        __Marshaller_ContractTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteContractTypeById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteContractTypeById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.CCNumberConfigList> __Method_GetCCNumberConfigDic = new grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.CCNumberConfigList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCCNumberConfigDic",
        __Marshaller_Empty,
        __Marshaller_CCNumberConfigList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequest, global::GrpcConferenceContractService.CCNumberConfigList> __Method_GetCCNumberConfigList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequest, global::GrpcConferenceContractService.CCNumberConfigList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCCNumberConfigList",
        __Marshaller_PaginationRequest,
        __Marshaller_CCNumberConfigList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CCNumberConfigStruct> __Method_GetCCNumberConfigById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.CCNumberConfigStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCCNumberConfigById",
        __Marshaller_IdRequest,
        __Marshaller_CCNumberConfigStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.CCNumberConfigStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateCCNumberConfigInfo = new grpc::Method<global::GrpcConferenceContractService.CCNumberConfigStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCCNumberConfigInfo",
        __Marshaller_CCNumberConfigStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.CCNumberConfigStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateCCNumberConfigInfo = new grpc::Method<global::GrpcConferenceContractService.CCNumberConfigStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCCNumberConfigInfo",
        __Marshaller_CCNumberConfigStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteCCNumberConfigById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCCNumberConfigById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.DelegateServicePackDiscountList> __Method_GetDSPDList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.DelegateServicePackDiscountList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDSPDList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_DelegateServicePackDiscountList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct> __Method_GetDSPDById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDSPDById",
        __Marshaller_IdRequest,
        __Marshaller_DelegateServicePackDiscountListStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.DelegateServicePackDiscountStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateDSPDInfo = new grpc::Method<global::GrpcConferenceContractService.DelegateServicePackDiscountStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDSPDInfo",
        __Marshaller_DelegateServicePackDiscountStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.DelegateServicePackDiscountStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateDSPDInfo = new grpc::Method<global::GrpcConferenceContractService.DelegateServicePackDiscountStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDSPDInfo",
        __Marshaller_DelegateServicePackDiscountStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteDSPDById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDSPDById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList> __Method_GetDSPDFCCList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDSPDFCCList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_DelegateServicePackDiscountForConferenceContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct> __Method_GetDSPDFCCById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDSPDFCCById",
        __Marshaller_IdRequest,
        __Marshaller_DelegateServicePackDiscountForConferenceContractListStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateDSPDFCCInfo = new grpc::Method<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDSPDFCCInfo",
        __Marshaller_DelegateServicePackDiscountForConferenceContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateDSPDFCCInfo = new grpc::Method<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDSPDFCCInfo",
        __Marshaller_DelegateServicePackDiscountForConferenceContractStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteDSPDFCCById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDSPDFCCById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.ContractStatusDicForDicList> __Method_GetContractStatusDic = new grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.ContractStatusDicForDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractStatusDic",
        __Marshaller_Empty,
        __Marshaller_ContractStatusDicForDicList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequest, global::GrpcConferenceContractService.ContractStatusDicList> __Method_GetContractStatusDicList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequest, global::GrpcConferenceContractService.ContractStatusDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractStatusDicList",
        __Marshaller_PaginationRequest,
        __Marshaller_ContractStatusDicList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ContractStatusDicStruct> __Method_GetContractStatusDicById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ContractStatusDicStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractStatusDicById",
        __Marshaller_IdRequest,
        __Marshaller_ContractStatusDicStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.ContractStatusDicStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateContractStatusDicInfo = new grpc::Method<global::GrpcConferenceContractService.ContractStatusDicStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateContractStatusDicInfo",
        __Marshaller_ContractStatusDicStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.ContractStatusDicStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateContractStatusDicInfo = new grpc::Method<global::GrpcConferenceContractService.ContractStatusDicStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateContractStatusDicInfo",
        __Marshaller_ContractStatusDicStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteContractStatusDicById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteContractStatusDicById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.RemarkDicForDicList> __Method_GetRemarkDic = new grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.RemarkDicForDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRemarkDic",
        __Marshaller_Empty,
        __Marshaller_RemarkDicForDicList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequest, global::GrpcConferenceContractService.RemarkDicList> __Method_GetRemarkDicList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequest, global::GrpcConferenceContractService.RemarkDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRemarkDicList",
        __Marshaller_PaginationRequest,
        __Marshaller_RemarkDicList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.RemarkDicStruct> __Method_GetRemarkDicById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.RemarkDicStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRemarkDicById",
        __Marshaller_IdRequest,
        __Marshaller_RemarkDicStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.RemarkDicStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateRemarkDicInfo = new grpc::Method<global::GrpcConferenceContractService.RemarkDicStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRemarkDicInfo",
        __Marshaller_RemarkDicStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.RemarkDicStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateRemarkDicInfo = new grpc::Method<global::GrpcConferenceContractService.RemarkDicStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRemarkDicInfo",
        __Marshaller_RemarkDicStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteRemarkDicById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRemarkDicById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractActivityMapList> __Method_GetPersonContractActivityMapByMemberPKList = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractActivityMapList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractActivityMapByMemberPKList",
        __Marshaller_SearchStruct,
        __Marshaller_PersonContractActivityMapList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractActivityMapList> __Method_GetPersonContractActivityMapByActivityIdList = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractActivityMapList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractActivityMapByActivityIdList",
        __Marshaller_SearchStruct,
        __Marshaller_PersonContractActivityMapList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractActivityMapList> __Method_GetPersonContractActivityMapByPersonContractNumberList = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractActivityMapList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractActivityMapByPersonContractNumberList",
        __Marshaller_SearchStruct,
        __Marshaller_PersonContractActivityMapList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PersonContractActivityMapList, global::GrpcConferenceContractService.ModifyReply> __Method_CreatePersonContractActivityMapInfo = new grpc::Method<global::GrpcConferenceContractService.PersonContractActivityMapList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePersonContractActivityMapInfo",
        __Marshaller_PersonContractActivityMapList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate, global::GrpcConferenceContractService.ModifyReply> __Method_UpdatePersonContractActivityMapInfo = new grpc::Method<global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePersonContractActivityMapInfo",
        __Marshaller_PersonContractActivityMapListToUpdate,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ApplyConferenceList> __Method_GetApplyConferenceBySessionConferenceIdListPagination = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ApplyConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApplyConferenceBySessionConferenceIdListPagination",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ApplyConferenceList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ApplyConferenceList> __Method_GetApplyConferenceByMemberPkAndYear = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ApplyConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApplyConferenceByMemberPkAndYear",
        __Marshaller_SearchStruct,
        __Marshaller_ApplyConferenceList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ApplyConferenceList> __Method_GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ApplyConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ApplyConferenceList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ApplyConferenceList> __Method_GetApplyConferenceByPerContractIdList = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ApplyConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApplyConferenceByPerContractIdList",
        __Marshaller_SearchStruct,
        __Marshaller_ApplyConferenceList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ApplyConferenceList> __Method_GetApplyConferenceByCompanyIdList = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ApplyConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApplyConferenceByCompanyIdList",
        __Marshaller_IdRequest,
        __Marshaller_ApplyConferenceList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ApplyConferenceList> __Method_GetApplyConferenceBySessionConferenceIdList = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ApplyConferenceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApplyConferenceBySessionConferenceIdList",
        __Marshaller_IdRequest,
        __Marshaller_ApplyConferenceList);

    static readonly grpc::Method<global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate, global::GrpcConferenceContractService.ModifyReply> __Method_CreateOrUpdateApplyConferenceInfo = new grpc::Method<global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOrUpdateApplyConferenceInfo",
        __Marshaller_ApplyConferenceListToCreateOrUpdate,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.InviteLetterStruct> __Method_GetInviteLetterById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.InviteLetterStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInviteLetterById",
        __Marshaller_IdRequest,
        __Marshaller_InviteLetterStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.InviteLetterStruct, global::GrpcConferenceContractService.ModifyReplyForCreateOther> __Method_CreateInviteLetterInfo = new grpc::Method<global::GrpcConferenceContractService.InviteLetterStruct, global::GrpcConferenceContractService.ModifyReplyForCreateOther>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateInviteLetterInfo",
        __Marshaller_InviteLetterStruct,
        __Marshaller_ModifyReplyForCreateOther);

    static readonly grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.TagTypeForDicList> __Method_GetTagTypeDic = new grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.TagTypeForDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTagTypeDic",
        __Marshaller_Empty,
        __Marshaller_TagTypeForDicList);

    static readonly grpc::Method<global::GrpcConferenceContractService.CodeRequest, global::GrpcConferenceContractService.TagTypeStruct> __Method_GetTagTypeByCode = new grpc::Method<global::GrpcConferenceContractService.CodeRequest, global::GrpcConferenceContractService.TagTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTagTypeByCode",
        __Marshaller_CodeRequest,
        __Marshaller_TagTypeStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.TagTypeStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateTagTypeInfo = new grpc::Method<global::GrpcConferenceContractService.TagTypeStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTagTypeInfo",
        __Marshaller_TagTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.TagTypeStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateTagTypeInfo = new grpc::Method<global::GrpcConferenceContractService.TagTypeStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTagTypeInfo",
        __Marshaller_TagTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteTagTypeById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTagTypeById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.YearConfigForDicList> __Method_GetYearConfigDic = new grpc::Method<global::GrpcConferenceContractService.Empty, global::GrpcConferenceContractService.YearConfigForDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetYearConfigDic",
        __Marshaller_Empty,
        __Marshaller_YearConfigForDicList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.YearConfigForDicList> __Method_GetYearConfigByIsUse = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.YearConfigForDicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetYearConfigByIsUse",
        __Marshaller_SearchStruct,
        __Marshaller_YearConfigForDicList);

    static readonly grpc::Method<global::GrpcConferenceContractService.YearConfigStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateYearConfigInfo = new grpc::Method<global::GrpcConferenceContractService.YearConfigStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateYearConfigInfo",
        __Marshaller_YearConfigStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.YearConfigStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateYearConfigInfo = new grpc::Method<global::GrpcConferenceContractService.YearConfigStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateYearConfigInfo",
        __Marshaller_YearConfigStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ConferenceOnsiteList> __Method_GetConferenceOnsiteList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.ConferenceOnsiteList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceOnsiteList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ConferenceOnsiteList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdIntRequest, global::GrpcConferenceContractService.ConferenceOnsiteStruct> __Method_GetConferenceOnsiteById = new grpc::Method<global::GrpcConferenceContractService.IdIntRequest, global::GrpcConferenceContractService.ConferenceOnsiteStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConferenceOnsiteById",
        __Marshaller_IdIntRequest,
        __Marshaller_ConferenceOnsiteStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceOnsiteStruct, global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite> __Method_CreateConferenceOnsiteInfo = new grpc::Method<global::GrpcConferenceContractService.ConferenceOnsiteStruct, global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateConferenceOnsiteInfo",
        __Marshaller_ConferenceOnsiteStruct,
        __Marshaller_ModifyReplyForConferenceOnsite);

    static readonly grpc::Method<global::GrpcConferenceContractService.ConferenceOnsiteStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateConferenceOnsiteInfo = new grpc::Method<global::GrpcConferenceContractService.ConferenceOnsiteStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateConferenceOnsiteInfo",
        __Marshaller_ConferenceOnsiteStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdIntRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteConferenceOnsiteById = new grpc::Method<global::GrpcConferenceContractService.IdIntRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConferenceOnsiteById",
        __Marshaller_IdIntRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.InviteCodeList> __Method_GetInviteCodeList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.InviteCodeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInviteCodeList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_InviteCodeList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.InviteCodeCSPVMStruct> __Method_GetInviteCodeById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.InviteCodeCSPVMStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInviteCodeById",
        __Marshaller_IdRequest,
        __Marshaller_InviteCodeCSPVMStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.InviteCodeCSPVMStruct> __Method_GetInviteCodeByInviteCodeNumber = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.InviteCodeCSPVMStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInviteCodeByInviteCodeNumber",
        __Marshaller_SearchStruct,
        __Marshaller_InviteCodeCSPVMStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.InviteCodeStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateInviteCodeInfo = new grpc::Method<global::GrpcConferenceContractService.InviteCodeStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateInviteCodeInfo",
        __Marshaller_InviteCodeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.InviteCodeStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateInviteCodeInfo = new grpc::Method<global::GrpcConferenceContractService.InviteCodeStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateInviteCodeInfo",
        __Marshaller_InviteCodeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteInviteCodeById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInviteCodeById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.InviteCodeRecordList> __Method_GetInviteCodeRecordList = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.InviteCodeRecordList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInviteCodeRecordList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_InviteCodeRecordList);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.InviteCodeRecordStruct> __Method_GetInviteCodeRecordById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.InviteCodeRecordStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInviteCodeRecordById",
        __Marshaller_IdRequest,
        __Marshaller_InviteCodeRecordStruct);

    static readonly grpc::Method<global::GrpcConferenceContractService.InviteCodeRecordStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CreateInviteCodeRecordInfo = new grpc::Method<global::GrpcConferenceContractService.InviteCodeRecordStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateInviteCodeRecordInfo",
        __Marshaller_InviteCodeRecordStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.InviteCodeRecordStruct, global::GrpcConferenceContractService.ModifyReply> __Method_UpdateInviteCodeRecordInfo = new grpc::Method<global::GrpcConferenceContractService.InviteCodeRecordStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateInviteCodeRecordInfo",
        __Marshaller_InviteCodeRecordStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply> __Method_DeleteInviteCodeRecordById = new grpc::Method<global::GrpcConferenceContractService.IdRequest, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInviteCodeRecordById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ModifyReply> __Method_CopyPackInfoByYear = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyPackInfoByYear",
        __Marshaller_SearchStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.CompanyServicePackMapList, global::GrpcConferenceContractService.ModifyReply> __Method_CreateCompanyServicePackMap = new grpc::Method<global::GrpcConferenceContractService.CompanyServicePackMapList, global::GrpcConferenceContractService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCompanyServicePackMap",
        __Marshaller_CompanyServicePackMapList,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ContractStatisticsList> __Method_GetContractStatisticsList = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.ContractStatisticsList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractStatisticsList",
        __Marshaller_SearchStruct,
        __Marshaller_ContractStatisticsList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.BoolReply> __Method_IsMaxContractNumberEqualsPCCountByCompanyPKAndYear = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.BoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsMaxContractNumberEqualsPCCountByCompanyPKAndYear",
        __Marshaller_SearchStruct,
        __Marshaller_BoolReply);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList> __Method_GetPersonContractListForLunch = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractListForLunch",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_PersonContractAndSessionConferenceIdList);

    static readonly grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList> __Method_GetPersonContractListAndApplyConference = new grpc::Method<global::GrpcConferenceContractService.PaginationRequestSearch, global::GrpcConferenceContractService.PersonContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPersonContractListAndApplyConference",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_PersonContractList);

    static readonly grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractList> __Method_ExportPersonContractList = new grpc::Method<global::GrpcConferenceContractService.SearchStruct, global::GrpcConferenceContractService.PersonContractList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExportPersonContractList",
        __Marshaller_SearchStruct,
        __Marshaller_PersonContractList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcConferenceContractService.GrpcConferenceContractServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ConferenceContractServiceToGrpc</summary>
    public abstract partial class ConferenceContractServiceToGrpcBase
    {
      /// <summary>
      ///获取某表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,companyId,conferenceId,ccIsdelete,isDiscount，year,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取付费的一级合同表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId,contractStatusCode）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractListByIsGive(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取付费的一级合同表内所有数据包含所有ContractStatusCode的分页数据（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractListByIsGiveWithAllContractStatusCode(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内CompanyId，year字段获取列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractByCompanyIdAndYearList(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ConferenceContractStruct> GetConferenceContractById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateConferenceContractInfo(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateConferenceContractInfo(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ConferenceContract内业务员字段，传ConferenceContractStruct内ConferenceContractId，Owerid，Ower字段
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractByOwer(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ConferenceContract内PaymentStatusCode字段值，传ConferenceContractStruct内ConferenceContractId字段
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractPaymentStatusCode(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ConferenceContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractIsSendEmail(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ConferenceContract内ModifyPermission字段值,根据SearchStruct内conferenceContractId,modifyPermission,userName(修改操作人)字段
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyModifyPermissionById(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceContractById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除ConferenceContract多个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceContractByList(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除ConferenceContract多个一级合同的同时，删除每个ConferenceContractId下面所属的二级和三级下面的所有合同
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteConCAndCCAndPCByConIdList(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      ///（带查询条件SearchStruct内查询字段为comContractNumber,comNameTranslation,companyServicePackId,contractTypeId,conferenceId,ccIsdelete,isOwer(为false拿全部数据，为true时请指定owerid),owerid,isDiscount,IsContractTypeWithECode,cTypeCode,IsCheckIn,IsVerify,IsFillPC,companyId,comPrice,contractStatusCode,isGive,year）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据ConferenceContractId获取列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractByConferenceContractIdList(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyContractStruct> GetCompanyContractById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateCompanyContractInfo(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateCompanyContractInfo(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据ContractId修改CompanyContract内MaxContractNumber字段值
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyMaxContractNumber(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改CompanyContract表内Owerid，Ower，MaxContractNumber字段，同时又修改PersonContract表内Owerid，Ower字段接口
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyCCPCOwer(global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyContractById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReplyForCreateOther> RemoveCompanyContractIfPersonContractEmpty(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除CompanyContract多个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyContractByList(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除CompanyContract多个二级合同的同时，删除每个ContractId下面所属的三级下面的所有合同
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteCCAndPCByCidList(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部),isVerifyGive为true时配合isGive，为false获取全部）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractList> GetPersonContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据ContractId获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByContractIdList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///（带查询条件SearchStruct内查询字段为perContractNumber,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete，isNowYear,year,enterpriseType）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByNewList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据MemberPK,exTypeCode(区分snec或者esh等合同，传空字符串取全部)获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByMemberPKList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据MemberPK(必传),companyServicePackId,year,contractCode(区分储能或光伏的合同)获取PersonContract表内所有个人合同的列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByMemberPKListWithNoPagination(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractStruct> GetPersonContractById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内perContractNumber获取PersonContractStruct对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractStruct> GetPersonContractByPersonContractNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建PersonContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreatePersonContractInfo(global::GrpcConferenceContractService.PersonContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改PersonContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdatePersonContractInfo(global::GrpcConferenceContractService.PersonContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractByIsCheckIn(global::GrpcConferenceContractService.ModifyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据多个PersonContractId批量修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsCheckInByIdList(global::GrpcConferenceContractService.CheckInRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改PersonContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsSendEmail(global::GrpcConferenceContractService.PersonContractPidList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据PerContractNumber修改PersonContract内IsFianceRecord字段值
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsFianceRecord(global::GrpcConferenceContractService.PersonContractPCNoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内owerid，isPrint修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsPrintByOwerid(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据多个id批量修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsPrintByids(global::GrpcConferenceContractService.IdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除PersonContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除PersonContract多个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractByList(global::GrpcConferenceContractService.PersonContractPidList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除PersonContract对象，同时判断二级合同MaxContractNumber为-1时，把二级合同同时一起删除
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractByIdForWeb(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackDic(global::GrpcConferenceContractService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内year获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackDicByYear(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取IsShownOnFront为true的CompanyServicePackList,SearchStruct内year和conferenceId字段
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListByIsShownOnFront(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,contractTypeId,IsDelete,year）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据ContractTypeId获取CompanyServicePackList
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListByContractTypeId(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内午餐和晚宴的套餐列表（带查询条件SearchStruct内查询字段为cTypeCode,conferenceId,year）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListForLunchOrDinner(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyServicePackVMStruct> GetCompanyServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateCompanyServicePackInfo(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateCompanyServicePackInfo(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内perContractNumber字段获取CompanyServicePack和ServicePackList
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CompanyServicePackVMStruct> GetCompanyServicePackVMByPersonContractNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为extraContractNumber,memTranslation,IsDelete）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ExtraServiceList> GetExtraServiceList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ExtraServiceVMStruct> GetExtraServiceById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建ExtraService单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateExtraServiceInfo(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ExtraService单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateExtraServiceInfo(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除ExtraService单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteExtraServiceById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取所有数据列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ServicePackList> GetServicePackListAll(global::GrpcConferenceContractService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据ConferenceId获取ServicePackList
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ServicePackList> GetServicePackByConferenceIdList(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,IsDelete,year）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ServicePackList> GetServicePackList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ServicePackVMStruct> GetServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建ServicePack单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateServicePackInfo(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateServicePackInfo(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///判断ServicePackActivityMap表是否有引用Activity表内数据，如果引用就不能删除
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ResultReply> IsCanDeleteAcitvity(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///============ServicePackActivityMap==============
      ///根据SearchStruct内sessionConferenceId字段,判断是否存在sessionConferenceId的数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ResultReply> IsExistSessionConferencdId(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内sessionConferenceId字段,
      ///清空SessionConferenceID，SessionConferenceName，SessionIDs（如多个的话根据sessionConferenceId值对应值清掉）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> RemoveSCBySessionConferencdId(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取ContractType字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ContractTypeList> GetContractTypeDic(global::GrpcConferenceContractService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ContractTypeList> GetContractTypeList(global::GrpcConferenceContractService.PaginationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ContractTypeStruct> GetContractTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建ContractType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateContractTypeInfo(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ContractType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateContractTypeInfo(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除ContractType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteContractTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取CCNumberConfig字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CCNumberConfigList> GetCCNumberConfigDic(global::GrpcConferenceContractService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CCNumberConfigList> GetCCNumberConfigList(global::GrpcConferenceContractService.PaginationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.CCNumberConfigStruct> GetCCNumberConfigById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateCCNumberConfigInfo(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateCCNumberConfigInfo(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteCCNumberConfigById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete,conferenceId,year)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.DelegateServicePackDiscountList> GetDSPDList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct> GetDSPDById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateDSPDInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateDSPDInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteDSPDById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList> GetDSPDFCCList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct> GetDSPDFCCById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateDSPDFCCInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateDSPDFCCInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteDSPDFCCById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取ContractStatusDic字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ContractStatusDicForDicList> GetContractStatusDic(global::GrpcConferenceContractService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ContractStatusDicList> GetContractStatusDicList(global::GrpcConferenceContractService.PaginationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ContractStatusDicStruct> GetContractStatusDicById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateContractStatusDicInfo(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateContractStatusDicInfo(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteContractStatusDicById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取RemarkDic字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.RemarkDicForDicList> GetRemarkDic(global::GrpcConferenceContractService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.RemarkDicList> GetRemarkDicList(global::GrpcConferenceContractService.PaginationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.RemarkDicStruct> GetRemarkDicById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateRemarkDicInfo(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateRemarkDicInfo(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteRemarkDicById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内memberPK和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByMemberPKList(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内activityId和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByActivityIdList(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内perContractNumber和year字段获取PersonContractActivityMap列表(根据个人合同号获取PersonContractActivityMap列表)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByPersonContractNumberList(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreatePersonContractActivityMapInfo(global::GrpcConferenceContractService.PersonContractActivityMapList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdatePersonContractActivityMapInfo(global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内sessionConferenceId获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdListPagination(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内memberPK,year获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByMemberPkAndYear(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year,owerid获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内id(PersonContractId),year获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByPerContractIdList(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据CompanyId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SessionConferenceId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdList(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///新增或修改ApplyConference多个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateOrUpdateApplyConferenceInfo(global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.InviteLetterStruct> GetInviteLetterById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建InviteLetter单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateInviteLetterInfo(global::GrpcConferenceContractService.InviteLetterStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取TagType字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.TagTypeForDicList> GetTagTypeDic(global::GrpcConferenceContractService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据code获取YearConfig
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.TagTypeStruct> GetTagTypeByCode(global::GrpcConferenceContractService.CodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建TagType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateTagTypeInfo(global::GrpcConferenceContractService.TagTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改TagType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateTagTypeInfo(global::GrpcConferenceContractService.TagTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除TagType单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteTagTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.YearConfigForDicList> GetYearConfigDic(global::GrpcConferenceContractService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内isUse字段获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.YearConfigForDicList> GetYearConfigByIsUse(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建YearConfig单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateYearConfigInfo(global::GrpcConferenceContractService.YearConfigStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改YearConfig单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateYearConfigInfo(global::GrpcConferenceContractService.YearConfigStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取ConferenceOnsite列表，搜索条件为SearchStruct内contractNumber，companyName，companyServicePackId，userName,year
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ConferenceOnsiteList> GetConferenceOnsiteList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ConferenceOnsiteStruct> GetConferenceOnsiteById(global::GrpcConferenceContractService.IdIntRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite> CreateConferenceOnsiteInfo(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateConferenceOnsiteInfo(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceOnsiteById(global::GrpcConferenceContractService.IdIntRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内inviteCodeNumber,webSite，isNotFullUseInviteCode(是否未完全使用的邀请码（即已使用数量&lt;数量）)，isFullUseInviteCode(是否完全使用的邀请码（即已使用数量=数量））)，companyServicePackId,year
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.InviteCodeList> GetInviteCodeList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.InviteCodeCSPVMStruct> GetInviteCodeById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内InviteCodeNumber获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.InviteCodeCSPVMStruct> GetInviteCodeByInviteCodeNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建InviteCode单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateInviteCodeInfo(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改InviteCode单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateInviteCodeInfo(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除InviteCode单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteInviteCodeById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内perContractNumber，memberPK,memTranslation，inviteCodeId
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.InviteCodeRecordList> GetInviteCodeRecordList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.InviteCodeRecordStruct> GetInviteCodeRecordById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateInviteCodeRecordInfo(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> UpdateInviteCodeRecordInfo(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> DeleteInviteCodeRecordById(global::GrpcConferenceContractService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据,
      ///传入SearchStruct内id(前一年的ConferenceId值，根据该值区分不同的会议套餐),year,conferenceId(新一年的会议id),conferenceName(新一年的会议名字，CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CopyPackInfoByYear(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据和CompanyServicePackMap表数据（关于储能），
      ///传入SearchStruct内year,conferenceId,conferenceName(CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      ///rpc CopyPackInfoByYearForESH (SearchStruct) returns (ModifyReply) {}
      ///把复制后的CompanyServicePack表和ServicePack表新数据，通过此接口在关联起来
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ModifyReply> CreateCompanyServicePackMap(global::GrpcConferenceContractService.CompanyServicePackMapList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内isGive，year字段获取ContractStatisticsList
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.ContractStatisticsList> GetContractStatisticsList(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内companyId，year字段,如果这个公司year年的所有二级合同中MaxContractNumber为正数的二级合同底下三级合同数量和最大数保持一致的，返回true，否则返回false
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.BoolReply> IsMaxContractNumberEqualsPCCountByCompanyPKAndYear(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内sessionConferenceId(必传，多个用","分隔)，perContractNumber，memTranslation，owerid，comNameTranslation，companyServicePackId,IsCheckIn,year字段获取参会晚宴数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList> GetPersonContractListForLunch(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year获取PersonContractList（带分页）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractList> GetPersonContractListAndApplyConference(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///导出个人合同表数据（IsPrint为false）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConferenceContractService.PersonContractList> ExportPersonContractList(global::GrpcConferenceContractService.SearchStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ConferenceContractServiceToGrpc</summary>
    public partial class ConferenceContractServiceToGrpcClient : grpc::ClientBase<ConferenceContractServiceToGrpcClient>
    {
      /// <summary>Creates a new client for ConferenceContractServiceToGrpc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ConferenceContractServiceToGrpcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ConferenceContractServiceToGrpc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ConferenceContractServiceToGrpcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConferenceContractServiceToGrpcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ConferenceContractServiceToGrpcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///获取某表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,companyId,conferenceId,ccIsdelete,isDiscount，year,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,companyId,conferenceId,ccIsdelete,isDiscount，year,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceContractList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,companyId,conferenceId,ccIsdelete,isDiscount，year,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,companyId,conferenceId,ccIsdelete,isDiscount，year,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceContractList, null, options, request);
      }
      /// <summary>
      ///获取付费的一级合同表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId,contractStatusCode）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractListByIsGive(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractListByIsGive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取付费的一级合同表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId,contractStatusCode）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractListByIsGive(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceContractListByIsGive, null, options, request);
      }
      /// <summary>
      ///获取付费的一级合同表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId,contractStatusCode）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractListByIsGiveAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractListByIsGiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取付费的一级合同表内所有数据包含分页（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId,contractStatusCode）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractListByIsGiveAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceContractListByIsGive, null, options, request);
      }
      /// <summary>
      ///获取付费的一级合同表内所有数据包含所有ContractStatusCode的分页数据（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractListByIsGiveWithAllContractStatusCode(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractListByIsGiveWithAllContractStatusCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取付费的一级合同表内所有数据包含所有ContractStatusCode的分页数据（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractListByIsGiveWithAllContractStatusCode(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceContractListByIsGiveWithAllContractStatusCode, null, options, request);
      }
      /// <summary>
      ///获取付费的一级合同表内所有数据包含所有ContractStatusCode的分页数据（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractListByIsGiveWithAllContractStatusCodeAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractListByIsGiveWithAllContractStatusCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取付费的一级合同表内所有数据包含所有ContractStatusCode的分页数据（带些查询条件SearchStruct内查询字段为comContractNumber，comNameTranslation,owerid,ccIsdelete,isDiscount，year,conferenceId）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractListByIsGiveWithAllContractStatusCodeAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceContractListByIsGiveWithAllContractStatusCode, null, options, request);
      }
      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractByCompanyIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceContractByCompanyIdList, null, options, request);
      }
      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractByCompanyIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractByCompanyIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractByCompanyIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceContractByCompanyIdList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内CompanyId，year字段获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractByCompanyIdAndYearList(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractByCompanyIdAndYearList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内CompanyId，year字段获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractList GetConferenceContractByCompanyIdAndYearList(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceContractByCompanyIdAndYearList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内CompanyId，year字段获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractByCompanyIdAndYearListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractByCompanyIdAndYearListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内CompanyId，year字段获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractList> GetConferenceContractByCompanyIdAndYearListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceContractByCompanyIdAndYearList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractStruct GetConferenceContractById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceContractStruct GetConferenceContractById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceContractById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractStruct> GetConferenceContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceContractByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceContractStruct> GetConferenceContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceContractById, null, options, request);
      }
      /// <summary>
      ///创建ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther CreateConferenceContractInfo(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConferenceContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther CreateConferenceContractInfo(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateConferenceContractInfo, null, options, request);
      }
      /// <summary>
      ///创建ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateConferenceContractInfoAsync(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConferenceContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateConferenceContractInfoAsync(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateConferenceContractInfo, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateConferenceContractInfo(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConferenceContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateConferenceContractInfo(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateConferenceContractInfo, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateConferenceContractInfoAsync(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConferenceContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateConferenceContractInfoAsync(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateConferenceContractInfo, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract内业务员字段，传ConferenceContractStruct内ConferenceContractId，Owerid，Ower字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyConferenceContractByOwer(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyConferenceContractByOwer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract内业务员字段，传ConferenceContractStruct内ConferenceContractId，Owerid，Ower字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyConferenceContractByOwer(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyConferenceContractByOwer, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract内业务员字段，传ConferenceContractStruct内ConferenceContractId，Owerid，Ower字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractByOwerAsync(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyConferenceContractByOwerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract内业务员字段，传ConferenceContractStruct内ConferenceContractId，Owerid，Ower字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractByOwerAsync(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyConferenceContractByOwer, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract内PaymentStatusCode字段值，传ConferenceContractStruct内ConferenceContractId字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyConferenceContractPaymentStatusCode(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyConferenceContractPaymentStatusCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract内PaymentStatusCode字段值，传ConferenceContractStruct内ConferenceContractId字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyConferenceContractPaymentStatusCode(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyConferenceContractPaymentStatusCode, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract内PaymentStatusCode字段值，传ConferenceContractStruct内ConferenceContractId字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractPaymentStatusCodeAsync(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyConferenceContractPaymentStatusCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract内PaymentStatusCode字段值，传ConferenceContractStruct内ConferenceContractId字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractPaymentStatusCodeAsync(global::GrpcConferenceContractService.ConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyConferenceContractPaymentStatusCode, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyConferenceContractIsSendEmail(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyConferenceContractIsSendEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyConferenceContractIsSendEmail(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyConferenceContractIsSendEmail, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractIsSendEmailAsync(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyConferenceContractIsSendEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyConferenceContractIsSendEmailAsync(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyConferenceContractIsSendEmail, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract内ModifyPermission字段值,根据SearchStruct内conferenceContractId,modifyPermission,userName(修改操作人)字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyModifyPermissionById(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyModifyPermissionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract内ModifyPermission字段值,根据SearchStruct内conferenceContractId,modifyPermission,userName(修改操作人)字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyModifyPermissionById(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyModifyPermissionById, null, options, request);
      }
      /// <summary>
      ///修改ConferenceContract内ModifyPermission字段值,根据SearchStruct内conferenceContractId,modifyPermission,userName(修改操作人)字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyModifyPermissionByIdAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyModifyPermissionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceContract内ModifyPermission字段值,根据SearchStruct内conferenceContractId,modifyPermission,userName(修改操作人)字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyModifyPermissionByIdAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyModifyPermissionById, null, options, request);
      }
      /// <summary>
      ///删除ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteConferenceContractById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConferenceContractById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteConferenceContractById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConferenceContractById, null, options, request);
      }
      /// <summary>
      ///删除ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConferenceContractByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConferenceContractById, null, options, request);
      }
      /// <summary>
      ///删除ConferenceContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteConferenceContractByList(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConferenceContractByList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ConferenceContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteConferenceContractByList(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConferenceContractByList, null, options, request);
      }
      /// <summary>
      ///删除ConferenceContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceContractByListAsync(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConferenceContractByListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ConferenceContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceContractByListAsync(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConferenceContractByList, null, options, request);
      }
      /// <summary>
      ///删除ConferenceContract多个一级合同的同时，删除每个ConferenceContractId下面所属的二级和三级下面的所有合同
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteConCAndCCAndPCByConIdList(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConCAndCCAndPCByConIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ConferenceContract多个一级合同的同时，删除每个ConferenceContractId下面所属的二级和三级下面的所有合同
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteConCAndCCAndPCByConIdList(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConCAndCCAndPCByConIdList, null, options, request);
      }
      /// <summary>
      ///删除ConferenceContract多个一级合同的同时，删除每个ConferenceContractId下面所属的二级和三级下面的所有合同
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteConCAndCCAndPCByConIdListAsync(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConCAndCCAndPCByConIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ConferenceContract多个一级合同的同时，删除每个ConferenceContractId下面所属的二级和三级下面的所有合同
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteConCAndCCAndPCByConIdListAsync(global::GrpcConferenceContractService.ConferenceContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConCAndCCAndPCByConIdList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      ///（带查询条件SearchStruct内查询字段为comContractNumber,comNameTranslation,companyServicePackId,contractTypeId,conferenceId,ccIsdelete,isOwer(为false拿全部数据，为true时请指定owerid),owerid,isDiscount,IsContractTypeWithECode,cTypeCode,IsCheckIn,IsVerify,IsFillPC,companyId,comPrice,contractStatusCode,isGive,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyContractList GetCompanyContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyContractList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      ///（带查询条件SearchStruct内查询字段为comContractNumber,comNameTranslation,companyServicePackId,contractTypeId,conferenceId,ccIsdelete,isOwer(为false拿全部数据，为true时请指定owerid),owerid,isDiscount,IsContractTypeWithECode,cTypeCode,IsCheckIn,IsVerify,IsFillPC,companyId,comPrice,contractStatusCode,isGive,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyContractList GetCompanyContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyContractList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      ///（带查询条件SearchStruct内查询字段为comContractNumber,comNameTranslation,companyServicePackId,contractTypeId,conferenceId,ccIsdelete,isOwer(为false拿全部数据，为true时请指定owerid),owerid,isDiscount,IsContractTypeWithECode,cTypeCode,IsCheckIn,IsVerify,IsFillPC,companyId,comPrice,contractStatusCode,isGive,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyContractListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      ///（带查询条件SearchStruct内查询字段为comContractNumber,comNameTranslation,companyServicePackId,contractTypeId,conferenceId,ccIsdelete,isOwer(为false拿全部数据，为true时请指定owerid),owerid,isDiscount,IsContractTypeWithECode,cTypeCode,IsCheckIn,IsVerify,IsFillPC,companyId,comPrice,contractStatusCode,isGive,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyContractList, null, options, request);
      }
      /// <summary>
      ///根据ConferenceContractId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyContractList GetCompanyContractByConferenceContractIdList(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyContractByConferenceContractIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ConferenceContractId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyContractList GetCompanyContractByConferenceContractIdList(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyContractByConferenceContractIdList, null, options, request);
      }
      /// <summary>
      ///根据ConferenceContractId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractByConferenceContractIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyContractByConferenceContractIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ConferenceContractId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractByConferenceContractIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyContractByConferenceContractIdList, null, options, request);
      }
      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyContractList GetCompanyContractByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyContractByCompanyIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyContractList GetCompanyContractByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyContractByCompanyIdList, null, options, request);
      }
      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractByCompanyIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyContractByCompanyIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据CompanyId获取列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyContractList> GetCompanyContractByCompanyIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyContractByCompanyIdList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyContractStruct GetCompanyContractById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyContractById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyContractStruct GetCompanyContractById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyContractById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyContractStruct> GetCompanyContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyContractByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyContractStruct> GetCompanyContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyContractById, null, options, request);
      }
      /// <summary>
      ///创建CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther CreateCompanyContractInfo(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther CreateCompanyContractInfo(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCompanyContractInfo, null, options, request);
      }
      /// <summary>
      ///创建CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateCompanyContractInfoAsync(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateCompanyContractInfoAsync(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCompanyContractInfo, null, options, request);
      }
      /// <summary>
      ///修改CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateCompanyContractInfo(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateCompanyContractInfo(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCompanyContractInfo, null, options, request);
      }
      /// <summary>
      ///修改CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateCompanyContractInfoAsync(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateCompanyContractInfoAsync(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCompanyContractInfo, null, options, request);
      }
      /// <summary>
      ///根据ContractId修改CompanyContract内MaxContractNumber字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyMaxContractNumber(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyMaxContractNumber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ContractId修改CompanyContract内MaxContractNumber字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyMaxContractNumber(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyMaxContractNumber, null, options, request);
      }
      /// <summary>
      ///根据ContractId修改CompanyContract内MaxContractNumber字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyMaxContractNumberAsync(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyMaxContractNumberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ContractId修改CompanyContract内MaxContractNumber字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyMaxContractNumberAsync(global::GrpcConferenceContractService.CompanyContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyMaxContractNumber, null, options, request);
      }
      /// <summary>
      ///修改CompanyContract表内Owerid，Ower，MaxContractNumber字段，同时又修改PersonContract表内Owerid，Ower字段接口
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyCCPCOwer(global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyCCPCOwer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyContract表内Owerid，Ower，MaxContractNumber字段，同时又修改PersonContract表内Owerid，Ower字段接口
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyCCPCOwer(global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyCCPCOwer, null, options, request);
      }
      /// <summary>
      ///修改CompanyContract表内Owerid，Ower，MaxContractNumber字段，同时又修改PersonContract表内Owerid，Ower字段接口
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyCCPCOwerAsync(global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyCCPCOwerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyContract表内Owerid，Ower，MaxContractNumber字段，同时又修改PersonContract表内Owerid，Ower字段接口
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyCCPCOwerAsync(global::GrpcConferenceContractService.ModifyCCPCOwerInfoStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyCCPCOwer, null, options, request);
      }
      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCompanyContractById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyContractById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCompanyContractById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCompanyContractById, null, options, request);
      }
      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyContractByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCompanyContractById, null, options, request);
      }
      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther RemoveCompanyContractIfPersonContractEmpty(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveCompanyContractIfPersonContractEmpty(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther RemoveCompanyContractIfPersonContractEmpty(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveCompanyContractIfPersonContractEmpty, null, options, request);
      }
      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> RemoveCompanyContractIfPersonContractEmptyAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveCompanyContractIfPersonContractEmptyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> RemoveCompanyContractIfPersonContractEmptyAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveCompanyContractIfPersonContractEmpty, null, options, request);
      }
      /// <summary>
      ///删除CompanyContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCompanyContractByList(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyContractByList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCompanyContractByList(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCompanyContractByList, null, options, request);
      }
      /// <summary>
      ///删除CompanyContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyContractByListAsync(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyContractByListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyContractByListAsync(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCompanyContractByList, null, options, request);
      }
      /// <summary>
      ///删除CompanyContract多个二级合同的同时，删除每个ContractId下面所属的三级下面的所有合同
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCCAndPCByCidList(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCCAndPCByCidList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyContract多个二级合同的同时，删除每个ContractId下面所属的三级下面的所有合同
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCCAndPCByCidList(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCCAndPCByCidList, null, options, request);
      }
      /// <summary>
      ///删除CompanyContract多个二级合同的同时，删除每个ContractId下面所属的三级下面的所有合同
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCCAndPCByCidListAsync(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCCAndPCByCidListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyContract多个二级合同的同时，删除每个ContractId下面所属的三级下面的所有合同
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCCAndPCByCidListAsync(global::GrpcConferenceContractService.CompanyContractCidList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCCAndPCByCidList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部),isVerifyGive为true时配合isGive，为false获取全部）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部),isVerifyGive为true时配合isGive，为false获取全部）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部),isVerifyGive为true时配合isGive，为false获取全部）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部),isVerifyGive为true时配合isGive，为false获取全部）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractList, null, options, request);
      }
      /// <summary>
      ///根据ContractId获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractByContractIdList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByContractIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ContractId获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractByContractIdList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractByContractIdList, null, options, request);
      }
      /// <summary>
      ///根据ContractId获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByContractIdListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByContractIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ContractId获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByContractIdListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractByContractIdList, null, options, request);
      }
      /// <summary>
      ///（带查询条件SearchStruct内查询字段为perContractNumber,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete，isNowYear,year,enterpriseType）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractByNewList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByNewList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///（带查询条件SearchStruct内查询字段为perContractNumber,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete，isNowYear,year,enterpriseType）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractByNewList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractByNewList, null, options, request);
      }
      /// <summary>
      ///（带查询条件SearchStruct内查询字段为perContractNumber,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete，isNowYear,year,enterpriseType）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByNewListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByNewListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///（带查询条件SearchStruct内查询字段为perContractNumber,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete，isNowYear,year,enterpriseType）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByNewListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractByNewList, null, options, request);
      }
      /// <summary>
      ///根据MemberPK,exTypeCode(区分snec或者esh等合同，传空字符串取全部)获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractByMemberPKList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByMemberPKList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据MemberPK,exTypeCode(区分snec或者esh等合同，传空字符串取全部)获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractByMemberPKList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractByMemberPKList, null, options, request);
      }
      /// <summary>
      ///根据MemberPK,exTypeCode(区分snec或者esh等合同，传空字符串取全部)获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByMemberPKListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByMemberPKListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据MemberPK,exTypeCode(区分snec或者esh等合同，传空字符串取全部)获取PersonContract表内所有个人合同的列表包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByMemberPKListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractByMemberPKList, null, options, request);
      }
      /// <summary>
      ///根据MemberPK(必传),companyServicePackId,year,contractCode(区分储能或光伏的合同)获取PersonContract表内所有个人合同的列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractByMemberPKListWithNoPagination(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByMemberPKListWithNoPagination(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据MemberPK(必传),companyServicePackId,year,contractCode(区分储能或光伏的合同)获取PersonContract表内所有个人合同的列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractByMemberPKListWithNoPagination(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractByMemberPKListWithNoPagination, null, options, request);
      }
      /// <summary>
      ///根据MemberPK(必传),companyServicePackId,year,contractCode(区分储能或光伏的合同)获取PersonContract表内所有个人合同的列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByMemberPKListWithNoPaginationAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByMemberPKListWithNoPaginationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据MemberPK(必传),companyServicePackId,year,contractCode(区分储能或光伏的合同)获取PersonContract表内所有个人合同的列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractByMemberPKListWithNoPaginationAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractByMemberPKListWithNoPagination, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractStruct GetPersonContractById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractStruct GetPersonContractById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractStruct> GetPersonContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractStruct> GetPersonContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractById, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber获取PersonContractStruct对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractStruct GetPersonContractByPersonContractNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByPersonContractNumber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber获取PersonContractStruct对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractStruct GetPersonContractByPersonContractNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractByPersonContractNumber, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber获取PersonContractStruct对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractStruct> GetPersonContractByPersonContractNumberAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractByPersonContractNumberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber获取PersonContractStruct对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractStruct> GetPersonContractByPersonContractNumberAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractByPersonContractNumber, null, options, request);
      }
      /// <summary>
      ///创建PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther CreatePersonContractInfo(global::GrpcConferenceContractService.PersonContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePersonContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther CreatePersonContractInfo(global::GrpcConferenceContractService.PersonContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePersonContractInfo, null, options, request);
      }
      /// <summary>
      ///创建PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreatePersonContractInfoAsync(global::GrpcConferenceContractService.PersonContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePersonContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreatePersonContractInfoAsync(global::GrpcConferenceContractService.PersonContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePersonContractInfo, null, options, request);
      }
      /// <summary>
      ///修改PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdatePersonContractInfo(global::GrpcConferenceContractService.PersonContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePersonContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdatePersonContractInfo(global::GrpcConferenceContractService.PersonContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePersonContractInfo, null, options, request);
      }
      /// <summary>
      ///修改PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdatePersonContractInfoAsync(global::GrpcConferenceContractService.PersonContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePersonContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdatePersonContractInfoAsync(global::GrpcConferenceContractService.PersonContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePersonContractInfo, null, options, request);
      }
      /// <summary>
      ///修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractByIsCheckIn(global::GrpcConferenceContractService.ModifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractByIsCheckIn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractByIsCheckIn(global::GrpcConferenceContractService.ModifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyPersonContractByIsCheckIn, null, options, request);
      }
      /// <summary>
      ///修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractByIsCheckInAsync(global::GrpcConferenceContractService.ModifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractByIsCheckInAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractByIsCheckInAsync(global::GrpcConferenceContractService.ModifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyPersonContractByIsCheckIn, null, options, request);
      }
      /// <summary>
      ///根据多个PersonContractId批量修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsCheckInByIdList(global::GrpcConferenceContractService.CheckInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsCheckInByIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据多个PersonContractId批量修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsCheckInByIdList(global::GrpcConferenceContractService.CheckInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyPersonContractIsCheckInByIdList, null, options, request);
      }
      /// <summary>
      ///根据多个PersonContractId批量修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsCheckInByIdListAsync(global::GrpcConferenceContractService.CheckInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsCheckInByIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据多个PersonContractId批量修改PersonContract报道状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsCheckInByIdListAsync(global::GrpcConferenceContractService.CheckInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyPersonContractIsCheckInByIdList, null, options, request);
      }
      /// <summary>
      ///修改PersonContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsSendEmail(global::GrpcConferenceContractService.PersonContractPidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsSendEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改PersonContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsSendEmail(global::GrpcConferenceContractService.PersonContractPidList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyPersonContractIsSendEmail, null, options, request);
      }
      /// <summary>
      ///修改PersonContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsSendEmailAsync(global::GrpcConferenceContractService.PersonContractPidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsSendEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改PersonContract内IsSendEmail字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsSendEmailAsync(global::GrpcConferenceContractService.PersonContractPidList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyPersonContractIsSendEmail, null, options, request);
      }
      /// <summary>
      ///根据PerContractNumber修改PersonContract内IsFianceRecord字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsFianceRecord(global::GrpcConferenceContractService.PersonContractPCNoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsFianceRecord(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据PerContractNumber修改PersonContract内IsFianceRecord字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsFianceRecord(global::GrpcConferenceContractService.PersonContractPCNoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyPersonContractIsFianceRecord, null, options, request);
      }
      /// <summary>
      ///根据PerContractNumber修改PersonContract内IsFianceRecord字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsFianceRecordAsync(global::GrpcConferenceContractService.PersonContractPCNoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsFianceRecordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据PerContractNumber修改PersonContract内IsFianceRecord字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsFianceRecordAsync(global::GrpcConferenceContractService.PersonContractPCNoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyPersonContractIsFianceRecord, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内owerid，isPrint修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsPrintByOwerid(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsPrintByOwerid(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内owerid，isPrint修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsPrintByOwerid(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyPersonContractIsPrintByOwerid, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内owerid，isPrint修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsPrintByOweridAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsPrintByOweridAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内owerid，isPrint修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsPrintByOweridAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyPersonContractIsPrintByOwerid, null, options, request);
      }
      /// <summary>
      ///根据多个id批量修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsPrintByids(global::GrpcConferenceContractService.IdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsPrintByids(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据多个id批量修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply ModifyPersonContractIsPrintByids(global::GrpcConferenceContractService.IdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyPersonContractIsPrintByids, null, options, request);
      }
      /// <summary>
      ///根据多个id批量修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsPrintByidsAsync(global::GrpcConferenceContractService.IdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyPersonContractIsPrintByidsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据多个id批量修改PersonContract内IsPrint字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> ModifyPersonContractIsPrintByidsAsync(global::GrpcConferenceContractService.IdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyPersonContractIsPrintByids, null, options, request);
      }
      /// <summary>
      ///删除PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeletePersonContractById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePersonContractById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeletePersonContractById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePersonContractById, null, options, request);
      }
      /// <summary>
      ///删除PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePersonContractByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除PersonContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePersonContractById, null, options, request);
      }
      /// <summary>
      ///删除PersonContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeletePersonContractByList(global::GrpcConferenceContractService.PersonContractPidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePersonContractByList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除PersonContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeletePersonContractByList(global::GrpcConferenceContractService.PersonContractPidList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePersonContractByList, null, options, request);
      }
      /// <summary>
      ///删除PersonContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractByListAsync(global::GrpcConferenceContractService.PersonContractPidList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePersonContractByListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除PersonContract多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractByListAsync(global::GrpcConferenceContractService.PersonContractPidList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePersonContractByList, null, options, request);
      }
      /// <summary>
      ///删除PersonContract对象，同时判断二级合同MaxContractNumber为-1时，把二级合同同时一起删除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeletePersonContractByIdForWeb(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePersonContractByIdForWeb(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除PersonContract对象，同时判断二级合同MaxContractNumber为-1时，把二级合同同时一起删除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeletePersonContractByIdForWeb(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePersonContractByIdForWeb, null, options, request);
      }
      /// <summary>
      ///删除PersonContract对象，同时判断二级合同MaxContractNumber为-1时，把二级合同同时一起删除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractByIdForWebAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePersonContractByIdForWebAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除PersonContract对象，同时判断二级合同MaxContractNumber为-1时，把二级合同同时一起删除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeletePersonContractByIdForWebAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePersonContractByIdForWeb, null, options, request);
      }
      /// <summary>
      ///获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackDic(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackDic(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyServicePackDic, null, options, request);
      }
      /// <summary>
      ///获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackDicAsync(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackDicAsync(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyServicePackDic, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内year获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackDicByYear(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackDicByYear(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内year获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackDicByYear(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyServicePackDicByYear, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内year获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackDicByYearAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackDicByYearAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内year获取CompanyServicePack字典
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackDicByYearAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyServicePackDicByYear, null, options, request);
      }
      /// <summary>
      ///获取IsShownOnFront为true的CompanyServicePackList,SearchStruct内year和conferenceId字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackListByIsShownOnFront(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackListByIsShownOnFront(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取IsShownOnFront为true的CompanyServicePackList,SearchStruct内year和conferenceId字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackListByIsShownOnFront(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyServicePackListByIsShownOnFront, null, options, request);
      }
      /// <summary>
      ///获取IsShownOnFront为true的CompanyServicePackList,SearchStruct内year和conferenceId字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListByIsShownOnFrontAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackListByIsShownOnFrontAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取IsShownOnFront为true的CompanyServicePackList,SearchStruct内year和conferenceId字段
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListByIsShownOnFrontAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyServicePackListByIsShownOnFront, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,contractTypeId,IsDelete,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,contractTypeId,IsDelete,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyServicePackList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,contractTypeId,IsDelete,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,contractTypeId,IsDelete,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyServicePackList, null, options, request);
      }
      /// <summary>
      ///根据ContractTypeId获取CompanyServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackListByContractTypeId(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackListByContractTypeId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ContractTypeId获取CompanyServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackListByContractTypeId(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyServicePackListByContractTypeId, null, options, request);
      }
      /// <summary>
      ///根据ContractTypeId获取CompanyServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListByContractTypeIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackListByContractTypeIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ContractTypeId获取CompanyServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListByContractTypeIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyServicePackListByContractTypeId, null, options, request);
      }
      /// <summary>
      ///获取某表内午餐和晚宴的套餐列表（带查询条件SearchStruct内查询字段为cTypeCode,conferenceId,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackListForLunchOrDinner(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackListForLunchOrDinner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内午餐和晚宴的套餐列表（带查询条件SearchStruct内查询字段为cTypeCode,conferenceId,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackList GetCompanyServicePackListForLunchOrDinner(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyServicePackListForLunchOrDinner, null, options, request);
      }
      /// <summary>
      ///获取某表内午餐和晚宴的套餐列表（带查询条件SearchStruct内查询字段为cTypeCode,conferenceId,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListForLunchOrDinnerAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackListForLunchOrDinnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内午餐和晚宴的套餐列表（带查询条件SearchStruct内查询字段为cTypeCode,conferenceId,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackList> GetCompanyServicePackListForLunchOrDinnerAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyServicePackListForLunchOrDinner, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackVMStruct GetCompanyServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackVMStruct GetCompanyServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyServicePackById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackVMStruct> GetCompanyServicePackByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackVMStruct> GetCompanyServicePackByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyServicePackById, null, options, request);
      }
      /// <summary>
      ///创建CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateCompanyServicePackInfo(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyServicePackInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateCompanyServicePackInfo(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCompanyServicePackInfo, null, options, request);
      }
      /// <summary>
      ///创建CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateCompanyServicePackInfoAsync(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyServicePackInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateCompanyServicePackInfoAsync(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCompanyServicePackInfo, null, options, request);
      }
      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateCompanyServicePackInfo(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyServicePackInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateCompanyServicePackInfo(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCompanyServicePackInfo, null, options, request);
      }
      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateCompanyServicePackInfoAsync(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyServicePackInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateCompanyServicePackInfoAsync(global::GrpcConferenceContractService.CompanyServicePackVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCompanyServicePackInfo, null, options, request);
      }
      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCompanyServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyServicePackById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCompanyServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCompanyServicePackById, null, options, request);
      }
      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyServicePackByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyServicePackByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCompanyServicePackByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCompanyServicePackById, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber字段获取CompanyServicePack和ServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackVMStruct GetCompanyServicePackVMByPersonContractNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackVMByPersonContractNumber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber字段获取CompanyServicePack和ServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CompanyServicePackVMStruct GetCompanyServicePackVMByPersonContractNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyServicePackVMByPersonContractNumber, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber字段获取CompanyServicePack和ServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackVMStruct> GetCompanyServicePackVMByPersonContractNumberAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyServicePackVMByPersonContractNumberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber字段获取CompanyServicePack和ServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CompanyServicePackVMStruct> GetCompanyServicePackVMByPersonContractNumberAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyServicePackVMByPersonContractNumber, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为extraContractNumber,memTranslation,IsDelete）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ExtraServiceList GetExtraServiceList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExtraServiceList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为extraContractNumber,memTranslation,IsDelete）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ExtraServiceList GetExtraServiceList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExtraServiceList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为extraContractNumber,memTranslation,IsDelete）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ExtraServiceList> GetExtraServiceListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExtraServiceListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为extraContractNumber,memTranslation,IsDelete）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ExtraServiceList> GetExtraServiceListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExtraServiceList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ExtraServiceVMStruct GetExtraServiceById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExtraServiceById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ExtraServiceVMStruct GetExtraServiceById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExtraServiceById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ExtraServiceVMStruct> GetExtraServiceByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExtraServiceByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ExtraServiceVMStruct> GetExtraServiceByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExtraServiceById, null, options, request);
      }
      /// <summary>
      ///创建ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateExtraServiceInfo(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateExtraServiceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateExtraServiceInfo(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateExtraServiceInfo, null, options, request);
      }
      /// <summary>
      ///创建ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateExtraServiceInfoAsync(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateExtraServiceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateExtraServiceInfoAsync(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateExtraServiceInfo, null, options, request);
      }
      /// <summary>
      ///修改ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateExtraServiceInfo(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateExtraServiceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateExtraServiceInfo(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateExtraServiceInfo, null, options, request);
      }
      /// <summary>
      ///修改ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateExtraServiceInfoAsync(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateExtraServiceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateExtraServiceInfoAsync(global::GrpcConferenceContractService.ExtraServiceVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateExtraServiceInfo, null, options, request);
      }
      /// <summary>
      ///删除ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteExtraServiceById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteExtraServiceById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteExtraServiceById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteExtraServiceById, null, options, request);
      }
      /// <summary>
      ///删除ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteExtraServiceByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteExtraServiceByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ExtraService单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteExtraServiceByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteExtraServiceById, null, options, request);
      }
      /// <summary>
      ///获取所有数据列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ServicePackList GetServicePackListAll(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePackListAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有数据列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ServicePackList GetServicePackListAll(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServicePackListAll, null, options, request);
      }
      /// <summary>
      ///获取所有数据列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ServicePackList> GetServicePackListAllAsync(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePackListAllAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取所有数据列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ServicePackList> GetServicePackListAllAsync(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServicePackListAll, null, options, request);
      }
      /// <summary>
      ///根据ConferenceId获取ServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ServicePackList GetServicePackByConferenceIdList(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePackByConferenceIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ConferenceId获取ServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ServicePackList GetServicePackByConferenceIdList(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServicePackByConferenceIdList, null, options, request);
      }
      /// <summary>
      ///根据ConferenceId获取ServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ServicePackList> GetServicePackByConferenceIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePackByConferenceIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据ConferenceId获取ServicePackList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ServicePackList> GetServicePackByConferenceIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServicePackByConferenceIdList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,IsDelete,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ServicePackList GetServicePackList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePackList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,IsDelete,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ServicePackList GetServicePackList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServicePackList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,IsDelete,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ServicePackList> GetServicePackListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePackListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页（带查询条件SearchStruct内查询字段为Translation,conferenceId,conferenceName,IsDelete,year）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ServicePackList> GetServicePackListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServicePackList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ServicePackVMStruct GetServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePackById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ServicePackVMStruct GetServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServicePackById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ServicePackVMStruct> GetServicePackByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicePackByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ServicePackVMStruct> GetServicePackByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServicePackById, null, options, request);
      }
      /// <summary>
      ///创建ServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateServicePackInfo(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServicePackInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateServicePackInfo(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServicePackInfo, null, options, request);
      }
      /// <summary>
      ///创建ServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateServicePackInfoAsync(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServicePackInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateServicePackInfoAsync(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServicePackInfo, null, options, request);
      }
      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateServicePackInfo(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServicePackInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateServicePackInfo(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateServicePackInfo, null, options, request);
      }
      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateServicePackInfoAsync(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServicePackInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateServicePackInfoAsync(global::GrpcConferenceContractService.ServicePackVMStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateServicePackInfo, null, options, request);
      }
      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServicePackById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteServicePackById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServicePackById, null, options, request);
      }
      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteServicePackByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServicePackByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CompanyServicePack单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteServicePackByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServicePackById, null, options, request);
      }
      /// <summary>
      ///判断ServicePackActivityMap表是否有引用Activity表内数据，如果引用就不能删除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ResultReply IsCanDeleteAcitvity(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsCanDeleteAcitvity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///判断ServicePackActivityMap表是否有引用Activity表内数据，如果引用就不能删除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ResultReply IsCanDeleteAcitvity(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsCanDeleteAcitvity, null, options, request);
      }
      /// <summary>
      ///判断ServicePackActivityMap表是否有引用Activity表内数据，如果引用就不能删除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ResultReply> IsCanDeleteAcitvityAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsCanDeleteAcitvityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///判断ServicePackActivityMap表是否有引用Activity表内数据，如果引用就不能删除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ResultReply> IsCanDeleteAcitvityAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsCanDeleteAcitvity, null, options, request);
      }
      /// <summary>
      ///============ServicePackActivityMap==============
      ///根据SearchStruct内sessionConferenceId字段,判断是否存在sessionConferenceId的数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ResultReply IsExistSessionConferencdId(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsExistSessionConferencdId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============ServicePackActivityMap==============
      ///根据SearchStruct内sessionConferenceId字段,判断是否存在sessionConferenceId的数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ResultReply IsExistSessionConferencdId(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsExistSessionConferencdId, null, options, request);
      }
      /// <summary>
      ///============ServicePackActivityMap==============
      ///根据SearchStruct内sessionConferenceId字段,判断是否存在sessionConferenceId的数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ResultReply> IsExistSessionConferencdIdAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsExistSessionConferencdIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///============ServicePackActivityMap==============
      ///根据SearchStruct内sessionConferenceId字段,判断是否存在sessionConferenceId的数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ResultReply> IsExistSessionConferencdIdAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsExistSessionConferencdId, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId字段,
      ///清空SessionConferenceID，SessionConferenceName，SessionIDs（如多个的话根据sessionConferenceId值对应值清掉）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply RemoveSCBySessionConferencdId(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveSCBySessionConferencdId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId字段,
      ///清空SessionConferenceID，SessionConferenceName，SessionIDs（如多个的话根据sessionConferenceId值对应值清掉）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply RemoveSCBySessionConferencdId(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveSCBySessionConferencdId, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId字段,
      ///清空SessionConferenceID，SessionConferenceName，SessionIDs（如多个的话根据sessionConferenceId值对应值清掉）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> RemoveSCBySessionConferencdIdAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveSCBySessionConferencdIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId字段,
      ///清空SessionConferenceID，SessionConferenceName，SessionIDs（如多个的话根据sessionConferenceId值对应值清掉）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> RemoveSCBySessionConferencdIdAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveSCBySessionConferencdId, null, options, request);
      }
      /// <summary>
      ///获取ContractType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractTypeList GetContractTypeDic(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractTypeDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取ContractType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractTypeList GetContractTypeDic(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractTypeDic, null, options, request);
      }
      /// <summary>
      ///获取ContractType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractTypeList> GetContractTypeDicAsync(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractTypeDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取ContractType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractTypeList> GetContractTypeDicAsync(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractTypeDic, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractTypeList GetContractTypeList(global::GrpcConferenceContractService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractTypeList GetContractTypeList(global::GrpcConferenceContractService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractTypeList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractTypeList> GetContractTypeListAsync(global::GrpcConferenceContractService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractTypeList> GetContractTypeListAsync(global::GrpcConferenceContractService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractTypeList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractTypeStruct GetContractTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractTypeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractTypeStruct GetContractTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractTypeById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractTypeStruct> GetContractTypeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractTypeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractTypeStruct> GetContractTypeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractTypeById, null, options, request);
      }
      /// <summary>
      ///创建ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateContractTypeInfo(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateContractTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateContractTypeInfo(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateContractTypeInfo, null, options, request);
      }
      /// <summary>
      ///创建ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateContractTypeInfoAsync(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateContractTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateContractTypeInfoAsync(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateContractTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateContractTypeInfo(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateContractTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateContractTypeInfo(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateContractTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateContractTypeInfoAsync(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateContractTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateContractTypeInfoAsync(global::GrpcConferenceContractService.ContractTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateContractTypeInfo, null, options, request);
      }
      /// <summary>
      ///删除ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteContractTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteContractTypeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteContractTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteContractTypeById, null, options, request);
      }
      /// <summary>
      ///删除ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteContractTypeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteContractTypeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ContractType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteContractTypeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteContractTypeById, null, options, request);
      }
      /// <summary>
      ///获取CCNumberConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CCNumberConfigList GetCCNumberConfigDic(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCCNumberConfigDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取CCNumberConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CCNumberConfigList GetCCNumberConfigDic(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCCNumberConfigDic, null, options, request);
      }
      /// <summary>
      ///获取CCNumberConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CCNumberConfigList> GetCCNumberConfigDicAsync(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCCNumberConfigDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取CCNumberConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CCNumberConfigList> GetCCNumberConfigDicAsync(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCCNumberConfigDic, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CCNumberConfigList GetCCNumberConfigList(global::GrpcConferenceContractService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCCNumberConfigList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CCNumberConfigList GetCCNumberConfigList(global::GrpcConferenceContractService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCCNumberConfigList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CCNumberConfigList> GetCCNumberConfigListAsync(global::GrpcConferenceContractService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCCNumberConfigListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CCNumberConfigList> GetCCNumberConfigListAsync(global::GrpcConferenceContractService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCCNumberConfigList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CCNumberConfigStruct GetCCNumberConfigById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCCNumberConfigById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.CCNumberConfigStruct GetCCNumberConfigById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCCNumberConfigById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CCNumberConfigStruct> GetCCNumberConfigByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCCNumberConfigByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.CCNumberConfigStruct> GetCCNumberConfigByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCCNumberConfigById, null, options, request);
      }
      /// <summary>
      ///创建CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateCCNumberConfigInfo(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCCNumberConfigInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateCCNumberConfigInfo(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCCNumberConfigInfo, null, options, request);
      }
      /// <summary>
      ///创建CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateCCNumberConfigInfoAsync(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCCNumberConfigInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateCCNumberConfigInfoAsync(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCCNumberConfigInfo, null, options, request);
      }
      /// <summary>
      ///修改CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateCCNumberConfigInfo(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCCNumberConfigInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateCCNumberConfigInfo(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCCNumberConfigInfo, null, options, request);
      }
      /// <summary>
      ///修改CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateCCNumberConfigInfoAsync(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCCNumberConfigInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateCCNumberConfigInfoAsync(global::GrpcConferenceContractService.CCNumberConfigStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCCNumberConfigInfo, null, options, request);
      }
      /// <summary>
      ///删除CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCCNumberConfigById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCCNumberConfigById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteCCNumberConfigById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCCNumberConfigById, null, options, request);
      }
      /// <summary>
      ///删除CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCCNumberConfigByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCCNumberConfigByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除CCNumberConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteCCNumberConfigByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCCNumberConfigById, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete,conferenceId,year)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.DelegateServicePackDiscountList GetDSPDList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDSPDList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete,conferenceId,year)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.DelegateServicePackDiscountList GetDSPDList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDSPDList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete,conferenceId,year)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.DelegateServicePackDiscountList> GetDSPDListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDSPDListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete,conferenceId,year)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.DelegateServicePackDiscountList> GetDSPDListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDSPDList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct GetDSPDById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDSPDById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct GetDSPDById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDSPDById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct> GetDSPDByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDSPDByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.DelegateServicePackDiscountListStruct> GetDSPDByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDSPDById, null, options, request);
      }
      /// <summary>
      ///创建DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateDSPDInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDSPDInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateDSPDInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDSPDInfo, null, options, request);
      }
      /// <summary>
      ///创建DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateDSPDInfoAsync(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDSPDInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateDSPDInfoAsync(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDSPDInfo, null, options, request);
      }
      /// <summary>
      ///修改DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateDSPDInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDSPDInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateDSPDInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDSPDInfo, null, options, request);
      }
      /// <summary>
      ///修改DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateDSPDInfoAsync(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDSPDInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateDSPDInfoAsync(global::GrpcConferenceContractService.DelegateServicePackDiscountStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDSPDInfo, null, options, request);
      }
      /// <summary>
      ///删除DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteDSPDById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDSPDById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteDSPDById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDSPDById, null, options, request);
      }
      /// <summary>
      ///删除DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteDSPDByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDSPDByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除DelegateServicePackDiscount单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteDSPDByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDSPDById, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList GetDSPDFCCList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDSPDFCCList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList GetDSPDFCCList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDSPDFCCList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList> GetDSPDFCCListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDSPDFCCListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页(SearchStruct内查询字段为comContractNumber,comNameTranslation,ccIsdelete)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractList> GetDSPDFCCListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDSPDFCCList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct GetDSPDFCCById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDSPDFCCById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct GetDSPDFCCById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDSPDFCCById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct> GetDSPDFCCByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDSPDFCCByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractListStruct> GetDSPDFCCByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDSPDFCCById, null, options, request);
      }
      /// <summary>
      ///创建DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateDSPDFCCInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDSPDFCCInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateDSPDFCCInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDSPDFCCInfo, null, options, request);
      }
      /// <summary>
      ///创建DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateDSPDFCCInfoAsync(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDSPDFCCInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateDSPDFCCInfoAsync(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDSPDFCCInfo, null, options, request);
      }
      /// <summary>
      ///修改DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateDSPDFCCInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDSPDFCCInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateDSPDFCCInfo(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDSPDFCCInfo, null, options, request);
      }
      /// <summary>
      ///修改DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateDSPDFCCInfoAsync(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDSPDFCCInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateDSPDFCCInfoAsync(global::GrpcConferenceContractService.DelegateServicePackDiscountForConferenceContractStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDSPDFCCInfo, null, options, request);
      }
      /// <summary>
      ///删除DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteDSPDFCCById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDSPDFCCById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteDSPDFCCById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDSPDFCCById, null, options, request);
      }
      /// <summary>
      ///删除DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteDSPDFCCByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDSPDFCCByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除DelegateServicePackDiscountForConferenceContract单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteDSPDFCCByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDSPDFCCById, null, options, request);
      }
      /// <summary>
      ///获取ContractStatusDic字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractStatusDicForDicList GetContractStatusDic(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStatusDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取ContractStatusDic字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractStatusDicForDicList GetContractStatusDic(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractStatusDic, null, options, request);
      }
      /// <summary>
      ///获取ContractStatusDic字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractStatusDicForDicList> GetContractStatusDicAsync(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStatusDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取ContractStatusDic字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractStatusDicForDicList> GetContractStatusDicAsync(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractStatusDic, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractStatusDicList GetContractStatusDicList(global::GrpcConferenceContractService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStatusDicList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractStatusDicList GetContractStatusDicList(global::GrpcConferenceContractService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractStatusDicList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractStatusDicList> GetContractStatusDicListAsync(global::GrpcConferenceContractService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStatusDicListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractStatusDicList> GetContractStatusDicListAsync(global::GrpcConferenceContractService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractStatusDicList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractStatusDicStruct GetContractStatusDicById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStatusDicById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractStatusDicStruct GetContractStatusDicById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractStatusDicById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractStatusDicStruct> GetContractStatusDicByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStatusDicByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractStatusDicStruct> GetContractStatusDicByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractStatusDicById, null, options, request);
      }
      /// <summary>
      ///创建ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateContractStatusDicInfo(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateContractStatusDicInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateContractStatusDicInfo(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateContractStatusDicInfo, null, options, request);
      }
      /// <summary>
      ///创建ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateContractStatusDicInfoAsync(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateContractStatusDicInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateContractStatusDicInfoAsync(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateContractStatusDicInfo, null, options, request);
      }
      /// <summary>
      ///修改ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateContractStatusDicInfo(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateContractStatusDicInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateContractStatusDicInfo(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateContractStatusDicInfo, null, options, request);
      }
      /// <summary>
      ///修改ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateContractStatusDicInfoAsync(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateContractStatusDicInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateContractStatusDicInfoAsync(global::GrpcConferenceContractService.ContractStatusDicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateContractStatusDicInfo, null, options, request);
      }
      /// <summary>
      ///删除ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteContractStatusDicById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteContractStatusDicById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteContractStatusDicById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteContractStatusDicById, null, options, request);
      }
      /// <summary>
      ///删除ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteContractStatusDicByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteContractStatusDicByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ContractStatusDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteContractStatusDicByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteContractStatusDicById, null, options, request);
      }
      /// <summary>
      ///获取RemarkDic字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.RemarkDicForDicList GetRemarkDic(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemarkDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取RemarkDic字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.RemarkDicForDicList GetRemarkDic(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRemarkDic, null, options, request);
      }
      /// <summary>
      ///获取RemarkDic字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.RemarkDicForDicList> GetRemarkDicAsync(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemarkDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取RemarkDic字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.RemarkDicForDicList> GetRemarkDicAsync(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRemarkDic, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.RemarkDicList GetRemarkDicList(global::GrpcConferenceContractService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemarkDicList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.RemarkDicList GetRemarkDicList(global::GrpcConferenceContractService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRemarkDicList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.RemarkDicList> GetRemarkDicListAsync(global::GrpcConferenceContractService.PaginationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemarkDicListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.RemarkDicList> GetRemarkDicListAsync(global::GrpcConferenceContractService.PaginationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRemarkDicList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.RemarkDicStruct GetRemarkDicById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemarkDicById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.RemarkDicStruct GetRemarkDicById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRemarkDicById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.RemarkDicStruct> GetRemarkDicByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemarkDicByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.RemarkDicStruct> GetRemarkDicByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRemarkDicById, null, options, request);
      }
      /// <summary>
      ///创建RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateRemarkDicInfo(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRemarkDicInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateRemarkDicInfo(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRemarkDicInfo, null, options, request);
      }
      /// <summary>
      ///创建RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateRemarkDicInfoAsync(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRemarkDicInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateRemarkDicInfoAsync(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRemarkDicInfo, null, options, request);
      }
      /// <summary>
      ///修改RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateRemarkDicInfo(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRemarkDicInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateRemarkDicInfo(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRemarkDicInfo, null, options, request);
      }
      /// <summary>
      ///修改RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateRemarkDicInfoAsync(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRemarkDicInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateRemarkDicInfoAsync(global::GrpcConferenceContractService.RemarkDicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRemarkDicInfo, null, options, request);
      }
      /// <summary>
      ///删除RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteRemarkDicById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRemarkDicById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteRemarkDicById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRemarkDicById, null, options, request);
      }
      /// <summary>
      ///删除RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteRemarkDicByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRemarkDicByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除RemarkDic单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteRemarkDicByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRemarkDicById, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内memberPK和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractActivityMapList GetPersonContractActivityMapByMemberPKList(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractActivityMapByMemberPKList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内memberPK和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractActivityMapList GetPersonContractActivityMapByMemberPKList(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractActivityMapByMemberPKList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内memberPK和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByMemberPKListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractActivityMapByMemberPKListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内memberPK和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByMemberPKListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractActivityMapByMemberPKList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内activityId和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractActivityMapList GetPersonContractActivityMapByActivityIdList(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractActivityMapByActivityIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内activityId和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractActivityMapList GetPersonContractActivityMapByActivityIdList(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractActivityMapByActivityIdList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内activityId和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByActivityIdListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractActivityMapByActivityIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内activityId和year字段获取PersonContractActivityMap列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByActivityIdListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractActivityMapByActivityIdList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber和year字段获取PersonContractActivityMap列表(根据个人合同号获取PersonContractActivityMap列表)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractActivityMapList GetPersonContractActivityMapByPersonContractNumberList(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractActivityMapByPersonContractNumberList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber和year字段获取PersonContractActivityMap列表(根据个人合同号获取PersonContractActivityMap列表)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractActivityMapList GetPersonContractActivityMapByPersonContractNumberList(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractActivityMapByPersonContractNumberList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber和year字段获取PersonContractActivityMap列表(根据个人合同号获取PersonContractActivityMap列表)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByPersonContractNumberListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractActivityMapByPersonContractNumberListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内perContractNumber和year字段获取PersonContractActivityMap列表(根据个人合同号获取PersonContractActivityMap列表)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractActivityMapList> GetPersonContractActivityMapByPersonContractNumberListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractActivityMapByPersonContractNumberList, null, options, request);
      }
      /// <summary>
      ///创建PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreatePersonContractActivityMapInfo(global::GrpcConferenceContractService.PersonContractActivityMapList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePersonContractActivityMapInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreatePersonContractActivityMapInfo(global::GrpcConferenceContractService.PersonContractActivityMapList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePersonContractActivityMapInfo, null, options, request);
      }
      /// <summary>
      ///创建PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreatePersonContractActivityMapInfoAsync(global::GrpcConferenceContractService.PersonContractActivityMapList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePersonContractActivityMapInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreatePersonContractActivityMapInfoAsync(global::GrpcConferenceContractService.PersonContractActivityMapList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePersonContractActivityMapInfo, null, options, request);
      }
      /// <summary>
      ///修改PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdatePersonContractActivityMapInfo(global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePersonContractActivityMapInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdatePersonContractActivityMapInfo(global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePersonContractActivityMapInfo, null, options, request);
      }
      /// <summary>
      ///修改PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdatePersonContractActivityMapInfoAsync(global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePersonContractActivityMapInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改PersonContractActivityMap多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdatePersonContractActivityMapInfoAsync(global::GrpcConferenceContractService.PersonContractActivityMapListToUpdate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePersonContractActivityMapInfo, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceBySessionConferenceIdListPagination(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceBySessionConferenceIdListPagination(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceBySessionConferenceIdListPagination(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplyConferenceBySessionConferenceIdListPagination, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdListPaginationAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceBySessionConferenceIdListPaginationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdListPaginationAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplyConferenceBySessionConferenceIdListPagination, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内memberPK,year获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceByMemberPkAndYear(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceByMemberPkAndYear(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内memberPK,year获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceByMemberPkAndYear(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplyConferenceByMemberPkAndYear, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内memberPK,year获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByMemberPkAndYearAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceByMemberPkAndYearAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内memberPK,year获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByMemberPkAndYearAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplyConferenceByMemberPkAndYear, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year,owerid获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year,owerid获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year,owerid获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdAndTagTypeCodeListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceBySessionConferenceIdAndTagTypeCodeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year,owerid获取ApplyConferenceList（带分页和查询条件）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdAndTagTypeCodeListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内id(PersonContractId),year获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceByPerContractIdList(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceByPerContractIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内id(PersonContractId),year获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceByPerContractIdList(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplyConferenceByPerContractIdList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内id(PersonContractId),year获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByPerContractIdListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceByPerContractIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内id(PersonContractId),year获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByPerContractIdListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplyConferenceByPerContractIdList, null, options, request);
      }
      /// <summary>
      ///根据CompanyId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceByCompanyIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据CompanyId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceByCompanyIdList(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplyConferenceByCompanyIdList, null, options, request);
      }
      /// <summary>
      ///根据CompanyId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByCompanyIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceByCompanyIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据CompanyId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceByCompanyIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplyConferenceByCompanyIdList, null, options, request);
      }
      /// <summary>
      ///根据SessionConferenceId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceBySessionConferenceIdList(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceBySessionConferenceIdList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SessionConferenceId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ApplyConferenceList GetApplyConferenceBySessionConferenceIdList(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplyConferenceBySessionConferenceIdList, null, options, request);
      }
      /// <summary>
      ///根据SessionConferenceId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplyConferenceBySessionConferenceIdListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SessionConferenceId获取ApplyConferenceList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ApplyConferenceList> GetApplyConferenceBySessionConferenceIdListAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplyConferenceBySessionConferenceIdList, null, options, request);
      }
      /// <summary>
      ///新增或修改ApplyConference多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateOrUpdateApplyConferenceInfo(global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrUpdateApplyConferenceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///新增或修改ApplyConference多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateOrUpdateApplyConferenceInfo(global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOrUpdateApplyConferenceInfo, null, options, request);
      }
      /// <summary>
      ///新增或修改ApplyConference多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateOrUpdateApplyConferenceInfoAsync(global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrUpdateApplyConferenceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///新增或修改ApplyConference多个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateOrUpdateApplyConferenceInfoAsync(global::GrpcConferenceContractService.ApplyConferenceListToCreateOrUpdate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOrUpdateApplyConferenceInfo, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteLetterStruct GetInviteLetterById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteLetterById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteLetterStruct GetInviteLetterById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInviteLetterById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteLetterStruct> GetInviteLetterByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteLetterByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteLetterStruct> GetInviteLetterByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInviteLetterById, null, options, request);
      }
      /// <summary>
      ///创建InviteLetter单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther CreateInviteLetterInfo(global::GrpcConferenceContractService.InviteLetterStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInviteLetterInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建InviteLetter单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForCreateOther CreateInviteLetterInfo(global::GrpcConferenceContractService.InviteLetterStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateInviteLetterInfo, null, options, request);
      }
      /// <summary>
      ///创建InviteLetter单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateInviteLetterInfoAsync(global::GrpcConferenceContractService.InviteLetterStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInviteLetterInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建InviteLetter单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForCreateOther> CreateInviteLetterInfoAsync(global::GrpcConferenceContractService.InviteLetterStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateInviteLetterInfo, null, options, request);
      }
      /// <summary>
      ///获取TagType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.TagTypeForDicList GetTagTypeDic(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTagTypeDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取TagType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.TagTypeForDicList GetTagTypeDic(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTagTypeDic, null, options, request);
      }
      /// <summary>
      ///获取TagType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.TagTypeForDicList> GetTagTypeDicAsync(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTagTypeDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取TagType字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.TagTypeForDicList> GetTagTypeDicAsync(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTagTypeDic, null, options, request);
      }
      /// <summary>
      ///根据code获取YearConfig
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.TagTypeStruct GetTagTypeByCode(global::GrpcConferenceContractService.CodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTagTypeByCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据code获取YearConfig
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.TagTypeStruct GetTagTypeByCode(global::GrpcConferenceContractService.CodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTagTypeByCode, null, options, request);
      }
      /// <summary>
      ///根据code获取YearConfig
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.TagTypeStruct> GetTagTypeByCodeAsync(global::GrpcConferenceContractService.CodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTagTypeByCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据code获取YearConfig
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.TagTypeStruct> GetTagTypeByCodeAsync(global::GrpcConferenceContractService.CodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTagTypeByCode, null, options, request);
      }
      /// <summary>
      ///创建TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateTagTypeInfo(global::GrpcConferenceContractService.TagTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTagTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateTagTypeInfo(global::GrpcConferenceContractService.TagTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTagTypeInfo, null, options, request);
      }
      /// <summary>
      ///创建TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateTagTypeInfoAsync(global::GrpcConferenceContractService.TagTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTagTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateTagTypeInfoAsync(global::GrpcConferenceContractService.TagTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTagTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateTagTypeInfo(global::GrpcConferenceContractService.TagTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTagTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateTagTypeInfo(global::GrpcConferenceContractService.TagTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTagTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateTagTypeInfoAsync(global::GrpcConferenceContractService.TagTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTagTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateTagTypeInfoAsync(global::GrpcConferenceContractService.TagTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTagTypeInfo, null, options, request);
      }
      /// <summary>
      ///删除TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteTagTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTagTypeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteTagTypeById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTagTypeById, null, options, request);
      }
      /// <summary>
      ///删除TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteTagTypeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTagTypeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除TagType单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteTagTypeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTagTypeById, null, options, request);
      }
      /// <summary>
      ///获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.YearConfigForDicList GetYearConfigDic(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetYearConfigDic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.YearConfigForDicList GetYearConfigDic(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetYearConfigDic, null, options, request);
      }
      /// <summary>
      ///获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.YearConfigForDicList> GetYearConfigDicAsync(global::GrpcConferenceContractService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetYearConfigDicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.YearConfigForDicList> GetYearConfigDicAsync(global::GrpcConferenceContractService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetYearConfigDic, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内isUse字段获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.YearConfigForDicList GetYearConfigByIsUse(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetYearConfigByIsUse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内isUse字段获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.YearConfigForDicList GetYearConfigByIsUse(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetYearConfigByIsUse, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内isUse字段获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.YearConfigForDicList> GetYearConfigByIsUseAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetYearConfigByIsUseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内isUse字段获取YearConfig字典项
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.YearConfigForDicList> GetYearConfigByIsUseAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetYearConfigByIsUse, null, options, request);
      }
      /// <summary>
      ///创建YearConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateYearConfigInfo(global::GrpcConferenceContractService.YearConfigStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateYearConfigInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建YearConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateYearConfigInfo(global::GrpcConferenceContractService.YearConfigStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateYearConfigInfo, null, options, request);
      }
      /// <summary>
      ///创建YearConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateYearConfigInfoAsync(global::GrpcConferenceContractService.YearConfigStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateYearConfigInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建YearConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateYearConfigInfoAsync(global::GrpcConferenceContractService.YearConfigStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateYearConfigInfo, null, options, request);
      }
      /// <summary>
      ///修改YearConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateYearConfigInfo(global::GrpcConferenceContractService.YearConfigStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateYearConfigInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改YearConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateYearConfigInfo(global::GrpcConferenceContractService.YearConfigStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateYearConfigInfo, null, options, request);
      }
      /// <summary>
      ///修改YearConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateYearConfigInfoAsync(global::GrpcConferenceContractService.YearConfigStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateYearConfigInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改YearConfig单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateYearConfigInfoAsync(global::GrpcConferenceContractService.YearConfigStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateYearConfigInfo, null, options, request);
      }
      /// <summary>
      ///获取ConferenceOnsite列表，搜索条件为SearchStruct内contractNumber，companyName，companyServicePackId，userName,year
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceOnsiteList GetConferenceOnsiteList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceOnsiteList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取ConferenceOnsite列表，搜索条件为SearchStruct内contractNumber，companyName，companyServicePackId，userName,year
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceOnsiteList GetConferenceOnsiteList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceOnsiteList, null, options, request);
      }
      /// <summary>
      ///获取ConferenceOnsite列表，搜索条件为SearchStruct内contractNumber，companyName，companyServicePackId，userName,year
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceOnsiteList> GetConferenceOnsiteListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceOnsiteListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取ConferenceOnsite列表，搜索条件为SearchStruct内contractNumber，companyName，companyServicePackId，userName,year
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceOnsiteList> GetConferenceOnsiteListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceOnsiteList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceOnsiteStruct GetConferenceOnsiteById(global::GrpcConferenceContractService.IdIntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceOnsiteById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ConferenceOnsiteStruct GetConferenceOnsiteById(global::GrpcConferenceContractService.IdIntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConferenceOnsiteById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceOnsiteStruct> GetConferenceOnsiteByIdAsync(global::GrpcConferenceContractService.IdIntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConferenceOnsiteByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ConferenceOnsiteStruct> GetConferenceOnsiteByIdAsync(global::GrpcConferenceContractService.IdIntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConferenceOnsiteById, null, options, request);
      }
      /// <summary>
      ///创建ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite CreateConferenceOnsiteInfo(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConferenceOnsiteInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite CreateConferenceOnsiteInfo(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateConferenceOnsiteInfo, null, options, request);
      }
      /// <summary>
      ///创建ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite> CreateConferenceOnsiteInfoAsync(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConferenceOnsiteInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReplyForConferenceOnsite> CreateConferenceOnsiteInfoAsync(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateConferenceOnsiteInfo, null, options, request);
      }
      /// <summary>
      ///修改ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateConferenceOnsiteInfo(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConferenceOnsiteInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateConferenceOnsiteInfo(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateConferenceOnsiteInfo, null, options, request);
      }
      /// <summary>
      ///修改ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateConferenceOnsiteInfoAsync(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConferenceOnsiteInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateConferenceOnsiteInfoAsync(global::GrpcConferenceContractService.ConferenceOnsiteStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateConferenceOnsiteInfo, null, options, request);
      }
      /// <summary>
      ///删除ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteConferenceOnsiteById(global::GrpcConferenceContractService.IdIntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConferenceOnsiteById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteConferenceOnsiteById(global::GrpcConferenceContractService.IdIntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConferenceOnsiteById, null, options, request);
      }
      /// <summary>
      ///删除ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceOnsiteByIdAsync(global::GrpcConferenceContractService.IdIntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConferenceOnsiteByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除ConferenceOnsite单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteConferenceOnsiteByIdAsync(global::GrpcConferenceContractService.IdIntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConferenceOnsiteById, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内inviteCodeNumber,webSite，isNotFullUseInviteCode(是否未完全使用的邀请码（即已使用数量&lt;数量）)，isFullUseInviteCode(是否完全使用的邀请码（即已使用数量=数量））)，companyServicePackId,year
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeList GetInviteCodeList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内inviteCodeNumber,webSite，isNotFullUseInviteCode(是否未完全使用的邀请码（即已使用数量&lt;数量）)，isFullUseInviteCode(是否完全使用的邀请码（即已使用数量=数量））)，companyServicePackId,year
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeList GetInviteCodeList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInviteCodeList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内inviteCodeNumber,webSite，isNotFullUseInviteCode(是否未完全使用的邀请码（即已使用数量&lt;数量）)，isFullUseInviteCode(是否完全使用的邀请码（即已使用数量=数量））)，companyServicePackId,year
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeList> GetInviteCodeListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内inviteCodeNumber,webSite，isNotFullUseInviteCode(是否未完全使用的邀请码（即已使用数量&lt;数量）)，isFullUseInviteCode(是否完全使用的邀请码（即已使用数量=数量））)，companyServicePackId,year
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeList> GetInviteCodeListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInviteCodeList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeCSPVMStruct GetInviteCodeById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeCSPVMStruct GetInviteCodeById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInviteCodeById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeCSPVMStruct> GetInviteCodeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeCSPVMStruct> GetInviteCodeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInviteCodeById, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内InviteCodeNumber获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeCSPVMStruct GetInviteCodeByInviteCodeNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeByInviteCodeNumber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内InviteCodeNumber获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeCSPVMStruct GetInviteCodeByInviteCodeNumber(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInviteCodeByInviteCodeNumber, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内InviteCodeNumber获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeCSPVMStruct> GetInviteCodeByInviteCodeNumberAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeByInviteCodeNumberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内InviteCodeNumber获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeCSPVMStruct> GetInviteCodeByInviteCodeNumberAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInviteCodeByInviteCodeNumber, null, options, request);
      }
      /// <summary>
      ///创建InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateInviteCodeInfo(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInviteCodeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateInviteCodeInfo(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateInviteCodeInfo, null, options, request);
      }
      /// <summary>
      ///创建InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateInviteCodeInfoAsync(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInviteCodeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateInviteCodeInfoAsync(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateInviteCodeInfo, null, options, request);
      }
      /// <summary>
      ///修改InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateInviteCodeInfo(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInviteCodeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateInviteCodeInfo(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateInviteCodeInfo, null, options, request);
      }
      /// <summary>
      ///修改InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateInviteCodeInfoAsync(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInviteCodeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateInviteCodeInfoAsync(global::GrpcConferenceContractService.InviteCodeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateInviteCodeInfo, null, options, request);
      }
      /// <summary>
      ///删除InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteInviteCodeById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInviteCodeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteInviteCodeById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInviteCodeById, null, options, request);
      }
      /// <summary>
      ///删除InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteInviteCodeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInviteCodeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除InviteCode单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteInviteCodeByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInviteCodeById, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内perContractNumber，memberPK,memTranslation，inviteCodeId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeRecordList GetInviteCodeRecordList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeRecordList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内perContractNumber，memberPK,memTranslation，inviteCodeId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeRecordList GetInviteCodeRecordList(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInviteCodeRecordList, null, options, request);
      }
      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内perContractNumber，memberPK,memTranslation，inviteCodeId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeRecordList> GetInviteCodeRecordListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeRecordListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获取某表内所有数据包含分页，搜索条件为SearchStruct内perContractNumber，memberPK,memTranslation，inviteCodeId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeRecordList> GetInviteCodeRecordListAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInviteCodeRecordList, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeRecordStruct GetInviteCodeRecordById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeRecordById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.InviteCodeRecordStruct GetInviteCodeRecordById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInviteCodeRecordById, null, options, request);
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeRecordStruct> GetInviteCodeRecordByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteCodeRecordByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据主键id获取单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.InviteCodeRecordStruct> GetInviteCodeRecordByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInviteCodeRecordById, null, options, request);
      }
      /// <summary>
      ///创建InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateInviteCodeRecordInfo(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInviteCodeRecordInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateInviteCodeRecordInfo(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateInviteCodeRecordInfo, null, options, request);
      }
      /// <summary>
      ///创建InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateInviteCodeRecordInfoAsync(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInviteCodeRecordInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateInviteCodeRecordInfoAsync(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateInviteCodeRecordInfo, null, options, request);
      }
      /// <summary>
      ///修改InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateInviteCodeRecordInfo(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInviteCodeRecordInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply UpdateInviteCodeRecordInfo(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateInviteCodeRecordInfo, null, options, request);
      }
      /// <summary>
      ///修改InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateInviteCodeRecordInfoAsync(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInviteCodeRecordInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> UpdateInviteCodeRecordInfoAsync(global::GrpcConferenceContractService.InviteCodeRecordStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateInviteCodeRecordInfo, null, options, request);
      }
      /// <summary>
      ///删除InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteInviteCodeRecordById(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInviteCodeRecordById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply DeleteInviteCodeRecordById(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInviteCodeRecordById, null, options, request);
      }
      /// <summary>
      ///删除InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteInviteCodeRecordByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInviteCodeRecordByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除InviteCodeRecord单个对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> DeleteInviteCodeRecordByIdAsync(global::GrpcConferenceContractService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInviteCodeRecordById, null, options, request);
      }
      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据,
      ///传入SearchStruct内id(前一年的ConferenceId值，根据该值区分不同的会议套餐),year,conferenceId(新一年的会议id),conferenceName(新一年的会议名字，CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CopyPackInfoByYear(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyPackInfoByYear(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据,
      ///传入SearchStruct内id(前一年的ConferenceId值，根据该值区分不同的会议套餐),year,conferenceId(新一年的会议id),conferenceName(新一年的会议名字，CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CopyPackInfoByYear(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyPackInfoByYear, null, options, request);
      }
      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据,
      ///传入SearchStruct内id(前一年的ConferenceId值，根据该值区分不同的会议套餐),year,conferenceId(新一年的会议id),conferenceName(新一年的会议名字，CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CopyPackInfoByYearAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyPackInfoByYearAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据,
      ///传入SearchStruct内id(前一年的ConferenceId值，根据该值区分不同的会议套餐),year,conferenceId(新一年的会议id),conferenceName(新一年的会议名字，CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CopyPackInfoByYearAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyPackInfoByYear, null, options, request);
      }
      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据和CompanyServicePackMap表数据（关于储能），
      ///传入SearchStruct内year,conferenceId,conferenceName(CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      ///rpc CopyPackInfoByYearForESH (SearchStruct) returns (ModifyReply) {}
      ///把复制后的CompanyServicePack表和ServicePack表新数据，通过此接口在关联起来
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateCompanyServicePackMap(global::GrpcConferenceContractService.CompanyServicePackMapList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyServicePackMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据和CompanyServicePackMap表数据（关于储能），
      ///传入SearchStruct内year,conferenceId,conferenceName(CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      ///rpc CopyPackInfoByYearForESH (SearchStruct) returns (ModifyReply) {}
      ///把复制后的CompanyServicePack表和ServicePack表新数据，通过此接口在关联起来
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ModifyReply CreateCompanyServicePackMap(global::GrpcConferenceContractService.CompanyServicePackMapList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCompanyServicePackMap, null, options, request);
      }
      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据和CompanyServicePackMap表数据（关于储能），
      ///传入SearchStruct内year,conferenceId,conferenceName(CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      ///rpc CopyPackInfoByYearForESH (SearchStruct) returns (ModifyReply) {}
      ///把复制后的CompanyServicePack表和ServicePack表新数据，通过此接口在关联起来
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateCompanyServicePackMapAsync(global::GrpcConferenceContractService.CompanyServicePackMapList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCompanyServicePackMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///复制CompanyServicePack表和ServicePack表数据和CompanyServicePackMap表数据（关于储能），
      ///传入SearchStruct内year,conferenceId,conferenceName(CompanyServicePack内ConferenceName字段string),Translation(ServicePack内ConferenceName字段Json格式)字段值
      ///rpc CopyPackInfoByYearForESH (SearchStruct) returns (ModifyReply) {}
      ///把复制后的CompanyServicePack表和ServicePack表新数据，通过此接口在关联起来
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ModifyReply> CreateCompanyServicePackMapAsync(global::GrpcConferenceContractService.CompanyServicePackMapList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCompanyServicePackMap, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内isGive，year字段获取ContractStatisticsList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractStatisticsList GetContractStatisticsList(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStatisticsList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内isGive，year字段获取ContractStatisticsList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.ContractStatisticsList GetContractStatisticsList(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractStatisticsList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内isGive，year字段获取ContractStatisticsList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractStatisticsList> GetContractStatisticsListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractStatisticsListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内isGive，year字段获取ContractStatisticsList
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.ContractStatisticsList> GetContractStatisticsListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractStatisticsList, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内companyId，year字段,如果这个公司year年的所有二级合同中MaxContractNumber为正数的二级合同底下三级合同数量和最大数保持一致的，返回true，否则返回false
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.BoolReply IsMaxContractNumberEqualsPCCountByCompanyPKAndYear(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsMaxContractNumberEqualsPCCountByCompanyPKAndYear(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内companyId，year字段,如果这个公司year年的所有二级合同中MaxContractNumber为正数的二级合同底下三级合同数量和最大数保持一致的，返回true，否则返回false
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.BoolReply IsMaxContractNumberEqualsPCCountByCompanyPKAndYear(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsMaxContractNumberEqualsPCCountByCompanyPKAndYear, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内companyId，year字段,如果这个公司year年的所有二级合同中MaxContractNumber为正数的二级合同底下三级合同数量和最大数保持一致的，返回true，否则返回false
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.BoolReply> IsMaxContractNumberEqualsPCCountByCompanyPKAndYearAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsMaxContractNumberEqualsPCCountByCompanyPKAndYearAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内companyId，year字段,如果这个公司year年的所有二级合同中MaxContractNumber为正数的二级合同底下三级合同数量和最大数保持一致的，返回true，否则返回false
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.BoolReply> IsMaxContractNumberEqualsPCCountByCompanyPKAndYearAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsMaxContractNumberEqualsPCCountByCompanyPKAndYear, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId(必传，多个用","分隔)，perContractNumber，memTranslation，owerid，comNameTranslation，companyServicePackId,IsCheckIn,year字段获取参会晚宴数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList GetPersonContractListForLunch(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractListForLunch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId(必传，多个用","分隔)，perContractNumber，memTranslation，owerid，comNameTranslation，companyServicePackId,IsCheckIn,year字段获取参会晚宴数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList GetPersonContractListForLunch(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractListForLunch, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId(必传，多个用","分隔)，perContractNumber，memTranslation，owerid，comNameTranslation，companyServicePackId,IsCheckIn,year字段获取参会晚宴数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList> GetPersonContractListForLunchAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractListForLunchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId(必传，多个用","分隔)，perContractNumber，memTranslation，owerid，comNameTranslation，companyServicePackId,IsCheckIn,year字段获取参会晚宴数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractAndSessionConferenceIdList> GetPersonContractListForLunchAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractListForLunch, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year获取PersonContractList（带分页）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractListAndApplyConference(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractListAndApplyConference(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year获取PersonContractList（带分页）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList GetPersonContractListAndApplyConference(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonContractListAndApplyConference, null, options, request);
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year获取PersonContractList（带分页）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractListAndApplyConferenceAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPersonContractListAndApplyConferenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据SearchStruct内sessionConferenceId,tagtypeCode,year获取PersonContractList（带分页）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> GetPersonContractListAndApplyConferenceAsync(global::GrpcConferenceContractService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonContractListAndApplyConference, null, options, request);
      }
      /// <summary>
      ///导出个人合同表数据（IsPrint为false）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList ExportPersonContractList(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportPersonContractList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///导出个人合同表数据（IsPrint为false）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConferenceContractService.PersonContractList ExportPersonContractList(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExportPersonContractList, null, options, request);
      }
      /// <summary>
      ///导出个人合同表数据（IsPrint为false）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> ExportPersonContractListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportPersonContractListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///导出个人合同表数据（IsPrint为false）
      ///（带查询条件SearchStruct内查询字段为perContractNumber,comNameTranslation,memTranslation,companyServicePackId,owerid,cTypeCode,conferenceId,pcIsdelete,companyId,year,memberPK,contractCode,exTypeCode(区分snec或者esh等合同，传空字符串取全部)）
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConferenceContractService.PersonContractList> ExportPersonContractListAsync(global::GrpcConferenceContractService.SearchStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExportPersonContractList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ConferenceContractServiceToGrpcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConferenceContractServiceToGrpcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConferenceContractServiceToGrpcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetConferenceContractList, serviceImpl.GetConferenceContractList)
          .AddMethod(__Method_GetConferenceContractListByIsGive, serviceImpl.GetConferenceContractListByIsGive)
          .AddMethod(__Method_GetConferenceContractListByIsGiveWithAllContractStatusCode, serviceImpl.GetConferenceContractListByIsGiveWithAllContractStatusCode)
          .AddMethod(__Method_GetConferenceContractByCompanyIdList, serviceImpl.GetConferenceContractByCompanyIdList)
          .AddMethod(__Method_GetConferenceContractByCompanyIdAndYearList, serviceImpl.GetConferenceContractByCompanyIdAndYearList)
          .AddMethod(__Method_GetConferenceContractById, serviceImpl.GetConferenceContractById)
          .AddMethod(__Method_CreateConferenceContractInfo, serviceImpl.CreateConferenceContractInfo)
          .AddMethod(__Method_UpdateConferenceContractInfo, serviceImpl.UpdateConferenceContractInfo)
          .AddMethod(__Method_ModifyConferenceContractByOwer, serviceImpl.ModifyConferenceContractByOwer)
          .AddMethod(__Method_ModifyConferenceContractPaymentStatusCode, serviceImpl.ModifyConferenceContractPaymentStatusCode)
          .AddMethod(__Method_ModifyConferenceContractIsSendEmail, serviceImpl.ModifyConferenceContractIsSendEmail)
          .AddMethod(__Method_ModifyModifyPermissionById, serviceImpl.ModifyModifyPermissionById)
          .AddMethod(__Method_DeleteConferenceContractById, serviceImpl.DeleteConferenceContractById)
          .AddMethod(__Method_DeleteConferenceContractByList, serviceImpl.DeleteConferenceContractByList)
          .AddMethod(__Method_DeleteConCAndCCAndPCByConIdList, serviceImpl.DeleteConCAndCCAndPCByConIdList)
          .AddMethod(__Method_GetCompanyContractList, serviceImpl.GetCompanyContractList)
          .AddMethod(__Method_GetCompanyContractByConferenceContractIdList, serviceImpl.GetCompanyContractByConferenceContractIdList)
          .AddMethod(__Method_GetCompanyContractByCompanyIdList, serviceImpl.GetCompanyContractByCompanyIdList)
          .AddMethod(__Method_GetCompanyContractById, serviceImpl.GetCompanyContractById)
          .AddMethod(__Method_CreateCompanyContractInfo, serviceImpl.CreateCompanyContractInfo)
          .AddMethod(__Method_UpdateCompanyContractInfo, serviceImpl.UpdateCompanyContractInfo)
          .AddMethod(__Method_ModifyMaxContractNumber, serviceImpl.ModifyMaxContractNumber)
          .AddMethod(__Method_ModifyCCPCOwer, serviceImpl.ModifyCCPCOwer)
          .AddMethod(__Method_DeleteCompanyContractById, serviceImpl.DeleteCompanyContractById)
          .AddMethod(__Method_RemoveCompanyContractIfPersonContractEmpty, serviceImpl.RemoveCompanyContractIfPersonContractEmpty)
          .AddMethod(__Method_DeleteCompanyContractByList, serviceImpl.DeleteCompanyContractByList)
          .AddMethod(__Method_DeleteCCAndPCByCidList, serviceImpl.DeleteCCAndPCByCidList)
          .AddMethod(__Method_GetPersonContractList, serviceImpl.GetPersonContractList)
          .AddMethod(__Method_GetPersonContractByContractIdList, serviceImpl.GetPersonContractByContractIdList)
          .AddMethod(__Method_GetPersonContractByNewList, serviceImpl.GetPersonContractByNewList)
          .AddMethod(__Method_GetPersonContractByMemberPKList, serviceImpl.GetPersonContractByMemberPKList)
          .AddMethod(__Method_GetPersonContractByMemberPKListWithNoPagination, serviceImpl.GetPersonContractByMemberPKListWithNoPagination)
          .AddMethod(__Method_GetPersonContractById, serviceImpl.GetPersonContractById)
          .AddMethod(__Method_GetPersonContractByPersonContractNumber, serviceImpl.GetPersonContractByPersonContractNumber)
          .AddMethod(__Method_CreatePersonContractInfo, serviceImpl.CreatePersonContractInfo)
          .AddMethod(__Method_UpdatePersonContractInfo, serviceImpl.UpdatePersonContractInfo)
          .AddMethod(__Method_ModifyPersonContractByIsCheckIn, serviceImpl.ModifyPersonContractByIsCheckIn)
          .AddMethod(__Method_ModifyPersonContractIsCheckInByIdList, serviceImpl.ModifyPersonContractIsCheckInByIdList)
          .AddMethod(__Method_ModifyPersonContractIsSendEmail, serviceImpl.ModifyPersonContractIsSendEmail)
          .AddMethod(__Method_ModifyPersonContractIsFianceRecord, serviceImpl.ModifyPersonContractIsFianceRecord)
          .AddMethod(__Method_ModifyPersonContractIsPrintByOwerid, serviceImpl.ModifyPersonContractIsPrintByOwerid)
          .AddMethod(__Method_ModifyPersonContractIsPrintByids, serviceImpl.ModifyPersonContractIsPrintByids)
          .AddMethod(__Method_DeletePersonContractById, serviceImpl.DeletePersonContractById)
          .AddMethod(__Method_DeletePersonContractByList, serviceImpl.DeletePersonContractByList)
          .AddMethod(__Method_DeletePersonContractByIdForWeb, serviceImpl.DeletePersonContractByIdForWeb)
          .AddMethod(__Method_GetCompanyServicePackDic, serviceImpl.GetCompanyServicePackDic)
          .AddMethod(__Method_GetCompanyServicePackDicByYear, serviceImpl.GetCompanyServicePackDicByYear)
          .AddMethod(__Method_GetCompanyServicePackListByIsShownOnFront, serviceImpl.GetCompanyServicePackListByIsShownOnFront)
          .AddMethod(__Method_GetCompanyServicePackList, serviceImpl.GetCompanyServicePackList)
          .AddMethod(__Method_GetCompanyServicePackListByContractTypeId, serviceImpl.GetCompanyServicePackListByContractTypeId)
          .AddMethod(__Method_GetCompanyServicePackListForLunchOrDinner, serviceImpl.GetCompanyServicePackListForLunchOrDinner)
          .AddMethod(__Method_GetCompanyServicePackById, serviceImpl.GetCompanyServicePackById)
          .AddMethod(__Method_CreateCompanyServicePackInfo, serviceImpl.CreateCompanyServicePackInfo)
          .AddMethod(__Method_UpdateCompanyServicePackInfo, serviceImpl.UpdateCompanyServicePackInfo)
          .AddMethod(__Method_DeleteCompanyServicePackById, serviceImpl.DeleteCompanyServicePackById)
          .AddMethod(__Method_GetCompanyServicePackVMByPersonContractNumber, serviceImpl.GetCompanyServicePackVMByPersonContractNumber)
          .AddMethod(__Method_GetExtraServiceList, serviceImpl.GetExtraServiceList)
          .AddMethod(__Method_GetExtraServiceById, serviceImpl.GetExtraServiceById)
          .AddMethod(__Method_CreateExtraServiceInfo, serviceImpl.CreateExtraServiceInfo)
          .AddMethod(__Method_UpdateExtraServiceInfo, serviceImpl.UpdateExtraServiceInfo)
          .AddMethod(__Method_DeleteExtraServiceById, serviceImpl.DeleteExtraServiceById)
          .AddMethod(__Method_GetServicePackListAll, serviceImpl.GetServicePackListAll)
          .AddMethod(__Method_GetServicePackByConferenceIdList, serviceImpl.GetServicePackByConferenceIdList)
          .AddMethod(__Method_GetServicePackList, serviceImpl.GetServicePackList)
          .AddMethod(__Method_GetServicePackById, serviceImpl.GetServicePackById)
          .AddMethod(__Method_CreateServicePackInfo, serviceImpl.CreateServicePackInfo)
          .AddMethod(__Method_UpdateServicePackInfo, serviceImpl.UpdateServicePackInfo)
          .AddMethod(__Method_DeleteServicePackById, serviceImpl.DeleteServicePackById)
          .AddMethod(__Method_IsCanDeleteAcitvity, serviceImpl.IsCanDeleteAcitvity)
          .AddMethod(__Method_IsExistSessionConferencdId, serviceImpl.IsExistSessionConferencdId)
          .AddMethod(__Method_RemoveSCBySessionConferencdId, serviceImpl.RemoveSCBySessionConferencdId)
          .AddMethod(__Method_GetContractTypeDic, serviceImpl.GetContractTypeDic)
          .AddMethod(__Method_GetContractTypeList, serviceImpl.GetContractTypeList)
          .AddMethod(__Method_GetContractTypeById, serviceImpl.GetContractTypeById)
          .AddMethod(__Method_CreateContractTypeInfo, serviceImpl.CreateContractTypeInfo)
          .AddMethod(__Method_UpdateContractTypeInfo, serviceImpl.UpdateContractTypeInfo)
          .AddMethod(__Method_DeleteContractTypeById, serviceImpl.DeleteContractTypeById)
          .AddMethod(__Method_GetCCNumberConfigDic, serviceImpl.GetCCNumberConfigDic)
          .AddMethod(__Method_GetCCNumberConfigList, serviceImpl.GetCCNumberConfigList)
          .AddMethod(__Method_GetCCNumberConfigById, serviceImpl.GetCCNumberConfigById)
          .AddMethod(__Method_CreateCCNumberConfigInfo, serviceImpl.CreateCCNumberConfigInfo)
          .AddMethod(__Method_UpdateCCNumberConfigInfo, serviceImpl.UpdateCCNumberConfigInfo)
          .AddMethod(__Method_DeleteCCNumberConfigById, serviceImpl.DeleteCCNumberConfigById)
          .AddMethod(__Method_GetDSPDList, serviceImpl.GetDSPDList)
          .AddMethod(__Method_GetDSPDById, serviceImpl.GetDSPDById)
          .AddMethod(__Method_CreateDSPDInfo, serviceImpl.CreateDSPDInfo)
          .AddMethod(__Method_UpdateDSPDInfo, serviceImpl.UpdateDSPDInfo)
          .AddMethod(__Method_DeleteDSPDById, serviceImpl.DeleteDSPDById)
          .AddMethod(__Method_GetDSPDFCCList, serviceImpl.GetDSPDFCCList)
          .AddMethod(__Method_GetDSPDFCCById, serviceImpl.GetDSPDFCCById)
          .AddMethod(__Method_CreateDSPDFCCInfo, serviceImpl.CreateDSPDFCCInfo)
          .AddMethod(__Method_UpdateDSPDFCCInfo, serviceImpl.UpdateDSPDFCCInfo)
          .AddMethod(__Method_DeleteDSPDFCCById, serviceImpl.DeleteDSPDFCCById)
          .AddMethod(__Method_GetContractStatusDic, serviceImpl.GetContractStatusDic)
          .AddMethod(__Method_GetContractStatusDicList, serviceImpl.GetContractStatusDicList)
          .AddMethod(__Method_GetContractStatusDicById, serviceImpl.GetContractStatusDicById)
          .AddMethod(__Method_CreateContractStatusDicInfo, serviceImpl.CreateContractStatusDicInfo)
          .AddMethod(__Method_UpdateContractStatusDicInfo, serviceImpl.UpdateContractStatusDicInfo)
          .AddMethod(__Method_DeleteContractStatusDicById, serviceImpl.DeleteContractStatusDicById)
          .AddMethod(__Method_GetRemarkDic, serviceImpl.GetRemarkDic)
          .AddMethod(__Method_GetRemarkDicList, serviceImpl.GetRemarkDicList)
          .AddMethod(__Method_GetRemarkDicById, serviceImpl.GetRemarkDicById)
          .AddMethod(__Method_CreateRemarkDicInfo, serviceImpl.CreateRemarkDicInfo)
          .AddMethod(__Method_UpdateRemarkDicInfo, serviceImpl.UpdateRemarkDicInfo)
          .AddMethod(__Method_DeleteRemarkDicById, serviceImpl.DeleteRemarkDicById)
          .AddMethod(__Method_GetPersonContractActivityMapByMemberPKList, serviceImpl.GetPersonContractActivityMapByMemberPKList)
          .AddMethod(__Method_GetPersonContractActivityMapByActivityIdList, serviceImpl.GetPersonContractActivityMapByActivityIdList)
          .AddMethod(__Method_GetPersonContractActivityMapByPersonContractNumberList, serviceImpl.GetPersonContractActivityMapByPersonContractNumberList)
          .AddMethod(__Method_CreatePersonContractActivityMapInfo, serviceImpl.CreatePersonContractActivityMapInfo)
          .AddMethod(__Method_UpdatePersonContractActivityMapInfo, serviceImpl.UpdatePersonContractActivityMapInfo)
          .AddMethod(__Method_GetApplyConferenceBySessionConferenceIdListPagination, serviceImpl.GetApplyConferenceBySessionConferenceIdListPagination)
          .AddMethod(__Method_GetApplyConferenceByMemberPkAndYear, serviceImpl.GetApplyConferenceByMemberPkAndYear)
          .AddMethod(__Method_GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList, serviceImpl.GetApplyConferenceBySessionConferenceIdAndTagTypeCodeList)
          .AddMethod(__Method_GetApplyConferenceByPerContractIdList, serviceImpl.GetApplyConferenceByPerContractIdList)
          .AddMethod(__Method_GetApplyConferenceByCompanyIdList, serviceImpl.GetApplyConferenceByCompanyIdList)
          .AddMethod(__Method_GetApplyConferenceBySessionConferenceIdList, serviceImpl.GetApplyConferenceBySessionConferenceIdList)
          .AddMethod(__Method_CreateOrUpdateApplyConferenceInfo, serviceImpl.CreateOrUpdateApplyConferenceInfo)
          .AddMethod(__Method_GetInviteLetterById, serviceImpl.GetInviteLetterById)
          .AddMethod(__Method_CreateInviteLetterInfo, serviceImpl.CreateInviteLetterInfo)
          .AddMethod(__Method_GetTagTypeDic, serviceImpl.GetTagTypeDic)
          .AddMethod(__Method_GetTagTypeByCode, serviceImpl.GetTagTypeByCode)
          .AddMethod(__Method_CreateTagTypeInfo, serviceImpl.CreateTagTypeInfo)
          .AddMethod(__Method_UpdateTagTypeInfo, serviceImpl.UpdateTagTypeInfo)
          .AddMethod(__Method_DeleteTagTypeById, serviceImpl.DeleteTagTypeById)
          .AddMethod(__Method_GetYearConfigDic, serviceImpl.GetYearConfigDic)
          .AddMethod(__Method_GetYearConfigByIsUse, serviceImpl.GetYearConfigByIsUse)
          .AddMethod(__Method_CreateYearConfigInfo, serviceImpl.CreateYearConfigInfo)
          .AddMethod(__Method_UpdateYearConfigInfo, serviceImpl.UpdateYearConfigInfo)
          .AddMethod(__Method_GetConferenceOnsiteList, serviceImpl.GetConferenceOnsiteList)
          .AddMethod(__Method_GetConferenceOnsiteById, serviceImpl.GetConferenceOnsiteById)
          .AddMethod(__Method_CreateConferenceOnsiteInfo, serviceImpl.CreateConferenceOnsiteInfo)
          .AddMethod(__Method_UpdateConferenceOnsiteInfo, serviceImpl.UpdateConferenceOnsiteInfo)
          .AddMethod(__Method_DeleteConferenceOnsiteById, serviceImpl.DeleteConferenceOnsiteById)
          .AddMethod(__Method_GetInviteCodeList, serviceImpl.GetInviteCodeList)
          .AddMethod(__Method_GetInviteCodeById, serviceImpl.GetInviteCodeById)
          .AddMethod(__Method_GetInviteCodeByInviteCodeNumber, serviceImpl.GetInviteCodeByInviteCodeNumber)
          .AddMethod(__Method_CreateInviteCodeInfo, serviceImpl.CreateInviteCodeInfo)
          .AddMethod(__Method_UpdateInviteCodeInfo, serviceImpl.UpdateInviteCodeInfo)
          .AddMethod(__Method_DeleteInviteCodeById, serviceImpl.DeleteInviteCodeById)
          .AddMethod(__Method_GetInviteCodeRecordList, serviceImpl.GetInviteCodeRecordList)
          .AddMethod(__Method_GetInviteCodeRecordById, serviceImpl.GetInviteCodeRecordById)
          .AddMethod(__Method_CreateInviteCodeRecordInfo, serviceImpl.CreateInviteCodeRecordInfo)
          .AddMethod(__Method_UpdateInviteCodeRecordInfo, serviceImpl.UpdateInviteCodeRecordInfo)
          .AddMethod(__Method_DeleteInviteCodeRecordById, serviceImpl.DeleteInviteCodeRecordById)
          .AddMethod(__Method_CopyPackInfoByYear, serviceImpl.CopyPackInfoByYear)
          .AddMethod(__Method_CreateCompanyServicePackMap, serviceImpl.CreateCompanyServicePackMap)
          .AddMethod(__Method_GetContractStatisticsList, serviceImpl.GetContractStatisticsList)
          .AddMethod(__Method_IsMaxContractNumberEqualsPCCountByCompanyPKAndYear, serviceImpl.IsMaxContractNumberEqualsPCCountByCompanyPKAndYear)
          .AddMethod(__Method_GetPersonContractListForLunch, serviceImpl.GetPersonContractListForLunch)
          .AddMethod(__Method_GetPersonContractListAndApplyConference, serviceImpl.GetPersonContractListAndApplyConference)
          .AddMethod(__Method_ExportPersonContractList, serviceImpl.ExportPersonContractList).Build();
    }

  }
}
#endregion
